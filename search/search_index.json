{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Open Source forking and cleaning in progress</p> <p>This documentation is currently being updated to reflect the fork and resulting changes in moving to a free and open source version of XYZ Maps. </p> <p>That means all references to proprietary links, APIs and authentication are removed and where possible redirected to an open version. Also a lot of the marketing speak and terminology will be cleaned.</p> <p>While this is going on, links might be broken and command described in the documentation might not work or work differently. Stay tuned!</p>"},{"location":"#make-great-maps-easier-and-faster","title":"Make great maps easier and faster","text":"<p>XYZ Maps is an open, interoperable and real-time location data management service  that offers\u00a0simple APIs, SDKs, components, and interactive tools that enable everyone to\u00a0make maps easier and faster.</p> <p>At its core XYZ Maps is a collection of tools and APIs to enable everyone to easily manage map data and build great maps. It is built around standards like GeoJSON and designed to be open and interoperable with many other offerings. Most important of all, XYZ Maps offers real-time live interaction with location data.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>The easiest way to get started is to have a look at the easy to use XYZ Maps Studio web application to build and publish maps. Give it a try, it's completely free and open to use for everyone - you can host and run it yourself, no account or credentials needed.</p> <p>When you have a GeoJSON file you just want to have a look at without building a full map, check out our GeoJSON Tool tool. It's a great way to inspect data you'd want to work with.</p> <p>If you are a developer see our getting started guide for more details.</p> <p>Then, install the latest version of the XYZ Maps CLI with <code>npm</code>:</p> <pre><code>npm install -g xyzmaps-cli\n</code></pre>"},{"location":"#what-to-expect","title":"What to expect","text":"<ul> <li> <p>Powerful map data management and display tools that make working with   map data convenient and effective. The tools are easy to understand even if   you have no prior experience with geospatial, location or projections concepts.</p> </li> <li> <p>A free self-hosted service to store and access data for your maps with   straightforward RESTful API calls and a flexible CLI. The choice   is yours. </p> </li> <li> <p>UI components that make it easy to show and style data and content exactly how   you want to see it. It works well with huge amounts of data and also enables   rich interactive and real-time experiences.</p> </li> </ul> <p>For detailed instructions on the prerequisites see our getting started guide.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#non-developers","title":"Non-Developers","text":"<p>If you do not want to code to make a map or store your data, have a look at XYZ Studio. No coding required.</p> <p>XYZ Studio is not fully updated</p> <p>XYZ Studio is currently being updated to reflect the fork and resulting changes in moving to a free and open source version of XYZ Maps. </p>"},{"location":"getting-started/#developers","title":"Developers","text":"<p>To use XYZ Maps Hub as a developer you need a couple of things that we'll explain below. </p> <p>Next you probably want to have more control over what your doing. You can install XYZ CLI to drive a lot of things right from your commandline.</p> <p>If you are building a web application and want to show a map with your data have a look at our XYZ Maps UI as it was built to show and style Space data on a map.</p> <p>To integrate XYZ Maps data features into a mobile, web or server application you can make REST calls to the XYZ Hub APIs to work with data directly.</p>"},{"location":"getting-started/#get-started-with-xyz-maps","title":"Get started with XYZ Maps","text":"<p>Getting started resources is not fully updated</p> <p>XYZ Maps documentation is currently being updated to reflect the fork and resulting changes in moving to a free and open source version of XYZ Maps. </p>"},{"location":"api/","title":"Overview","text":"<p>XYZ Maps is a real-time self-hosted location hub for discovering, storing, retrieving, manipulating and publishing private or public mapping data.</p> <p>It uses the concepts of Spaces to store your data. A Space is your own geospatial data repository, which you can quickly create when needed to store data.</p> <p>To interact with the XYZ Maps API directly from your application you need to use XYZ's local REST APIs. These are simple to use from any application environment - you only need to know how to make RESTful requests.</p>"},{"location":"api/#data","title":"Data","text":"<p>When you have a space it's easy to store any GeoJSON data you want in a Space and retrieve it when needed. You do not have to worry about how to store data effectively if you want to use it on a map, and you don't have to understand the geospatial details. Your content is located in a safe place (the space) so it can be used efficiently on a map.</p> <p>Spaces are by definition worldwide and can include any type of GeoJSON feature. Within each feature, you can have different <code>properties</code> as the payload information.</p> <p>Every feature is identified by its <code>id</code> which is unique in the Space. You can read or update features directly using this identifier. And if you don't provide it yourself, the API will generate it for you.</p>"},{"location":"api/#tags","title":"Tags","text":"<p>To work efficiently with data, it is helpful to sub-divide it. Spaces allow you to do this with the use of <code>tags</code>. A Tag is a text that can be used with a subset of the data. Tags are optional for you or the owner of the Space you are working with.</p> <p>You might want to use different tags for the different ways you want to use or style data. For example, you might want to tag the Store location you place in a layer with the amenities that the particular store provides (<code>coffee</code>, <code>food</code>, <code>late_night</code>). In addition you could use <code>new</code> as a tag for newly opened stores you want to highlight and call out on the map.</p> <p>You can combine tags in a request by using <code>,</code> for <code>OR</code> and <code>+</code> for <code>AND</code>.</p>"},{"location":"api/#iterating","title":"Iterating","text":"<p>Another core concept when you are working Space is to iterate over the content to gather everything that you are interested in.</p> <p>If you access with a lot of data, you will retrieve it in parts. With the <code>limit</code> parameter, you tell the API how much data you want to see at once. The <code>handle</code> is something the API gives you together with the data, which you need to provide back when you want to continue to get the next chunk of data.</p>"},{"location":"api/#redoc-api-documentation","title":"ReDoc API documentation","text":"<p><code>https://localhost:8080/hub/static/redoc/</code></p>"},{"location":"api/#open-api-documentation","title":"Open API documentation","text":"<p><code>https://localhost:8080/hub/static/swagger/</code></p>"},{"location":"api/SUMMARY/","title":"Summary","text":"<ul> <li>Overview</li> <li>Migrating to IML</li> <li>Manage Tokens</li> <li>Quick Start</li> <li>Acquire Credentials</li> <li>Read Spaces</li> <li>Create a Space</li> <li>Write to a Space</li> <li>Use Activity Log</li> <li>Concepts</li> <li>GeoJSON Basics</li> <li>Namespaces</li> <li>Tags</li> <li>Tiles</li> <li>JSON Schema</li> <li>Walkthrough</li> <li>Create a Space</li> <li>Add and Delete Features</li> <li>Search by Bounding Box</li> <li>Search by Tags</li> <li>Iterate over Features</li> <li>Use Schema Validation</li> <li>Developer Guide</li> <li>Work with Spaces</li> <li>Work with Features</li> <li>Tags</li> <li>Access Features</li> <li>Search for Features</li> <li>Spatial Search for Features</li> <li>Adjust Searchable Properties</li> <li>Visualization and Clustering<ul> <li>viz</li> <li>hexbin (H3)</li> <li>quadbin</li> </ul> </li> <li>Work with Activity Log</li> <li>Common Errors</li> <li>API Reference</li> <li>Useful Links</li> </ul>"},{"location":"api/apireference/","title":"API Reference","text":""},{"location":"api/apireference/#swagger-api-documentation","title":"Swagger API documentation","text":"<p><code>https://localhost:8080/hub/static/swagger/</code></p>"},{"location":"api/apireference/#redoc-api-documentation","title":"ReDoc API documentation","text":"<p><code>https://localhost:8080/hub/static/redoc/</code></p>"},{"location":"api/apireference/#other-useful-links","title":"Other Useful Links","text":"<p>You will find other useful links on the Useful Links page</p>"},{"location":"api/links/","title":"XYZ Maps Links","text":"<p>Here is a list of links for working with XYZ Maps</p>"},{"location":"api/links/#api-and-service","title":"API and Service","text":""},{"location":"api/links/#base-url-for-your-api","title":"Base URL for your API","text":"<p><code>http://localhost:8080/hub/</code></p>"},{"location":"api/links/#swagger-api-documentation","title":"Swagger API documentation","text":"<p><code>http://localhost:8080/hub/static/swagger/</code></p>"},{"location":"api/links/#redoc-api-documentation","title":"ReDoc API documentation","text":"<p><code>http://localhost:8080/hub/static/redoc/</code></p>"},{"location":"api/links/#xyz-tools","title":"XYZ Tools","text":""},{"location":"api/links/#xyz-maps-playground","title":"XYZ Maps Playground","text":"<p><code>https://xyzmaps.github.io/xyz-maps/playground</code></p>"},{"location":"api/links/#xyz-maps-jsdoc-documentation","title":"XYZ Maps JSDoc Documentation","text":"<p><code>https://heremaps.github.io/xyz-maps/docs/</code></p>"},{"location":"api/links/#javascript-maps-ui-components","title":"JavaScript Maps UI Components","text":"<p>Common <code>https://localhost:8080/maps/latest/xyz-maps-common.min.js</code></p> <p>Core <code>https://localhost:8080/maps/latest/xyz-maps-core.min.js</code></p> <p>Display <code>https://localhost:8080/maps/latest/xyz-maps-display.min.js</code></p> <p>Editor <code>https://localhost:8080/maps/latest/xyz-maps-editor.min.js</code></p> <p>Links to copy and paste into your HTML header:</p> <pre><code>&lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-common.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n&lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-core.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n&lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-display.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n&lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-editor.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n</code></pre>"},{"location":"api/links/#xyz-maps-tools","title":"XYZ Maps Tools","text":""},{"location":"api/links/#xyz-geojson-tool","title":"XYZ GeoJSON Tool","text":"<p><code>https://xyzmaps.github.io/geojson-tool/</code></p>"},{"location":"api/links/#xyz-space-invaders","title":"XYZ Space Invaders","text":"<p><code>https://xyzmaps.github.io/xyz-space-invader</code></p>"},{"location":"api/concepts/concepts/","title":"Concepts","text":""},{"location":"api/concepts/geojsonbasics/","title":"GeoJSON Basics","text":"<p>GeoJSON is an open standardized format for geodata based on the Javascript Object Notation (JSON) used to encode geographic data structures. This section is based on RFC 7946.</p> <p>GeoJSON is a textual representation of geographical data and its non-spatial attributes. A GeoJSON document contains one object with can be a Feature, a FeatureCollection or a Geometry. The object has to have a property type which is one of the following:</p>"},{"location":"api/concepts/geojsonbasics/#point","title":"Point","text":"<p>The coordinates array of the Point object usually contains two to three dimensions representing longitude, latitude and possibly elevation in this order.</p>"},{"location":"api/concepts/geojsonbasics/#example-point","title":"Example Point","text":"<pre><code>{\n    \"type\": \"Point\",\n    \"coordinates\": [8.53362,50.16192]\n}\n</code></pre> <p>View this Point on a map</p>"},{"location":"api/concepts/geojsonbasics/#multipoint","title":"MultiPoint","text":"<p>Each entry in the coordinates array is a Point coordinates array.</p>"},{"location":"api/concepts/geojsonbasics/#example-multipoint","title":"Example MultiPoint","text":"<pre><code>{\n   \"type\": \"MultiPoint\",\n   \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n}\n</code></pre> <p>View this MultiPoint on a map</p>"},{"location":"api/concepts/geojsonbasics/#linestring","title":"LineString","text":"<p>A LineString coordinates array consists of two or more Point coordinates arrays.</p>"},{"location":"api/concepts/geojsonbasics/#example-linestring","title":"Example LineString","text":"<pre><code>{\n   \"type\": \"LineString\",\n   \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n}\n</code></pre> <p>View this LineString on a map</p>"},{"location":"api/concepts/geojsonbasics/#multilinestring","title":"MultiLineString","text":"<p>As the name suggests, a MultiLineString coordinates array contains LineString coordinates arrays.</p>"},{"location":"api/concepts/geojsonbasics/#example-multilinestring","title":"Example MultiLineString","text":"<pre><code>{\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [\n          [\n            [78.0422,27.1744],[78.0422,27.1733]\n          ],\n          [\n            [78.0422,27.1730],[78.0422,27.1719]\n          ]\n        ]\n      }\n</code></pre> <p>View this MultiLineString on a map</p>"},{"location":"api/concepts/geojsonbasics/#polygon","title":"Polygon","text":"<p>Each element of a Polygon coordinates array has to be a special LineString coordinates array. This special kind is called a 'linear ring' in the RFC specification. In a 'linear ring' the first and last elements in the coordinates array are the same.</p> <p>If the Polygon contains more than one 'linear ring', that is a shape with holes, the first ring must describe the exterior ring, following the holes. The coordinates of the exterior ring must be listed counterclockwise, the coordinates of the hole(s) clockwise.</p>"},{"location":"api/concepts/geojsonbasics/#example-polygon","title":"Example Polygon","text":"<pre><code>{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [\n      [-77.0578,38.87254],[-77.0584,38.87],[-77.0555,38.8688],[-77.0531,38.8706],[-77.0546,38.8729],[-77.0578,38.87254]\n    ],\n    [\n      [-77.0567,38.8715],[-77.0555,38.8717],[-77.0549,38.8708],[-77.0558,38.8702],[-77.0569,38.8706],[-77.0567,38.8715]\n    ]\n  ]\n}\n</code></pre> <p>View this Polygon on map</p>"},{"location":"api/concepts/geojsonbasics/#multipolygon","title":"Multipolygon","text":"<p>In a Multipolygon, each of the elements of the coordinates array is defined as a Polygon above.</p>"},{"location":"api/concepts/geojsonbasics/#example-multipolygon","title":"Example Multipolygon","text":"<pre><code>{\n   \"type\": \"MultiPolygon\",\n        \"coordinates\": [\n          [\n             [[31.1330,29.9780],[31.1354,29.9780],[31.1354,29.9801],[31.1330,29.9801],[31.1330,29.9780]],\n             [[31.1296,29.9750],[31.1319,29.9750],[31.1319,29.9769],[31.1296,29.9769],[31.1296,29.9750]],\n             [[31.1277,29.9720],[31.1287,29.9720],[31.1287,29.9729],[31.1277,29.9729],[31.1277,29.9720]]\n          ]\n        ]\n}\n</code></pre> <p>View this MultiPolygon on a map</p>"},{"location":"api/concepts/geojsonbasics/#feature","title":"Feature","text":"<p>A Feature object contains two members besides the type property: geometry and properties</p> <p>The geometry can be any of the aforementioned types or a GeoJSON null value.</p> <p>The value of properties can be any GeoJSON object or a GeoJSON null value.</p>"},{"location":"api/concepts/geojsonbasics/#example-feature","title":"Example Feature","text":"<pre><code>{\n   \"type\": \"Feature\",\n   \"geometry\": {\n       \"type\": \"LineString\",\n      \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n   },\n   \"properties\": {\n       \"prop0\": \"value0\",\n       \"prop1\": \"value1\"\n   }\n}\n</code></pre> <p>View this Feature on a map</p>"},{"location":"api/concepts/geojsonbasics/#featurecollection","title":"FeatureCollection","text":"<p>A FeatureCollection contains an array of Features, contained in a member called features.</p>"},{"location":"api/concepts/geojsonbasics/#example-featurecollection","title":"Example FeatureCollection","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -2.960847,\n          53.430828\n        ]\n      },\n      \"properties\": {\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"football\",\n            \"stadium\"\n          ]\n        },\n        \"name\": \"Anfield\",\n        \"amenity\": \"Football Stadium\",\n        \"capacity\": 54074,\n        \"popupContent\": \"Home of Liverpool Football Club\"\n      }\n    }\n  ]\n}\n</code></pre> <p>View this FeatureCollection on a map</p>"},{"location":"api/concepts/geojsonbasics/#geometrycollection","title":"GeometryCollection","text":"<p>A GeometryCollection is a collection of zero or more geometry objects like the ones above in an array member called geometries</p>"},{"location":"api/concepts/geojsonbasics/#warning","title":"Warning","text":"<p>GeometryCollection is not supported by xyzmaps space Hub. It is included here for completeness.</p>"},{"location":"api/concepts/geojsonbasics/#example-geometrycollection","title":"Example GeometryCollection","text":"<pre><code>{\n   \"type\": \"GeometryCollection\",\n   \"geometries\": [\n       {\n           \"type\": \"Point\",\n           \"coordinates\": [8.53362,50.16192]\n       },\n       {\n           \"type\": \"LineString\",\n           \"coordinates\": [\n               [13.35,52.5145], [13.377,52.5162]\n           ]\n       }\n   ]\n}\n</code></pre>"},{"location":"api/concepts/jsonschema/","title":"JSON Schema","text":"<p>JSON Schema provides vocabulary to define application-specific JSON documents. The authoritative resource for this topic is json-schema.org.</p>"},{"location":"api/concepts/jsonschema/#most-basic-schema","title":"Most basic Schema","text":"<p>The most basic schema is  </p> <pre><code>{ }\n</code></pre> <p>an empty JSON Object or (since draft 6 of the specification)</p> <pre><code>true\n</code></pre> <p>effectively accepting any valid JSON. To reject everything with setting</p> <pre><code>false\n</code></pre> <p>as the schema.</p>"},{"location":"api/concepts/jsonschema/#declaring-a-schema-with-schema","title":"Declaring a Schema with $schema","text":"<p>It is recommended to declare that a JSON fragment is a JSON Schema by using the $schema keyword in the root of the schema.</p> <pre><code>{ \"$schema\": \"http://json-schema.org/schema#\" }\n</code></pre> <p>If your schema was written against a specific version, you should include the draft name in the path, for example:</p> <pre><code>{ \"$schema\": \"http://json-schema.org/draft-04/schema#\" }\n</code></pre>"},{"location":"api/concepts/jsonschema/#identify-a-schema-with-id","title":"Identify a Schema with $id","text":"<p>It is best practice to include a unique identifier for each schema</p> <pre><code>{ \"$id\": \"http://yourdomain.com/schemas/myschema.json\" }\n</code></pre> <p>$id can also be used to reference a subschema without using JSON Pointer.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\n  \"definitions\": {\n    \"address\": {\n      \"$id\": \"#address\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": { \"type\": \"string\" },\n        \"city\":           { \"type\": \"string\" },\n        \"state\":          { \"type\": \"string\" }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"]\n    }\n  },\n\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"billing_address\": { \"$ref\": \"#address\" },\n    \"shipping_address\": { \"$ref\": \"#address\" }\n  }\n}\n</code></pre>"},{"location":"api/concepts/jsonschema/#warning","title":"Warning","text":"<p>XYZ Maps does not load external schema resources.</p>"},{"location":"api/concepts/jsonschema/#warning_1","title":"Warning","text":"<p>The $id properties of the schema must not include whitespace characters.</p>"},{"location":"api/concepts/jsonschema/#primitive-types","title":"Primitive Types","text":"<p>A JSON document to which a schema is applied is known as an 'instance'. An instance has one of six primitive types and a range of possible values:</p> <ol> <li> object An unordered set of properties mapping a string to an instance </li> <li> array an ordered list of instances </li> <li> string A string of Unicode characters </li> <li> number An arbitrary-precision base-10 decimal number value </li> <li> boolean A \"true\" or \"false\" value </li> <li> null JSON null </li> </ol> <p>Understanding JSON Schema provides a good overview of JSON Schema and the details of subtypes of the above.</p>"},{"location":"api/concepts/jsonschema/#example-json-schema-for-geojson","title":"Example JSON Schema for GeoJSON","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"geometry\": {\n      \"oneof\":[\n        {\n          \"type\": \"null\"\n        },{\n          \"type\":\"object\"\n        }\n      ]\n    },\n    \"properties\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ]\n    }\n  },\n  \"required\": [\n    \"type\",\n    \"geometry\",\n    \"properties\"\n  ]\n}\n</code></pre>"},{"location":"api/concepts/namespaces/","title":"Namespaces","text":"<p>Namespaces are used to group objects unambiguously, so they can be addressed without confusion. They are used in several areas like XML and Object-oriented programming.</p>"},{"location":"api/concepts/namespaces/#example","title":"Example","text":""},{"location":"api/concepts/namespaces/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PUT /spaces/{spaceId}/features?addTags=mountain,canada\n</code></pre> <p>with the following body</p> <pre><code>{\n    \"type\":\"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\":\"Feature\",\n        \"properties\":\n        {\n          \"name\":\"Baldy Mountain\"\n        },\n        \"geometry\":\n        {\n          \"type\":\"Point\",\n          \"coordinates\":[-100.728, 51.4686]\n        }\n      }\n  ]\n}\n</code></pre>"},{"location":"api/concepts/namespaces/#response","title":"Response","text":"<pre><code>{\n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -100.728,\n          51.4686\n        ]\n      },\n      \"id\": \"HsOsZ0FXUI\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Baldy Mountain\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1529855978032,\n          \"space\": \"{spaceId}\",\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"updatedAt\": 1529855978032\n        }\n      },\n      \"bbox\": [\n        -100.728,\n        51.4686,\n        -100.728,\n        51.4686\n      ]\n    }\n  ],\n  \"type\": \"FeatureCollection\"\n}\n</code></pre> <p>When you upload a feature to XYZ Maps, XYZ automatically adds a property @ns:com:here:xyz to it. The following information is recorded in this property:</p> <ul> <li>createdAt - date and time the feature was created in milliseconds since 01.01.1970</li> <li>updatedAt - date and time the feature was updated in milliseconds since 01.01.1970</li> <li>space - random unique space ID, created at space creation, a string</li> <li>tags - the tags you added to the space, an array of strings</li> </ul> <p>We use the namespace to store additional information in the object without interfering with the properties you provided.</p>"},{"location":"api/concepts/tags/","title":"Tags","text":"<p>To work efficiently with data, it is often necessary or helpful to sub-divide a data. Spaces allow you to do this with the help of tags. A Tag is a text that can be used with a subset of the data. Tags are optional for you or the owner of the Space you are working with.</p> <p>You might want to use different tags for the different ways you want to use or style data. For example, you might want to tag the Store location you are putting in a layer with the amenities that the particular store provides (coffee, food, late_night). In addition you could use new as a tag for newly opened stores you want to highlight and call out on the map.</p>"},{"location":"api/concepts/tiles/","title":"Tiles","text":"<p>The XYZ Maps API supports the following tile identifiers:</p> <ul> <li>web for the Mercator projection (used by OpenStreetMaps, Google Maps, Bing Maps and others)   format: level_x_y; for example: 10_100_100 means level 10. x-coordinate 100, y-coordinate 100</li> <li>tms for the Tile Map Service developed by the Open Source Geospatial Foundation format: level_x_y; for example: 10_100_100 means level 10 x-coordinate 100, y-coordinate 100</li> <li>quadkey for quadtree keys used by Bing Maps (formerly Virtual Earth) and others format: for example 0123031233 for level 10</li> </ul>"},{"location":"api/devguide/accessingfeatures/","title":"Access Features","text":"<p>This section describes how to get features from XYZ Maps by using a bounding box or a tile, and iterating features.</p>"},{"location":"api/devguide/accessingfeatures/#get-features-by-bounding-box","title":"Get Features by Bounding Box","text":"<p>You can get features from Spaces using a bounding box.</p>"},{"location":"api/devguide/accessingfeatures/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/bbox?west={westLongitude}&amp;north={northLatitude}&amp;east={eastLongitude}&amp;south={southLatitude}\n</code></pre>"},{"location":"api/devguide/accessingfeatures/#response","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n        {\n            \"type\": \"Feature\",\n            \"id\": \"BfiimUxHjj\",\n            \"geometry\":\n            {\n                \"type\": \"Point\",\n                \"coordinates\":\n                [\n                    -2.960847,\n                    53.430828\n                ]\n            },\n            \"properties\":\n            {\n                \"name\": \"Anfield\",\n                \"@ns:com:here:xyz\":\n                {\n                    \"createdAt\": 1517504700726,\n                    \"updatedAt\": 1517504700726,\n                    \"space\": \"x-demospace\",\n                    \"tags\":\n                    [\n                        \"football\",\n                        \"stadium\"\n                    ]\n                },\n                \"amenity\": \"Football Stadium\",\n                \"capacity\": 54074,\n                \"popupContent\": \"Home of Liverpool Football Club\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/accessingfeatures/#get-features-in-a-tile","title":"Get Features in a Tile","text":"<p>You can get features from Spaces using a tileID.</p>"},{"location":"api/devguide/accessingfeatures/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/tile/{type}/{tileId}\n</code></pre>"},{"location":"api/devguide/accessingfeatures/#response_1","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n        {\n            \"type\": \"Feature\",\n            \"id\": \"BfiimUxHjj\",\n            \"geometry\":\n            {\n                \"type\": \"Point\",\n                \"coordinates\":\n                [\n                    -2.960847,\n                    53.430828\n                ]\n            },\n            \"properties\":\n            {\n                \"name\": \"Anfield\",\n                \"@ns:com:here:xyz\":\n                {\n                    \"createdAt\": 1517504700726,\n                    \"updatedAt\": 1517504700726,\n                    \"space\": \"x-demospace\",\n                    \"tags\":\n                    [\n                        \"football\",\n                        \"stadium\"\n                    ]\n                },\n                \"amenity\": \"Football Stadium\",\n                \"capacity\": 54074,\n                \"popupContent\": \"Home of Liverpool Football Club\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/accessingfeatures/#get-features-for-iteration","title":"Get Features for Iteration","text":"<p>The request allows iterating through the features in Spaces. The features in the response are ordered so that no feature is returned twice within one iteration. However, the features are modified concurrently so all features may not be contained within an iteration.</p>"},{"location":"api/devguide/accessingfeatures/#request_2","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/iterate\n</code></pre>"},{"location":"api/devguide/accessingfeatures/#response_2","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n        {\n            \"type\": \"Feature\",\n            \"id\": \"BfiimUxHjj\",\n            \"geometry\":\n            {\n                \"type\": \"Point\",\n                \"coordinates\":\n                [\n                    -2.960847,\n                    53.430828\n                ]\n            },\n            \"properties\":\n            {\n                \"name\": \"Anfield\",\n                \"@ns:com:here:xyz\":\n                {\n                    \"createdAt\": 1517504700726,\n                    \"updatedAt\": 1517504700726,\n                    \"space\": \"x-demospace\",\n                    \"tags\":\n                    [\n                        \"football\",\n                        \"stadium\"\n                    ]\n                },\n                \"amenity\": \"Football Stadium\",\n                \"capacity\": 54074,\n                \"popupContent\": \"Home of Liverpool Football Club\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/activitylogguide/","title":"Work with Activity Log","text":""},{"location":"api/devguide/activitylogguide/#space-configuration","title":"Space configuration","text":"<p>If you just want to use the Activity Log, go to the quick start guide.</p> <p>This connector provides the user with the possibility to track changes to their space. By activating this feature, every modification of features (insert/update/delete by the ModifyFeaturesEvent) is tracked and stored in a separate space.</p> <p>To activate it, create a space with the listener added and enableUUID set to true:</p> <pre><code>{\n  \"title\": \"Test space to track changes.\",\n  \"enableUUID\": true,\n  \"listeners\": {\n    \"activity-log\": [{\n      \"params\": {\n        \"states\": 5,            //(Optional) Keeps a maximum of x states per object (x &gt; 0).\n        \"storageMode\": \"DIFF_ONLY\" | \"FULL\" | (\"FEATURE_ONLY\" or &lt;none&gt; -&gt; default),\n        \"writeInvalidatedAt\": false | true or &lt;none&gt; -&gt; default //(Optional) Write and update the invalidateAt timestamp. If set to false, this can reduce space requests.\n      }\n    }]\n  }\n}\n</code></pre> <p>The storage mode decides how the features will be stored.</p> <ul> <li>FEATURE_ONLY: Will store features with some history relative properties (defined below).</li> <li>DIFF_ONLY: Will store features with a 'diff'.'ops' property in the XYZ Maps activity-Log namespace, containing the RFC-6902 diff to its previous object. The features after the HEAD will only contain the XYZ Maps activity-log &amp; XYZ Maps namespace properties.</li> <li>FULL: Will store features with some history relative properties and a 'diff'.'ops' property in the XYZ Maps Activity Log namespace, containing the RFC-6902 diff to its previous object.</li> </ul> <p>ATTENTION: Applying the diff to the current feature will return the previous (older) feature. This means that adding a new property to a feature, will be shown as 'remove' &amp; 'pathToNewProperty' in the diff of the current.</p> <p>IMPORTANT: Since it is technically not possible to write changes for <code>DeleteFeaturesByTagEvent</code>, this event type is forbidden and the support of this event in the current space is removed.</p> <p>Within the ModifySpaceEvent, the listener prepares everything and modifies the space to log changes. It will create a new space where the features will be written to, register a new listener that will actually write the modifications and add a processor to prohibit the DeleteByTagEvents. Since the ModifyFeatureEvent.response is picked up in a listener, the actual features to log are written asynchronously to the newly created space. As a result, the performance of the actual request is not decreased.</p> <p>A full space definition with this feature enabled looks like this:</p> <pre><code>{\n  \"id\": \"&lt;yourSpaceId&gt;\",\n  \"title\": \"Test space to track changes.\",\n  \"description\": null,\n  \"enableUUID\": true,\n  \"listeners\": {\n    \"activity-log\": [\n      {\n        \"params\": {\n          \"states\": 5,\n          \"storageMode\": \"DIFF_ONLY\",\n          \"writeInvalidatedAt\": true\n        },\n        \"eventTypes\": [\n          \"ModifySpaceEvent.request\"\n        ]\n      }\n    ],\n    \"activity-log-writer\": [\n      {\n        \"params\": {\n          \"spaceId\": \"&lt;someNewlyCreatedSpaceId&gt;\",\n          \"states\": 5,\n          \"storageMode\": \"DIFF_ONLY\",\n          \"spaceType\": \"MAIN\",\n          \"writeInvalidatedAt\": true\n        },\n        \"eventTypes\": [\n          \"ModifyFeaturesEvent.response\",\n          \"ModifySpaceEvent.request\"\n        ]\n      }\n    ]\n  },\n  \"processors\":{\n    \"activity-log-writer\": [\n      {\n        \"id\": \"activity-log-writer\",\n        \"eventTypes\": [\n          \"DeleteFeaturesByTagEvent.request\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/devguide/activitylogguide/#note","title":"Note","text":"<p>Your account needs access to the XYZ Maps Add-on Services.</p>"},{"location":"api/devguide/activitylogguide/#written-features","title":"Written features","text":"<p>The features written to the new space are stored by uuid. So the space with this feature enabled needs to have enableUUID set to true.</p> <p>Additionally, the original feature element will be slightly modified:</p> <ul> <li>The id of the feature will be the uuid of the modified feature in the original space.</li> <li>The original properties of '@ns:com:here:xyz' will be stored under '@ns:com:here:xyz:log'.original</li> <li>The original id of the feature will be stored under '@ns:com:here:xyz:log'.id</li> <li>A new property will be added under '@ns:com:here:xyz:log'.invalidatedAt to indicate the time range, when this object was the HEAD (newest) history object.</li> <li> <p>If diff calculation is enabled, an array with differences in accord with RFC-6902 (JSON Patch) will be added under '@ns:com:here:xyz:log'.diff.ops</p> </li> <li> <p>ATTENTION: Applying the diff to the current feature, will return the previous (older) feature. This means that adding a new property to a feature, will be shown as 'remove' &amp; 'pathToNewProperty' in the diff of the current.</p> </li> <li> <p>The action of the operation (SAVE/UPDATE/DELETE) will be stored under '@ns:com:here:xyz:log'.action</p> </li> <li>Additional entries will be added to the tags, like:</li> <li>Tracking tags defined by the user (userId, changeId, streamId) //TO BE DONE</li> </ul> <p>After you added a new feature to a space, as follows:</p> <p>GET {space}/features/1 from original space:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"version\": 0,\n        \"@ns:com:here:xyz\": {\n          \"uuid\": \"00000000000000000000000000001\",\n          \"space\": \"mGGzwMoi\",\n          \"createdAt\": 1563451570741,\n          \"updatedAt\": 1570799106542\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          1,\n          0\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>... will look like this in the new space:</p> <p>Modifications after creation:</p> <ul> <li>The property 'version' was updated</li> <li>The property 'version' was updated and a new sub property was added</li> <li>The complete feature was deleted.</li> </ul> <p>Depending on the storage mode, the features may or may not contain diffs, in this case FULL.)</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"00000000000000000000000000002\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"version\": 1,\n        \"@ns:com:here:xyz\": {\n          \"tags\": [],\n          \"space\": \"&lt;someNewlyCreatedSpaceId&gt;\",\n          \"createdAt\": 1570802212642,\n          \"updatedAt\": 1570802223425\n        },\n        \"@ns:com:here:xyz:log\": {\n          \"id\": \"1\",\n          \"diff\": {\n            \"add\": 0,\n            \"ops\": [\n              {\n                \"op\": \"replace\",\n                \"path\": \"/properties/version\",\n                \"value\": 0\n              }\n            ],\n            \"copy\": 0,\n            \"move\": 0,\n            \"remove\": 0,\n            \"replace\": 1\n          },\n          \"action\": \"UPDATE\",\n          \"original\": {\n            \"puuid\": \"00000000000000000000000000001\",\n            \"space\": \"&lt;yourSpaceId&gt;\",\n            \"createdAt\": 1563451570741,\n            \"updatedAt\": 1570802185382\n          },\n          \"invalidatedAt\": 1570802185392\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          1,\n          0\n        ]\n      }\n    },\n    {\n      \"id\": \"00000000000000000000000000003\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"version\": 2,\n        \"newSubObject\": {\n          \"foo\":\"bar\"\n        },\n        \"@ns:com:here:xyz\": {\n          \"tags\": [],\n          \"space\": \"&lt;someNewlyCreatedSpaceId&gt;\",\n          \"createdAt\": 1570802221177,\n          \"updatedAt\": 1570802228766\n        },\n        \"@ns:com:here:xyz:log\": {\n          \"id\": \"1\",\n          \"diff\": {\n            \"add\": 0,\n            \"ops\": [\n              {\n                \"op\": \"remove\",\n                \"path\": \"/properties/newSubObject\"\n              },\n              {\n                \"op\": \"replace\",\n                \"path\": \"/properties/version\",\n                \"value\": 1\n              }\n            ],\n            \"copy\": 0,\n            \"move\": 0,\n            \"remove\": 1,\n            \"replace\": 1\n          },\n          \"action\": \"UPDATE\",\n          \"original\": {\n            \"puuid\": \"00000000000000000000000000002\",\n            \"space\": \"&lt;yourSpaceId&gt;\",\n            \"createdAt\": 1563451570741,\n            \"updatedAt\": 1570802185392\n          },\n          \"invalidatedAt\": 1570802226452\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          1,\n          0\n        ]\n      }\n    },\n    {\n      \"id\": \"00000000000000-new-random-uuid\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"@ns:com:here:xyz\": {\n          \"tags\": [],\n          \"space\": \"&lt;someNewlyCreatedSpaceId&gt;\",\n          \"createdAt\": 1570802226548,\n          \"updatedAt\": 1570802226548\n        },\n        \"@ns:com:here:xyz:log\": {\n          \"id\": \"1\",\n          \"action\": \"DELETE\",\n          \"original\": {\n            \"updatedAt\": 1570802226452\n          },\n          \"invalidatedAt\": 9223372036854776000\n        }\n      },\n      \"geometry\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"api/devguide/activitylogguide/#note_1","title":"Note","text":"<p>Applying the diffs patch array to the same object, results in the previous object.</p>"},{"location":"api/devguide/commonerrors/","title":"Common Errors","text":"<p>This page contains common error messages encountered when using the API.</p>"},{"location":"api/devguide/commonerrors/#schema-validation","title":"Schema Validation","text":""},{"location":"api/devguide/commonerrors/#the-value-must-be-a-valid-uri-reference","title":"The value must be a valid URI reference.","text":"<p>If the schema property \"$id\" contains one or more whitespace characters, the schema validation will report the error such as \"The value must be a valid URI reference\".</p> <p>Update your schema and make sure that all \"$id\" values do not contain whitespace characters.</p>"},{"location":"api/devguide/commonerrors/#the-object-must-have-a-property-whose-name-is-nscomherexyz","title":"The object must have a property whose name is \"@ns:com:here:xyz\".","text":"<p>During validation we will remove the field \"@ns:com:here:xyz\" containing tags, space ID, and a few other values from the properties. This is done to ensure that the JSON schema only checks user and not system generates properties.</p> <p>This means that JSON Schema used for validation must not contain \"@ns:com.here.xyz\" as a required property, because this property and its children will be removed before validation and only re-added afterwards.</p>"},{"location":"api/devguide/commonerrors/#the-schema-reference-myschemafilejsonhttpmydomainmyschemafilejson-cannot-be-resolved","title":"The schema reference \"/myschemafile.json\"(\"http://mydomain/myschemafile.json\") cannot be resolved.","text":"<p>XYZ will not load resolve external schema definitions, even if the URL points to a valid (sub-)schema. Use the definitions keyword to merge multiple schema files into one.</p>"},{"location":"api/devguide/developguide/","title":"Developer Guide","text":""},{"location":"api/devguide/hexbin/","title":"Use Clustering - hexbin","text":"<p>This section describes how to retrieve features from XYZ Maps in a hexbin clustered form. Two different clustering modes, \"hexbin\" and \"quadbin\", are available.</p> <ul> <li>\"quadbin\" - gives the amount of features in tiles and subtiles. Purpuse is to give a fast overview on dataset locations on lower zoom levels. The quadbins corresponds to the webmercator tiling scheme. </li> <li>\"hexbin\"  - gives the amount of feature in a hexagonal tiling. Beside the amount of the features per hexbin it provides  statistics (min, max, avg, median) on a user-defined property.</li> </ul>"},{"location":"api/devguide/hexbin/#hexbin","title":"hexbin","text":""},{"location":"api/devguide/hexbin/#get-clustered-features-in-a-tile","title":"Get clustered Features in a tile","text":"<p>While retrieving features from Spaces inside a tile you can use \"hexbin\" clustering to visualize your data as hexagons. Each hexagon represents the features of the area it covers. Additional statistical information about one property of your data can be evaluated and returned as properties of the returned hexagonal features.</p> <p>The hexbin algorithm divides the world in hexagonal \"bins\" on a specified resolution. Each hexagon has an address being described by the H3 addressing scheme. For more information on that topic see: https://eng.uber.com/h3/</p>"},{"location":"api/devguide/hexbin/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/tile/{type}/{tileId}?clustering=hexbin&amp;clustering.resolution={aNumber}&amp;clustering.property={aPropertyName}\n</code></pre> <p>The following clustering related parameters can be passed and combined with others ( e.g. tags, clip, feature filtering).</p> Parameter Type Mandatory Meaning absoluteResolution Number NO integer, The H3 hexagon resolution [0,13], default:( s.b. Default Resolution for zoomlevel  ) relativeResolution Number NO integer value [-2,2] to be added to current used resolution property String NO A property of the original features for which to calculate statistics pointmode Boolean NO retuns the centroid of hexagons as geojson feature singlecoord Boolean NO force to evaluate the first object coordinate only (default: false) sampling String NO samplingratio of underlying datasetvalues [off, low, lowmed, med, medhigh, high] (default: off)off ~ (1/1),low ~ (\u215b),lowmed ~ (1/32),med ~ (1/128),medhigh ~ (1/1024),high ~ (1/4096))"},{"location":"api/devguide/hexbin/#response","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"kind\" : \"H3\",\n                \"kind_detail\" : \"858b1303fffffff\",\n                \"resolution\": 5,\n                \"level\": 7,\n                \"aggregation\": {\n                    \"aPropertyName\": {  // only if a clustering.property={aPropertyName} is specified. If not specified field \"qty\" is\n                                        // written on this object-level (e.g. properties.aggregation.qty )\n                        \"avg\": 30.05000,\n                        \"max\": 44.1,\n                        \"min\": 16,\n                        \"qty\": 2,\n                        \"sum\": 60.1\n                    }\n                },\n            \"centroid\": [ ... ], // only if clustering.pointmode = false|null\n            \"hexagon\": [ ... ]  // only if clustering.pointmode = true\n            },\n            \"geometry\": {...},\n        },\n        ......\n        ......\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"kind\" : \"H3\",\n                 \"kind_detail\" : \"881f1d4a81fffff\",\n                    ....\n            },\n            \"geometry\": {...}\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/hexbin/#miscellaneous","title":"Miscellaneous","text":""},{"location":"api/devguide/hexbin/#default-resolution-for-zoomlevel","title":"Default Resolution for zoomlevel","text":"<p>The parameter clusterning.absoluteResolution specifies the size of the hexagons wanted. ( s. https://h3geo.org/docs/core-library/restable ) The default Resolution is balanced to suit size and performance of hexbin calculations per tile for normal amounts of data. Various parameters like amount, density, distribution and object size plays a role in performance time. Higher resolution specific tile level, up to ( default + 2 ) can be specified on experimental base, depending on datasize. If the value of clusterning resolution exeeds the maximum value for tile level, the maximum resolution will be used instead.</p> Zoomlevel Default H3 Resolution 0 2 1 2 2 2 3 2 4 3 5 4 6 4 7 5 8 6 9 6 10 7 11 8 12 9 13 9 14 10 15 11 16 11 17 12 18 13 19 13 20 13 21 13 22 13"},{"location":"api/devguide/propertiessearch/","title":"Search for Features","text":"<p>This section describes how to search for specific features in your space on the basis of the properties. This is a powerful tool to retrieve just a specific subset of the content in your space.</p>"},{"location":"api/devguide/propertiessearch/#check-which-properties-are-searchable","title":"Check which properties are searchable","text":"<p>Not all Feature properties are necessarily searchable. So before using the property search it helps to check which of the properties in your space can be searched.</p> <p>To check which of the properties in your space a search can be performed on, check the space's statistics.</p>"},{"location":"api/devguide/propertiessearch/#note","title":"Note","text":"<p>XYZ Maps has a space-specific algorithm to automatically decide which of the space's properties are searchable. In case you desire other properties to be searchable, refer to the guide at \"Adjust searchable properties\".*</p>"},{"location":"api/devguide/propertiessearch/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/statistics\n</code></pre>"},{"location":"api/devguide/propertiessearch/#response","title":"Response","text":"<pre><code>{\n    \"type\": \"StatisticsResponse\",\n    \"count\": {\n        \"value\": 29208,\n        \"estimated\": true\n    },\n    \"byteSize\": {\n        \"value\": 108364,\n        \"estimated\": true\n    },\n    \"bbox\": {\n        \"value\": [\n            -10,\n            -10,\n            10,\n            10\n        ],\n        \"estimated\": true\n    },\n    \"geometryTypes\": {\n        \"value\": [\n            \"Point\"\n        ],\n        \"estimated\": true\n    },\n    \"properties\": {\n        \"value\": [\n            {\n                \"key\": \"Route\",\n                \"count\": 29208,\n                \"searchable\": false\n            },\n            {\n                \"key\": \"Route Type\",\n                \"count\": 29208,\n                \"searchable\": true\n            }\n        ],\n        \"estimated\": true,\n        \"searchable\": \"PARTIAL\"\n    },\n    \"tags\": {\n        \"value\": [\n            {\n                \"key\": \"PuneBusStop\",\n                \"count\": 29208\n            }\n        ]\n    }\n}\n</code></pre> <p>The StatisticsResponse above, shows the searchable property having the value PARTIAL. This is a global indicator which can have one of the following values:</p> <ul> <li><code>NONE</code> (No properties in your space are searchable, so no search queries can be performed)</li> <li><code>PARTIAL</code> (Some of the properties are searchable)</li> <li><code>ALL</code> (All of the properties are searchable)</li> </ul> <p>In case of <code>PARTIAL</code> you can find the more detailed <code>searchable</code> boolean flags inside the <code>value</code>-array of the <code>properties</code>-map.</p>"},{"location":"api/devguide/propertiessearch/#search-for-features-in-the-space","title":"Search for features in the space","text":"<p>Using one of the API endpoints <code>/spaces/{spaceId}/search</code>, <code>/spaces/{spacesId}/bbox</code> or <code>/spaces/{spaceId}/tile</code>, you can retrieve a set of features in your space matching a specified query. Such a query could look like:</p> <pre><code>GET /spaces/{spaceId}/search?p.someProperty1=value1,value2\n</code></pre> <p>Here the prefix <code>p.</code> points to the feature's properties map. The resulting FeatureCollection will contain all features having <code>value1</code> or <code>value2</code> for the property <code>property_name_1</code>.</p> <p>Filtering on values of the properties <code>someProperty1</code> and <code>someProperty2</code> a query could look like:</p> <pre><code>GET /spaces/{spaceId}/search?p.someProperty1=value1,value2&amp;p.someProperty2&lt;527\n</code></pre> <p>The available operators are:</p> <ul> <li>\"=\" - equals</li> <li>\"!=\" - not equals</li> <li>\"&gt;=\" or \"=gte=\" - greater than or equals</li> <li>\"&lt;=\" or \"=lte=\" - less than or equals</li> <li>\"&gt;\" or \"=gt=\" - greater than</li> <li>\"&lt;\" or \"=lt=\" - less than</li> <li>\"@&gt;\" or \"=cs=\" - contains</li> </ul> <p>The response will contain only the features matching all conditions in the query. In case of the bounding-box or tile queries, the search is only applied to the features located in the specified area.</p>"},{"location":"api/devguide/quadbin/","title":"Use Clustering - quadbin","text":"<p>This section describes how to retrieve features from XYZ Maps inside a tile in a clustered form. Two different clustering modes, \"hexbin\" and \"quadbin\", are available.</p> <ul> <li>\"quadbin\" - gives the amount of features in tiles and subtiles. Purpuse is to give a fast overview on dataset locations on lower zoom levels. The quadbins corresponds to the webmercator tiling scheme. </li> <li>\"hexbin\"  - gives the amount of feature in a hexagonal tiling. Beside the amount of the features per hexbin it provides  statistics (min, max, avg, median) on a user-defined property.</li> </ul>"},{"location":"api/devguide/quadbin/#quadbin","title":"quadbin","text":""},{"location":"api/devguide/quadbin/#get-clustered-features-in-a-tile","title":"Get clustered Features in a tile","text":"<p>The quadbin algorithm takes the geometry input from the request (e.g. quadkey / bbox..) and does estimated count on the features contained in the space. This clustering mode works also for very large spaces and can be used for getting an overview where data is geolocated in a given space. Furthermore, a property filter on one property is applicable.</p> <p>There are several parameters needed by the quadbin algorithm. You can use one property filter in combination.</p>"},{"location":"api/devguide/quadbin/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/tile/{type}/{tileId}?clustering=quadbin&amp;clustering.relativeResolution={aNumber}&amp;clustering.countmode={cmode}\n</code></pre> <p>The following clustering related parameters can be passed</p> Parameter Type Mandatory Meaning relativeResolution Number NO integer, The quad resolution [0,4] noBuffer Boolean NO do not place a buffer around quad polygons, default: false countmode String NO [real, estimated, mixed]real = real feature counts.Best accuracy, but slow.Not recommended for big result setsestimated = estimated feature counts.Low accuracy, but very fastRecommended for big result setsmixed (default) = estimated feature counts combined with real ones.If the estimation is low a real count gets applied. Fits to themost use cases"},{"location":"api/devguide/quadbin/#response","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"qk\": \"12002323333\",     // tile quadkey\n                \"xyz\": \"(639,1071,11)\",  // tile row/col/level \n                \"count\": 30393,          // count of features in tile \n                \"estimated\": true,       \n                \"total_count\": 33521484,      // total feature count in related space\n                \"equipartition_count\": 511    // total_count/#Nr_Of_All_Level_Tiles\n            },\n            \"geometry\": {...}  \n        },\n        ......\n        ......\n        {\n            \"type\": \"Feature\",\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"qk\": \"12002323331\",\n                \"xyz\": \"(638,1071,11)\", \n                    ....\n            },\n            \"geometry\": {...}\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/searchableproperties/","title":"Adjust Searchable Properties","text":"<p>This section describes how to use the extended capability of enabling property-search for user-specified properties of your GeoJSON features inside a space.</p> <p>It is recommended that you read the \"properties-search\" guide before proceeding with this more specific guide.</p>"},{"location":"api/devguide/searchableproperties/#note","title":"Note","text":"<p>Your account needs access to the XYZ Maps Add-on Services.</p>"},{"location":"api/devguide/searchableproperties/#searching-for-features-in-a-space","title":"Searching for features in a space","text":"<p>If the above prerequisites are fulfilled, adjusting the searchable properties can be done by updating the space's <code>searchableProperties</code> property. This can be done using a <code>PATCH</code> request to the <code>/spaces/{spaceId}</code> endpoint.</p> <p><code>searchableProperties</code> is a map of which the keys are property names and the values are boolean flags telling whether the property should be searchable or not.</p> <p>The following sample shows how to define <code>someProperty1</code> to be searchable and <code>someProperty2</code> to be not searchable. In case you're wondering about the latter: This could be necessary to tell XYZ Maps to revoke the decision of making <code>someProperty2</code> searchable in the automated algorithm.</p> <p>TL;DR XYZ Maps has a space-specific algorithm to automatically decide which of the space's properties are searchable. In case you desire other properties to be searchable the <code>searchableProperties</code> map can be used to define that.</p> <pre><code>{\n  \"someProperty1\": true,\n  \"someProperty2\": false\n}\n</code></pre> <p>Nested properties can be specified using the dot-notation e.g.:</p> <pre><code>{\n  \"some.nested.property\": true\n}\n</code></pre> <p>It is also possible to define the datatype which is used on the property. Available datatypes are object, array, string, number, and boolean. If the datatype is not given, an attempt is made  to determine it automatically. The syntax is \"someProperty::datatype\"</p> <pre><code>{\n  \"some.nested.property::array\": true\n}\n</code></pre> <p>Remember: In a <code>PATCH</code>-operation only the properties to be changed are necessary</p>"},{"location":"api/devguide/searchableproperties/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PATCH /spaces/{spaceId}\n</code></pre> <p>with the following body</p> <pre><code>{\n    \"searchableProperties\": {\n        \"someProperty1\": true,\n        \"someProperty2\": false,\n        \"some.nested.property\": true\n    }\n}\n</code></pre>"},{"location":"api/devguide/searchableproperties/#response","title":"Response","text":"<pre><code>{\n    \"title\": \"My Demo Space\",\n    \"description\": \"Description as markdown\",\n    \"searchableProperties\": {\n        \"someProperty1\": true,\n        \"someProperty2\": false,\n        \"some.nested.property\": true\n    }\n}\n</code></pre>"},{"location":"api/devguide/spatialsearch/","title":"Spatial Search for Features","text":"<p>This section describes how to search for specific features in your space which are intersecting with a provided geometry.</p>"},{"location":"api/devguide/spatialsearch/#possibilities-to-provide-a-geometry-for-a-spatial-search","title":"Possibilities to Provide a Geometry for a Spatial Search","text":"<p>A spatial search requires a Geometry as an input. One common use-case: find all Features which are around 1000 meters from a given Position. Another one could be: find all Features which are 100 meters beside a road.</p> <p>You can realize that kind of spatial search by providing a Point or LineSting Geometry and a radius, indicated in meters, which gets applied to thicken the input Geometry.</p> <p>Another common usecase is: find all Features which are belonging to a country. For this, you only need to provide the Polygon Geometry of the country.  </p> <p>All GeoJSON Geometry types are allowed as input [Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon].</p>"},{"location":"api/devguide/spatialsearch/#submitting-geometry-via-post-request","title":"Submitting Geometry via POST Request","text":"<p>The easiest way for providing a search Geometry is submitting it via a POST-Request.  </p>"},{"location":"api/devguide/spatialsearch/#referencing-an-existing-geometry-for-a-spatial-search","title":"Referencing an existing Geometry for a Spatial Search","text":"<p>Another way to provide a search Geometry is to read it from a existing Feature, which is stored in a XYZ Maps Space that you have access to. This is recommended if your search Geometry is very complex, or if you want to store frequently used Geometries for spatial searches.</p>"},{"location":"api/devguide/spatialsearch/#extend-spatial-search","title":"Extend Spatial Search","text":"<p>You can combine the spatial search requests with defining:</p> <ul> <li>radius - in meter to thicken the input Geometry</li> <li>property search - add filter based on properties</li> <li>tag search - add filter based on tags</li> <li>selection - select properties which should exclusively get included in the response</li> </ul>"},{"location":"api/devguide/spatialsearch/#using-spatial-get-requests","title":"Using Spatial GET-Requests","text":""},{"location":"api/devguide/spatialsearch/#request","title":"Request","text":"<p>Try in your local Swagger</p> <p>Spatial-Search by referencing a position (lat,lon) &amp; defining a radius indicated in meters:</p> <pre><code>GET /spaces/{spaceId}/spatial?lon={Longitude}&amp;lat={Latitude}&amp;radius={raduisInMeters}\n</code></pre> <p>Spatial-Search by referencing a Feature from a XYZ Maps Space:</p> <pre><code>GET /spaces/{spaceId}/spatial?refSpaceId={referencedSpace}&amp;refFeatureId\n={referencedFeatureId}\n</code></pre>"},{"location":"api/devguide/spatialsearch/#response","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n        {\n            \"type\": \"Feature\",\n            \"id\": \"BfiimUxHjj\",\n            \"geometry\":\n            {\n                \"type\": \"Point\",\n                \"coordinates\":\n                [\n                    7.01,\n                    50.03\n                ]\n            },\n            \"properties\":\n            {\n                \"name\": \"Anfield\",\n                \"@ns:com:here:xyz\":\n                {\n                    \"createdAt\": 1517504700726,\n                    \"updatedAt\": 1517504700726,\n                    \"space\": \"x-demospace\",\n                    \"tags\":\n                    [\n                        \"football\",\n                        \"stadium\"\n                    ]\n                },\n                \"amenity\": \"Football Stadium\",\n                \"capacity\": 54074,\n                \"popupContent\": \"Home of Liverpool Football Club\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/spatialsearch/#using-spatial-post-request","title":"Using Spatial POST-Request","text":""},{"location":"api/devguide/spatialsearch/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <p>Spatial-Search by posting a Geometry:</p> <pre><code>POST /spaces/{spaceId}/spatial\n</code></pre> <p>with the following body</p> <pre><code>{\n    \"type\": \"MultiPolygon\",\n    \"coordinates\": [\n        [\n            [\n                [\n                    7,\n                    50\n                ],\n                [\n                    7.1,\n                    50\n                ],\n                [\n                    7.1,\n                    50.1\n                ],\n                [\n                    7,\n                    50.1\n                ],\n                [\n                    7,\n                    50\n                ]\n            ],\n            [\n                [\n                    7.05,\n                    50.05\n                ]\n                [\n                    7.05,\n                    50.09\n                ],\n                [\n                    7.09,\n                    50.09\n                ],\n                [\n                    7.09,\n                    50.05\n                ],\n                [\n                    7.05,\n                    50.05\n                ]\n            ]\n        ]\n    ]\n}\n</code></pre>"},{"location":"api/devguide/spatialsearch/#response_1","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n        {\n            \"type\": \"Feature\",\n            \"id\": \"BfiimUxHjj\",\n            \"geometry\":\n            {\n                \"type\": \"Point\",\n                \"coordinates\":\n                [\n                    7.01,\n                    50.03\n                ]\n            },\n            \"properties\":\n            {\n                \"name\": \"Anfield\",\n                \"@ns:com:here:xyz\":\n                {\n                    \"createdAt\": 1517504700726,\n                    \"updatedAt\": 1517504700726,\n                    \"space\": \"x-demospace\",\n                    \"tags\": []\n                    [\n                        \"football\",\n                        \"stadium\"\n                    ]\n                },\n                \"amenity\": \"Football Stadium\",\n                \"capacity\": 54074,\n                \"popupContent\": \"Home of Liverpool Football Club\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/tagging/","title":"Tagging","text":"<p>To work efficiently with data, it is often necessary or helpful to sub-divide a data. Spaces allow you to do this with the help of tags. A Tag is just a text that can be used to only concern yourself with a subset of the data. Tags are optional for you or the owner of the Space you are working with.</p> <p>You might want to use different tags for the different ways you want to use or style data. For example, you might want to tag the Store location you are putting in a layer with the amenities that the particular store provides (coffee, food, late_night). In addition you could use new as a tag for newly opened stores you want to highlight and call out on the map.</p>"},{"location":"api/devguide/visualization/","title":"Optimized modes for tile visualization on lower zoom level","text":"<p>On lower zoom levels, to reduce the payload, tiled data can be optimized in size. This will result in better performace for rendering clients.  This affects the amount of features, their attributes and coordinates.</p> <p>All described parameters and values are related to tile requests.</p>"},{"location":"api/devguide/visualization/#modeviz","title":"mode=viz","text":"<p>The strategies to reduce datasize in \"viz\" mode are as follows.</p> <ul> <li> <p>reduce payload of features default, every feature will contain an empty feature.properties value. (e.g. properties:{} ) To get specific properties attributes, they must be explicit specified with tile parameter \"selection=\". (e.g. \"http://....?mode=viz&amp;selection=p.firstAttrib,p.secondAttrib,...p.lastAttrib ) For parameter \"selection=\" the special values \"*\", for all attributes, and \"none\" can be used.</p> </li> <li> <p>reduce coordinates of geometry depending on requested tile level the coordinates of the geometries (except for point objects) are reduced, to at most one coordinate per pixel (512 pixelsize per tile)</p> </li> <li> <p>reduce amount of features per tile   default, a sampling threshold of at max 30k objects for the requested tiles is used   The threshold can be controled with the additional parameter vizSampling (s.b.)</p> </li> </ul>"},{"location":"api/devguide/visualization/#vizsamplingvalue","title":"vizSampling={value}","text":"<p>In order to reduce the amount of data returned, only an evenly distributed sample of data can be requested.  Parameter vizSampling sets the wanted threshold for the requested tiles. E.g. setting \"vizSampling=med\" when requesting a specific tile, will calculate the sampling ratio such that, the \"heaviest\" tile in an observed region of the dataset will contain at most 30k objects.</p> value threshold low 70k med 30k (default) high 15k off turn off vizSampling"},{"location":"api/devguide/visualization/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/tile/{type}/{tileId}?mode=viz&amp;vizSampling=med&amp;selection=*\n</code></pre>"},{"location":"api/devguide/vizandclustering/","title":"Visualization and Clustering","text":""},{"location":"api/devguide/workwithfeatures/","title":"Work with Features","text":""},{"location":"api/devguide/workwithfeatures/#read-features-in-a-space-by-id","title":"Read Features in a Space by ID","text":"<p>The following request queries a single feature using the ID of the feature.</p>"},{"location":"api/devguide/workwithfeatures/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/features/{featureId}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response","title":"Response","text":"<pre><code>{\n  \"type\": \"Feature\",\n  \"id\": \"{featureId}\",\n  \"geometry\":\n  {\n    \"type\": \"Point\",\n    \"coordinates\":\n    [\n      -2.960847,\n      53.430828\n    ]\n  },\n  \"properties\":\n  {\n    \"name\": \"Anfield\",\n    \"@ns:com:here:xyz\":\n        {\n          \"tags\":\n             [\n               \"football\",\n               \"stadium\"\n             ]\n        },\n        \"amenity\": \"Football Stadium\",\n        \"capacity\": 54074,\n        \"popupContent\": \"Home of Liverpool Football Club\"\n  }\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#read-features-of-a-space","title":"Read Features of a Space","text":"<p>For querying multiple features in a space use the following request:</p>"},{"location":"api/devguide/workwithfeatures/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/[spaceId}/features?id={featureId1},{featureId2},{featureId3}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_1","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n           \"@ns:com:here:xyz\":\n           {\n             \"tags\":\n             [\n               \"football\",\n               \"stadium\"\n             ]\n            },\n            \"name\": \"Anfield\",\n            \"amenity\": \"Football Stadium\",\n            \"capacity\": 54074,\n            \"popupContent\": \"Home of Liverpool Football Club\"\n          }\n      }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#get-a-feature-count-and-other-statistics","title":"Get a Feature Count and other statistics","text":"<p>Here is an example of getting the number of features in a space, the size and a list of tags on the space.</p>"},{"location":"api/devguide/workwithfeatures/#request_2","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/statistics\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_2","title":"Response","text":"<pre><code>{\n  \"type\": \"StatisticsResponse\",\n  \"count\": {\n    \"value\": 29208,\n    \"estimated\": true\n  },\n  \"byteSize\": {\n    \"value\": 108364,\n    \"estimated\": true\n  },\n  \"bbox\": {\n    \"value\": [\n      -10,\n      -10,\n      10,\n      10\n    ],\n    \"estimated\": true\n  },\n  \"geometryTypes\": {\n    \"value\": [\n      \"Point\"\n    ],\n    \"estimated\": true\n  },\n  \"properties\": {\n    \"value\": [\n      {\n        \"key\": \"Route\",\n        \"count\": 29208,\n        \"searchable\": true\n      },\n      {\n        \"key\": \"Route Type\",\n        \"count\": 29208,\n        \"searchable\": true\n      }\n    ],\n    \"estimated\": true,\n    \"searchable\": \"PARTIAL\"\n  },\n  \"tags\": {\n    \"value\": [\n      {\n        \"key\": \"PuneBusStop\",\n        \"count\": 29208\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#createreplace-features","title":"Create/Replace Features","text":"<p>To create features in a space or to replace existing ones you can use the following request.</p> <p>To keep already existing features, use this request.</p>"},{"location":"api/devguide/workwithfeatures/#warning","title":"Warning","text":"<p>Existing features will be completely erased by using this PUT request.</p>"},{"location":"api/devguide/workwithfeatures/#request_3","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PUT /spaces/{spaceId}/features\n</code></pre> <p>with the following body</p> <pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n          \"@ns:com:here:xyz\":\n          {\n            \"tags\":\n            [\n              \"football\",\n              \"stadium\"\n            ]\n          },\n          \"name\": \"Anfield\",\n          \"amenity\": \"Football Stadium\",\n          \"capacity\": 54074,\n          \"popupContent\": \"Home of Liverpool Football Club\"\n        }\n      }\n  ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_3","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"id\": \"BfiimUxHjj\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n          \"name\": \"Anfield\",\n          \"@ns:com:here:xyz\":\n          {\n             \"createdAt\": 1517504700726,\n             \"updatedAt\": 1517504700726,\n             \"space\": \"x-demospace\",\n             \"tags\":\n             [\n               \"football\",\n               \"stadium\"\n             ]\n           },\n           \"amenity\": \"Football Stadium\",\n           \"capacity\": 54074,\n           \"popupContent\": \"Home of Liverpool Football Club\"\n         }\n      }\n   ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#modify-features","title":"Modify Features","text":"<p>This is an example for modifying existing features using a POST request.</p>"},{"location":"api/devguide/workwithfeatures/#request_4","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces/{spaceId}/features\n</code></pre> <p>with the following body</p> <pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"geometry\":\n          {\n            \"type\": \"Point\",\n            \"coordinates\":\n            [\n              -2.960847,\n              53.430828\n            ]\n          },\n          \"properties\":\n          {\n            \"@ns:com:here:xyz\":\n            {\n              \"tags\":\n              [\n                \"football\",\n                \"stadium\"\n              ]\n            },\n            \"name\": \"Anfield\",\n            \"amenity\": \"Football Stadium\",\n            \"capacity\": 54074,\n            \"popupContent\": \"Home of Liverpool Football Club\"\n          }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_4","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"id\": \"BfiimUxHjj\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n          \"name\": \"Anfield\",\n          \"@ns:com:here:xyz\":\n          {\n            \"createdAt\": 1517504700726,\n            \"updatedAt\": 1517504700726,\n            \"space\": \"x-demospace\",\n            \"tags\":\n            [\n              \"football\",\n              \"stadium\"\n            ]\n          },\n          \"amenity\": \"Football Stadium\",\n          \"capacity\": 54074,\n          \"popupContent\": \"Home of Liverpool Football Club\"\n        }\n      }\n  ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#partially-update-features-in-space","title":"Partially Update Features in Space","text":"<p>This request contains only the feature properties you want to add, update or delete.</p> <ul> <li>If the property does not yet exist in the latest version of the feature it is added.</li> <li>If the property has another value of the latest version of the feature it is updated to the value in the request</li> <li>If the property value is null in the request, the property is deleted from the feature object</li> </ul>"},{"location":"api/devguide/workwithfeatures/#request_5","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PATCH /spaces/{spaceId}/features?id={featureId1},{featureId2},{featureId3}\n</code></pre> <p>A PATCH request needs something like the following body</p> <pre><code>{\n    \"type\": \"Feature\",\n    \"id\": \"string\",\n    \"geometry\":\n    {\n      \"type\": \"string\"\n    },\n    \"properties\":\n    {\n       \"@ns:com:here:xyz\":\n       {}\n    },\n    \"bbox\":\n    [\n      -100.1,\n      -1.1,\n      100.1,\n      1.1\n    ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_5","title":"Response","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\":\n  [\n    {\n      \"type\": \"Feature\",\n      \"id\": \"BfiimUxHjj\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -2.960847,\n          53.430828\n        ]\n      },\n      \"properties\": {\n        \"name\": \"Anfield\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"space\": \"x-demospace\",\n          \"tags\": [\n            \"football\",\n            \"stadium\"\n          ]\n        },\n        \"amenity\": \"Football Stadium\",\n        \"capacity\": 54074,\n        \"popupContent\": \"Home of Liverpool Football Club\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#validation-errors","title":"Validation Errors","text":"<p>If you are using the validation feature, you sometimes will get an error message when uploading or modifying features, such as the following:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  ...\n  \"features\": [],\n  \"failed\": [\n    {\n      \"id\": null,\n      \"position\": 0,\n      \"message\": \"Feature on position 0 has JSON schema validations errors/warnings.\\n[[1,151][/properties] The object must have a property whose name is \\\"city\\\"., [1,151][/properties] The object must have a property whose name is \\\"employees\\\"., [1,151][/properties] The object must have a property whose name is \\\"name\\\"., [1,151][/properties] The object must have a property whose name is \\\"country\\\".]\"\n    }\n  ]\n}\n</code></pre> <p>The failed property contains all the features that schema validation rejected. The id is the id you sent. If you did not send one, the id will be null as in the example. Position is the position (zero-based) in the uploaded feature collection. The message contains the schema validation errors with a detailed description of what does not confirm to your schema.</p>"},{"location":"api/devguide/workwithfeatures/#search-a-space-for-features","title":"Search a Space for Features","text":"<p>There are two ways of searching a space. /search is one, the other is /iterate. This does not order the results and it does not enable you to continue the search.</p>"},{"location":"api/devguide/workwithfeatures/#request_6","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/search\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_6","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"id\": \"BfiimUxHjj\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n          \"name\": \"Anfield\",\n          \"@ns:com:here:xyz\":\n          {\n            \"createdAt\": 1517504700726,\n            \"updatedAt\": 1517504700726,\n            \"space\": \"x-demospace\",\n            \"tags\":\n            [\n              \"football\",\n              \"stadium\"\n            ]\n          },\n          \"amenity\": \"Football Stadium\",\n          \"capacity\": 54074,\n          \"popupContent\": \"Home of Liverpool Football Club\"\n        }\n      }\n    ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#iterate-features-from-specific-spaces","title":"Iterate Features from Specific Spaces","text":"<p>This is the second way to search a space (the other is /search). Iterate allows you to iterate over all the matching features with the handle handle as a query parameter</p>"},{"location":"api/devguide/workwithfeatures/#request_7","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/iterate\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_7","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\": \"Feature\",\n        \"id\": \"BfiimUxHjj\",\n        \"geometry\":\n        {\n          \"type\": \"Point\",\n          \"coordinates\":\n          [\n            -2.960847,\n            53.430828\n          ]\n        },\n        \"properties\":\n        {\n          \"name\": \"Anfield\",\n          \"@ns:com:here:xyz\":\n          {\n            \"createdAt\": 1517504700726,\n            \"updatedAt\": 1517504700726,\n            \"space\": \"x-demospace\",\n            \"tags\":\n            [\n              \"football\",\n              \"stadium\"\n            ]\n           },\n           \"amenity\": \"Football Stadium\",\n           \"capacity\": 54074,\n           \"popupContent\": \"Home of Liverpool Football Club\"\n          }\n      }\n  ]\n}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#delete-multiple-features","title":"Delete Multiple Features","text":"<p>You can remove specific features by sending this request with their feature IDs</p>"},{"location":"api/devguide/workwithfeatures/#request_8","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>DELETE /spaces/{spaceId}/features?id={id1},{id2}\n</code></pre>"},{"location":"api/devguide/workwithfeatures/#response_8","title":"Response","text":"<pre><code>HTTP/1.1 204 No Content\n</code></pre>"},{"location":"api/devguide/workwithspaces/","title":"Work with Spaces","text":""},{"location":"api/devguide/workwithspaces/#create-a-space","title":"Create a Space","text":""},{"location":"api/devguide/workwithspaces/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces\n</code></pre> <p>Because it is a POST request, it has to have at least the following body.</p> <pre><code>{\n    \"title\": \"My Demo Space\",\n    \"description\": \"A description which may contain ***markdown*** syntax\"\n}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#response","title":"Response","text":"<pre><code>{\n    \"id\": \"x-demospace\",\n    \"title\": \"My Demo Space\",\n    \"description\": \"A description which may contain ***markdown*** syntax\"\n}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#read-a-specific-space","title":"Read a Specific Space","text":""},{"location":"api/devguide/workwithspaces/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": \"{spaceId}\",\n  \"title\": \"My Demo Space\",\n  \"description\": \"A description which may contain ***markdown*** syntax\"\n}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#read-all-spaces","title":"Read all Spaces","text":""},{"location":"api/devguide/workwithspaces/#request_2","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces\n</code></pre>"},{"location":"api/devguide/workwithspaces/#response_2","title":"Response","text":"<pre><code>[\n    {\n        \"id\": \"x-demospace\",\n        \"title\": \"My Demo Space\",\n        \"description\": \"A description which may contain ***markdown*** syntax\"\n    },\n    {\n        \"id\": \"x-trees\",\n        \"title\": \"A public space\",\n        \"description\": \"All the old oaks in Berlin\"\n    }\n]\n</code></pre>"},{"location":"api/devguide/workwithspaces/#update-a-space","title":"Update a Space","text":""},{"location":"api/devguide/workwithspaces/#request_3","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PATCH /spaces/{spaceId}\n</code></pre> <p>which requires a body such as the following:</p> <pre><code>{\n    \"title\": \"My Demo Space\",\n    \"description\": \"**Altered** Description\"\n}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#response_3","title":"Response","text":"<pre><code>{\n    \"title\": \"My Demo Space\",\n    \"description\": \"**Altered** Description\"\n}\n</code></pre>"},{"location":"api/devguide/workwithspaces/#delete-a-space","title":"Delete a Space","text":""},{"location":"api/devguide/workwithspaces/#request_4","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>DELETE /spaces/{spaceId}\n</code></pre> <p>A successful response to this request is the following:</p>"},{"location":"api/devguide/workwithspaces/#response_4","title":"Response","text":"<pre><code>HTTP/1.1 204 No Content\n</code></pre>"},{"location":"api/quickstart/activitylog/","title":"Use Activity Log","text":"<ol> <li> <p>Create a new space with the activity-log listener and enableUUID set to true:</p> <pre><code>POST /spaces\n</code></pre> <p>Try in your local Swagger</p> <pre><code>{\n  \"title\": \"Activity-Log Test\",\n  \"enableUUID\": true,\n  \"listeners\": [\n    {\n      \"id\": \"activity-log\",\n      \"eventTypes\": [\n        \"ModifySpaceEvent.request\",\n        \"...\"\n      ]\n    }\n  ]\n}\n</code></pre> </li> <li> <p>Check spaces. You will find one, as well as a new one, that has a title like: Activity log for space \\&lt;newSpaceId&gt;</p> <pre><code>GET /spaces\n</code></pre> <p>Try in your local Swagger</p> <pre><code>[\n  {\n    \"id\": \"&lt;newSpaceId&gt;\",\n    \"title\": \"Activity-Log-Test\",\n    \"description\": null,\n    \"enableUUID\": true,\n    \"createdAt\": 1575271893917,\n    \"updatedAt\": 1575271897152\n  },\n  {\n    \"id\": \"&lt;activityLogSpaceId&gt;\",\n    \"title\": \"activity-log for space &lt;newSpaceId&gt;\",\n    \"description\": \"This is an automatically created space for the history of space __&lt;newSpaceId&gt;__.  \\nCreated on 2019-12-02 at 07:31  \\n***\\nModified features will be stored in this space by their original _uuid_.  \\nThe original namespace properties of XYZ Maps will be stored within the value 'original' of the namespace '@ns:com:here:xyz:log'.  \\nIMPORTANT Deleting this space while activity-log is enabled, causes the absence of history.  \\n***\",\n    \"createdAt\": 1575271894028,\n    \"updatedAt\": 1575271894028,\n    \"searchableProperties\": {\n      \"@ns:com:here:xyz:log.id\": true,\n      \"@ns:com:here:xyz:log.invalidatedAt\": true,\n      \"@ns:com:here:xyz:log.original.updatedAt\": true\n    }\n  }\n]\n</code></pre> </li> <li> <p>Post something into your newly created space:</p> <pre><code>PUT /spaces/&lt;newSpaceId&gt;/features\n</code></pre> <p>Try in your local Swagger</p> <pre><code>{\n \"type\":\"FeatureCollection\",\n \"features\":[\n   {\n     \"id\": \"newFeatureId\",\n     \"type\": \"Feature\",\n     \"geometry\": {\n       \"type\": \"Point\",\n       \"coordinates\": [1,0]\n     }\n   }\n ]\n}\n</code></pre> </li> <li> <p>Check your activity log space:</p> <pre><code>GET /spaces/&lt;activityLogSpaceId&gt;/iterate\n</code></pre> <p>Try in your local Swagger</p> <p>This results in something similar to:</p> <pre><code>{\n \"type\": \"FeatureCollection\",\n \"features\": [\n   {\n     \"id\": \"&lt;uuidOfFeature&gt;\",\n     \"type\": \"Feature\",\n     \"properties\": {\n       \"@ns:com:here:xyz\": {\n         \"tags\": [],\n         \"space\": \"&lt;activityLogSpaceId&gt;\",\n         \"createdAt\": 1575275435631,\n         \"updatedAt\": 1575275435631\n       },\n       \"@ns:com:here:xyz:log\": {\n         \"id\": \"newFeatureId\",\n         \"action\": \"SAVE\",\n         \"original\": {\n           \"space\": \"&lt;newSpaceId&gt;\",\n           \"createdAt\": 1575275435508,\n           \"updatedAt\": 1575275435508\n         },\n         \"invalidatedAt\": 9223372036854776000\n       }\n     },\n     \"geometry\": {\n       \"type\": \"Point\",\n       \"coordinates\": [\n         1,\n         0\n       ]\n     }\n   }\n ]\n}\n</code></pre> </li> </ol>"},{"location":"api/quickstart/activitylog/#note","title":"Note","text":"<p>Your account needs access to the XYZ Maps Add-on Services.</p>"},{"location":"api/quickstart/activitylog/#search-for-specific-feature","title":"Search for specific feature","text":"<p>You can search the Activity Log for a specific feature using its original id. The id of a feature is a String, so ensure that it is quoted for the property search. This request returns an unsorted list of all revisions of the object.</p> <pre><code>GET /spaces/&lt;activityLogSpaceId&gt;/search?p.@ns:com:here:xyz:log.id=\"newFeatureId\"\n</code></pre> <p>Try in your local Swagger</p> <p>Response</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"id\": \"&lt;uuidOfFeature&gt;\",\n  \"properties\": {\n    \"@ns:com:here:xyz\": {\n      \"tags\": [],\n      \"space\": \"&lt;activityLogSpaceId&gt;\",\n      \"createdAt\": 1575275435631,\n      \"updatedAt\": 1575275435631\n    },\n    \"@ns:com:here:xyz:log\": {\n      \"id\": \"newFeatureId\",\n      \"action\": \"SAVE\",\n      \"original\": {\n        \"space\": \"&lt;newSpaceId&gt;\",\n        \"createdAt\": 1575275435508,\n        \"updatedAt\": 1575275435508\n      },\n      \"invalidatedAt\": 9223372036854776000\n    }\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [\n      1,\n      0\n    ]\n  }\n}\n</code></pre>"},{"location":"api/quickstart/activitylog/#look-up-a-specific-revision-of-a-feature","title":"Look up a specific revision of a feature","text":"<p>You can search for a specific revision of a feature using the uuid of the feature:</p> <pre><code>GET /spaces/&lt;activityLogSpaceId&gt;/features/&lt;uuidOfFeature&gt;\n</code></pre> <p>Try in your local Swagger</p> <p>Response:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"id\": \"&lt;uuidOfFeature&gt;\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"bbox\": null,\n    \"coordinates\": [\n      1,\n      0\n    ]\n  },\n  \"properties\": {\n    \"@ns:com:here:xyz\": {\n      \"space\": \"&lt;activityLogSpaceId&gt;\",\n      \"createdAt\": 1575275435631,\n      \"updatedAt\": 1575275435631,\n      \"uuid\": null,\n      \"puuid\": null,\n      \"muuid\": null,\n      \"tags\": [],\n      \"_inputPosition\": null\n    },\n    \"@ns:com:here:xyz:log\": {\n      \"id\": \"newFeatureId\",\n      \"action\": \"SAVE\",\n      \"original\": {\n        \"space\": \"&lt;newSpaceId&gt;\",\n        \"createdAt\": 1575275435508,\n        \"updatedAt\": 1575275435508\n      },\n      \"invalidatedAt\": 9223372036854776000\n    }\n  }\n}\n</code></pre>"},{"location":"api/quickstart/activitylog/#activity-log-for-a-certain-point-in-time","title":"Activity Log for a certain point in time","text":"<p>You can search for a specific point in time by looking at the createdAt and invalidatedAt timestamps:</p> <pre><code>GET /spaces/&lt;activityLogSpaceId&gt;/search?p.@ns:com:here:xyz:log.original.updatedAt=lte=1575275435508&amp;p.@ns:com:here:xyz:log.invalidatedAt=gt=1575275435508\n</code></pre> <p>Try in your local Swagger</p> <p>Response body:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"&lt;uuidOfFeature&gt;\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"@ns:com:here:xyz\": {\n          \"tags\": [],\n          \"space\": \"&lt;activityLogSpaceId&gt;\",\n          \"createdAt\": 1575275435631,\n          \"updatedAt\": 1575275435631\n        },\n        \"@ns:com:here:xyz:log\": {\n          \"id\": \"newFeatureId\",\n          \"action\": \"SAVE\",\n          \"original\": {\n            \"space\": \"&lt;newSpaceId&gt;\",\n            \"createdAt\": 1575275435508,\n            \"updatedAt\": 1575275435508\n          },\n          \"invalidatedAt\": 9223372036854776000\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          1,\n          0\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>For further information head over to the developer guide on Activity-Log.</p>"},{"location":"api/quickstart/createspace/","title":"Create a Space","text":"<p>See the following request and response for creating a new space:</p>"},{"location":"api/quickstart/createspace/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces\n</code></pre> <p>with the following body:</p> <pre><code>{\n    \"title\": \"My Demo Space\",\n    \"description\": \"My Demo *Space* description\"\n}\n</code></pre>"},{"location":"api/quickstart/createspace/#info","title":"Info","text":"<p>The Description can contain formatting in markdown format.</p>"},{"location":"api/quickstart/createspace/#response","title":"Response","text":"<pre><code>{\n    \"id\": \"{spaceId}\",\n    \"title\": \"My Demo Space\",\n    \"description\": \"** My Demo *Space* description\"\n}\n</code></pre>"},{"location":"api/quickstart/createspace/#info_1","title":"Info","text":"<p>The ID is a unique, randomly generated identifier and is mandatory as an argument in subsequent requests.</p>"},{"location":"api/quickstart/quickstart/","title":"Quick Start","text":""},{"location":"api/quickstart/readspaces/","title":"Read Spaces","text":"<p>Once you have acquired your credentials, you can determine the spaces to which you have access.</p>"},{"location":"api/quickstart/readspaces/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces\n</code></pre>"},{"location":"api/quickstart/readspaces/#response","title":"Response","text":"<pre><code>[\n    {\n        \"id\": \"x-demospace\",\n        \"title\": \"My Demo Space\",\n        \"description\": \"Description as markdown\"\n    }\n]\n</code></pre>"},{"location":"api/quickstart/writetospace/","title":"Write to a Space","text":"<p>Having created a new space, you can write to it. The following example adds a collection of features.</p>"},{"location":"api/quickstart/writetospace/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces/{spaceId}/features\n</code></pre> <p>The POST request requires a body like the following example:</p> <pre><code>{\n    \"type\":\"FeatureCollection\",\n    \"features\":\n    [\n      {\n        \"type\":\"Feature\",\n        \"properties\":\n        {\n          \"name\":\"Baldy Mountain\"\n        },\n        \"geometry\":\n        {\n          \"type\":\"Point\",\n          \"coordinates\":[-100.728, 51.4686]\n        }\n      }\n  ]\n}\n</code></pre>"},{"location":"api/quickstart/writetospace/#response","title":"Response","text":"<p>The response is a FeatureCollection, containing all created features.</p> <pre><code>{\n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -100.728,\n          51.4686\n        ]\n      },\n      \"id\": \"HsOsZ0FXUI\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Baldy Mountain\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1529855978032,\n          \"space\": \"{spaceId}\",\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"updatedAt\": 1529855978032\n        }\n      },\n      \"bbox\": [\n        -100.728,\n        51.4686,\n        -100.728,\n        51.4686\n      ]\n    }\n  ],\n  \"type\": \"FeatureCollection\"\n}\n</code></pre> <p>When you upload a feature to XYZ Maps, XYZ automatically adds the property, @ns:com:here:xyz to it. The following information is recorded in this property:</p> <ul> <li>createdAt - date and time the feature was created in milliseconds since 01.01.1970</li> <li>updatedAt - date and time the feature was updated in milliseconds since 01.01.1970</li> <li>space - random unique space ID, created at space creation, a string</li> <li>tags - the tags you added to the space, an array of strings</li> </ul> <p>Use the namespace to store the additional information in the object without interfering with the properties you provided.</p>"},{"location":"api/walkthrough/addinganddeleting/","title":"Add and Delete Features","text":""},{"location":"api/walkthrough/addinganddeleting/#note","title":"Note","text":"<p>The endpoint for the API is https://localhost:8080/hub.</p>"},{"location":"api/walkthrough/addinganddeleting/#add-data","title":"Add data","text":"<p>There are basically two ways of adding features to your space. And their only difference is the way the existing data in your space is handled: Use POST and any pre-existing data is retained; use PUT and the only data that is left in your space is the one you just uploaded with the PUT request.</p> <p>There is a convenience request for modifying features, but that is a subject for another example.</p>"},{"location":"api/walkthrough/addinganddeleting/#note_1","title":"Note","text":"<p>Think about what tags to use before uploading and add them via the addTags query parameter. There is no method to add tags to all features without specifying IDs, yet.</p>"},{"location":"api/walkthrough/addinganddeleting/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces/{spaceId}/features\n</code></pre> <p>with the corresponding body:</p>"},{"location":"api/walkthrough/addinganddeleting/#request-body","title":"Request body","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"featureclass\": \"River\"\n      },\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            ...\n          ], ... [\n              ...\n          ]\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/walkthrough/addinganddeleting/#response","title":"Response","text":"<pre><code>{\n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"LineString\",\n       \"coordinates\": [\n          [\n            ...\n          ], ... [\n              ...\n          ]\n       ]\n      },\n      \"id\": \"NTvvEciZlE\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"featureclass\": \"River\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1528461230706,\n          \"space\": \"{spaceId}\",\n          \"tags\": [\n            \"river\"\n          ],\n          \"updatedAt\": 1528461230706\n        }\n      },\n      \"bbox\": [\n        44.41260826914623,\n        31.5295270854107,\n        45.66944420664623,\n        32.563421942181535\n      ]\n    }\n  ],\n  \"type\": \"FeatureCollection\"\n}\n</code></pre>"},{"location":"api/walkthrough/addinganddeleting/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <p>You can achieve the same with the following PUT request:</p> <pre><code>PUT /spaces/{spaceId}/features\n</code></pre> <p>with the same body:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"featureclass\": \"River\"\n      },\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            ...\n          ], ... [\n              ...\n          ]\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>and you will get the same response:</p>"},{"location":"api/walkthrough/addinganddeleting/#response_1","title":"Response","text":"<pre><code>{\n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"LineString\",\n       \"coordinates\": [\n          [\n            ...\n          ], ... [\n              ...\n          ]\n       ]\n      },\n      \"id\": \"NTvvEciZlE\",\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"featureclass\": \"River\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1528461230706,\n          \"space\": \"{spaceId}\",\n          \"tags\": [\n            \"river\"\n          ],\n          \"updatedAt\": 1528461230706\n        }\n      },\n      \"bbox\": [\n        44.41260826914623,\n        31.5295270854107,\n        45.66944420664623,\n        32.563421942181535\n      ]\n    }\n  ],\n  \"type\": \"FeatureCollection\"\n}\n</code></pre> <p>So, it is just a matter of taste and keeping the previous uploaded features.</p>"},{"location":"api/walkthrough/addinganddeleting/#validation-errors","title":"Validation Errors","text":"<p>If you are using the validation feature, you sometimes will get an error message when adding or modifying features, such as this one:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  ...\n  \"features\": [],\n  \"failed\": [\n    {\n      \"id\": null,\n      \"position\": 0,\n      \"message\": \"Feature on position 0 has JSON schema validations errors/warnings.\\n[[1,151][/properties] The object must have a property whose name is \\\"city\\\"., [1,151][/properties] The object must have a property whose name is \\\"employees\\\"., [1,151][/properties] The object must have a property whose name is \\\"name\\\"., [1,151][/properties] The object must have a property whose name is \\\"country\\\".]\"\n    }\n  ]\n}\n</code></pre> <p>The failed property contains all the features that schema validation rejected. The id is the id you sent. If you did not send one, the id will be null as in the example. Position is the position (zero-based) in the uploaded feature collection. The message contains the schema validation errors with a detailed description of what does not confirm to your schema.</p>"},{"location":"api/walkthrough/addinganddeleting/#delete-features","title":"Delete Features","text":"<p>Of course, you can also delete any of the features you added previously. This is the request for it:</p>"},{"location":"api/walkthrough/addinganddeleting/#request_2","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>DELETE /spaces/{spaceId}/features/id={featureId1},{featureId2}\n</code></pre>"},{"location":"api/walkthrough/addinganddeleting/#response_2","title":"Response","text":"<pre><code>HTTP/1.1 204 No Content\n</code></pre> <p>If you want to delete any features tagged the same, you can also do this like so:</p>"},{"location":"api/walkthrough/addinganddeleting/#request_3","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>DELETE /spaces/{spaceId}/features?tags=oldFeatures\n</code></pre> <p>The response here should be the same as it was with the delete by ID.</p> <p>You can even delete all of your features by using the following request:</p>"},{"location":"api/walkthrough/addinganddeleting/#request_4","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>DELETE /spaces/{spaceId}/features?tags=*\n</code></pre>"},{"location":"api/walkthrough/creatingaspace/","title":"Create a Space","text":""},{"location":"api/walkthrough/creatingaspace/#note","title":"Note","text":"<p>The endpoint for the API is https://localhost:8080/hub.</p>"},{"location":"api/walkthrough/creatingaspace/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces\n</code></pre> <pre><code>{\n\n    \"title\": \"My Demo Space\",\n    \"description\": \"Description as markdown\"\n\n}\n</code></pre>"},{"location":"api/walkthrough/creatingaspace/#response","title":"Response","text":"<pre><code>{\n    \"id\": \"x-demospace\",\n    \"owner\":\"{appId}\",\n    \"title\": \"My Demo Space\",\n    \"description\": \"Description as markdown\"\n}\n</code></pre>"},{"location":"api/walkthrough/iterateoverfeatures/","title":"Iterate over Features","text":"<p>Iterating over features is different from search in two ways:</p> <ol> <li>The results are ordered, no features are returned twice.</li> <li>Searches can be continued over several requests.</li> </ol> <p>Sometimes your search will have a lot of features as a result. But the limit you explicitly set or the default limit will only return some of them. In this case, a root attribute handle is set in the response. The search can then be continued with the next feature in line by adding the value of the handle response attribute as a handle query parameter to the request.</p>"},{"location":"api/walkthrough/iterateoverfeatures/#note","title":"Note","text":"<p>The endpoint for the API is https://localhost:8080/hub.</p>"},{"location":"api/walkthrough/iterateoverfeatures/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/iterate?tags=&amp;limit=2&amp;handle=2\n</code></pre>"},{"location":"api/walkthrough/iterateoverfeatures/#response","title":"Response","text":"<pre><code>{\n  \"handle\": \"4\",\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [\n        -123.291,\n        50.1203,\n        -123.291,\n        50.1203\n      ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Mount Cayley\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": 1529855978027,\n          \"updatedAt\": 1529855978027\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -123.291,\n          50.1203\n        ]\n      }\n    },\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [\n        -124.162,\n        48.9511,\n        -124.162,\n        48.9511\n      ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Mount Whymper\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": 1529855978028,\n          \"updatedAt\": 1529855978028\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -124.162,\n          48.9511\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/","title":"Use Schema Validation","text":"<p>To use Schema Validation, you need to put additional data into the space definition. Add a processor with the ID schema-validator and put either a URL to a valid JSON schema or the complete schema as JSON string into the param schema:</p> <pre><code>{\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Description as markdown\",\n    \"processors\": [\n        {\n            \"id\": \"schema-validator\",\n            \"params\": {\n                \"schema\": \"&lt;URL to schema or schema as JSON schema&gt;\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#note","title":"Note","text":"<p>Your account needs access to the XYZ Maps Add-on Services.</p>"},{"location":"api/walkthrough/schemavalidation/#note_1","title":"Note","text":"<p>If you use an URL, ensure that the URL is public accessible.</p>"},{"location":"api/walkthrough/schemavalidation/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>POST /spaces\n</code></pre> <pre><code>{\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": [\n        {\n            \"id\": \"schema-validator\",\n            \"params\": {\n                \"schema\": \"{\\\"definitions\\\":{},\\\"$schema\\\":\\\"http://json-schema.org/draft-07/schema#\\\",\\\"$id\\\":\\\"http://example.com/root.json\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"TheRootSchema\\\",\\\"required\\\":[\\\"geometry\\\",\\\"type\\\",\\\"properties\\\"],\\\"properties\\\":{\\\"geometry\\\":{\\\"$id\\\":\\\"#/properties/geometry\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"TheGeometrySchema\\\",\\\"required\\\":[\\\"type\\\",\\\"coordinates\\\"],\\\"properties\\\":{\\\"type\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/type\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheTypeSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Point\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"coordinates\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/coordinates\\\",\\\"type\\\":\\\"array\\\",\\\"title\\\":\\\"TheCoordinatesSchema\\\",\\\"items\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/coordinates/items\\\",\\\"type\\\":\\\"number\\\",\\\"title\\\":\\\"TheItemsSchema\\\",\\\"default\\\":0.0,\\\"examples\\\":[14.3222,-2.32506]}}}},\\\"type\\\":{\\\"$id\\\":\\\"#/properties/type\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheTypeSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Feature\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"properties\\\":{\\\"$id\\\":\\\"#/properties/properties\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"ThePropertiesSchema\\\",\\\"required\\\":[\\\"name\\\",\\\"@ns:com:here:xyz\\\"],\\\"properties\\\":{\\\"name\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/name\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheNameSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Toyota\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"@ns:com:here:xyz\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"The@ns:com:here:xyzSchema\\\",\\\"required\\\":[\\\"tags\\\"],\\\"properties\\\":{\\\"tags\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz/properties/tags\\\",\\\"type\\\":\\\"array\\\",\\\"title\\\":\\\"TheTagsSchema\\\",\\\"items\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz/properties/tags/items\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheItemsSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"yellow\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"}}}}}}}}\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#warning","title":"Warning","text":"<p>The $id properties of the schema must not include whitespace characters.</p>"},{"location":"api/walkthrough/schemavalidation/#response","title":"Response","text":"<pre><code>{\n    \"id\": \"x-demospace\",\n    \"owner\":\"{appId}\",\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": [\n        {\n            \"id\": \"schema-validator\",\n            \"params\": {\n                 \"schemaUrl\": \"&lt;Location of schema in the XYZ Maps managed S3 bucket&gt;\"\n             }\n        }\n    ]\n    //,...\n}\n</code></pre> <p>Note that the field schema has been replaced with a field schemaUrl that points to a private copy in the XYZ Maps S3 bucket.</p>"},{"location":"api/walkthrough/schemavalidation/#validating-your-data","title":"Validating your data","text":"<p>POST/PUT your data as you would without Schema Validation. If the features are valid they will be stored. All failing objects will NOT be stored and position, ID (if set by the developer) and error messages will be returned. Note that the position is zero based, so 0 is the first object, 1 the second and so on.</p>"},{"location":"api/walkthrough/schemavalidation/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PUT /spaces/{spaceId}/features\n</code></pre> <p>with the corresponding body:</p>"},{"location":"api/walkthrough/schemavalidation/#request-body","title":"Request body","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    14.3222,\n                    -2.32506\n                ]\n            },\n            \"type\": \"Feature\",\n            // typo in properties\n            \"propertiess\": {\n                \"name\": \"Toyota\"\n            }\n        },\n        {\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    15.8319,\n                    -2.5913\n                ]\n            },\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"name\": \"Audi\"\n            }\n        },\n        {\n            // Object is missing geometry\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"name\": \"Tesla\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#response_1","title":"Response","text":"<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"inserted\": [\n        \"dxAH19uIUDCU7kch\"\n    ],\n    \"etag\": \"016524948bfc1213\",\n    \"streamId\": \"5fb211eb-973f-11e9-9406-258558785f8d\",\n    \"failed\": [\n        {\n            \"id\": null,\n            \"position\": 0,\n            \"message\": \"Feature on position 0 has JSON schema validations errors/warnings.\\n[[1,184][/properties] The object must have a property whose name is \\\"name\\\".]\"\n        },\n        {\n            \"id\": null,\n            \"position\": 2,\n            \"message\": \"Feature on position 2 has JSON schema validations errors/warnings.\\n[[1,107][] The object must have a property whose name is \\\"geometry\\\".]\"\n        }\n    ],\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"name\": \"Audi\",\n                \"@ns:com:here:xyz\": {\n                    \"space\": \"X0Bphg0Q\",\n                    \"tags\": [],\n                    \"createdAt\": 1561463405914,\n                    \"updatedAt\": 1561463405914\n                }\n            },\n            \"bbox\": [\n                15.8319,\n                -2.5913,\n                15.8319,\n                -2.5913\n            ],\n            \"id\": \"dxAH19uIUDCU7kch\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    15.8319,\n                    -2.5913\n                ]\n            }\n        }\n    ]\n}\n</code></pre> <p>As only the Audi feature was valid, it is the only one stored. The other two features failed because the first (position 0) has a typo in properties and so it missing the properties.name field. The last feature (position 2) is missing a geometry field.</p>"},{"location":"api/walkthrough/schemavalidation/#upload-a-new-schema","title":"Upload a new schema","text":"<p>To use a different JSON schema you need to update the space definition with the new schema JSON string or URL.</p>"},{"location":"api/walkthrough/schemavalidation/#request_2","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PATCH /spaces/{spaceId}\n</code></pre> <pre><code>{\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": [\n        {\n            \"id\": \"schema-validator\",\n            \"params\": {\n                \"schema\": \"{\\\"definitions\\\":{},\\\"$schema\\\":\\\"http://json-schema.org/draft-07/schema#\\\",\\\"$id\\\":\\\"http://example.com/root.json\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"TheRootSchema\\\",\\\"required\\\":[\\\"geometry\\\",\\\"type\\\",\\\"properties\\\"],\\\"properties\\\":{\\\"geometry\\\":{\\\"$id\\\":\\\"#/properties/geometry\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"TheGeometrySchema\\\",\\\"required\\\":[\\\"type\\\",\\\"coordinates\\\"],\\\"properties\\\":{\\\"type\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/type\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheTypeSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Point\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"coordinates\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/coordinates\\\",\\\"type\\\":\\\"array\\\",\\\"title\\\":\\\"TheCoordinatesSchema\\\",\\\"items\\\":{\\\"$id\\\":\\\"#/properties/geometry/properties/coordinates/items\\\",\\\"type\\\":\\\"number\\\",\\\"title\\\":\\\"TheItemsSchema\\\",\\\"default\\\":0.0,\\\"examples\\\":[14.3222,-2.32506]}}}},\\\"type\\\":{\\\"$id\\\":\\\"#/properties/type\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheTypeSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Feature\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"properties\\\":{\\\"$id\\\":\\\"#/properties/properties\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"ThePropertiesSchema\\\",\\\"required\\\":[\\\"name\\\",\\\"@ns:com:here:xyz\\\"],\\\"properties\\\":{\\\"name\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/name\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheNameSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"Toyota\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"},\\\"@ns:com:here:xyz\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz\\\",\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"The@ns:com:here:xyzSchema\\\",\\\"required\\\":[\\\"tags\\\"],\\\"properties\\\":{\\\"tags\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz/properties/tags\\\",\\\"type\\\":\\\"array\\\",\\\"title\\\":\\\"TheTagsSchema\\\",\\\"items\\\":{\\\"$id\\\":\\\"#/properties/properties/properties/@ns:com:here:xyz/properties/tags/items\\\",\\\"type\\\":\\\"string\\\",\\\"title\\\":\\\"TheItemsSchema\\\",\\\"default\\\":\\\"\\\",\\\"examples\\\":[\\\"yellow\\\"],\\\"pattern\\\":\\\"^(.*)$\\\"}}}}}}}}\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#response_2","title":"Response","text":"<pre><code>{\n    \"id\": \"x-demospace\",\n    \"owner\":\"{appId}\",\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": [\n        {\n            \"id\": \"schema-validator\",\n            \"params\": {\n                 \"schemaUrl\": \"&lt;Location of updated schema in the XYZ Maps managed S3 bucket&gt;\"\n             }\n        }\n\n    ]\n    //,...\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#disabling-schema-validation","title":"Disabling Schema Validation","text":"<p>To disable the Schema Validation just update the space definition but not send the schema-validator processor definition. Note that you have to include all other processor definitions if there are multiple; otherwise you will disable all processors.</p>"},{"location":"api/walkthrough/schemavalidation/#request_3","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>PATCH /spaces/{spaceId}\n</code></pre> <pre><code>{\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": []\n}\n</code></pre>"},{"location":"api/walkthrough/schemavalidation/#response_3","title":"Response","text":"<pre><code>{\n    \"id\": \"x-demospace\",\n    \"owner\":\"{appId}\",\n    \"title\": \"My Space with JSON Schema Validation\",\n    \"description\": \"Make sure that all features contain a field 'geometry' and a property 'name'.\",\n    \"processors\": [],\n    //,...\n}\n</code></pre>"},{"location":"api/walkthrough/searchbyboundingbox/","title":"Search by Bounding Box","text":"<p>Searching by bounding box is searching a rectangle area of the map for features.</p>"},{"location":"api/walkthrough/searchbyboundingbox/#note","title":"Note","text":"<p>The endpoint for the API is https://localhost:8080/hub.</p>"},{"location":"api/walkthrough/searchbyboundingbox/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/bbox?west=-110&amp;north=53&amp;east=-130&amp;south=50&amp;tags=\n</code></pre>"},{"location":"api/walkthrough/searchbyboundingbox/#response","title":"Response","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [\n        -116.055555555,\n        51.170833333,\n        -116.055555555,\n        51.170833333\n      ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Stanley Peak\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": 1529855977981,\n          \"updatedAt\": 1529855977981\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -116.055555555,\n          51.170833333\n        ]\n      }\n    },\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [\n        -123.291,\n        50.1203,\n        -123.291,\n        50.1203\n      ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Mount Cayley\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"canada\",\n            \"mountain\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": 1529855978027,\n          \"updatedAt\": 1529855978027\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -123.291,\n          50.1203\n        ]\n      }\n    }\n  ]\n }\n</code></pre>"},{"location":"api/walkthrough/searchbytags/","title":"Search by Tags","text":"<p>Do you have Tags assigned to your features? Then you can search your features by them, as follows:</p>"},{"location":"api/walkthrough/searchbytags/#note","title":"Note","text":"<p>The endpoint for the API is https://localhost:8080/hub.</p>"},{"location":"api/walkthrough/searchbytags/#simple-search","title":"Simple Search","text":""},{"location":"api/walkthrough/searchbytags/#request","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/search?tags=mountain\n</code></pre>"},{"location":"api/walkthrough/searchbytags/#response","title":"Response","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [\n        -125.8948,\n        52.2131,\n        -125.8948,\n        52.2131\n      ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Glacier Mountain\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"mountain\",\n            \"canada\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": 1529927311578,\n          \"updatedAt\": 1529927778325\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -125.8948,\n          52.2131\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/walkthrough/searchbytags/#advanced-search","title":"Advanced Search","text":"<p>This was just the simplest version of a search by tags.  Imagine having all the restaurants of your city or your region in your space. Of course you have tagged them diligently by food category, food type and cuisine. A user of your application could be interested in eating Indian food tonight if it was vegan. He would settle for vegetarian if there were only non-vegan Indian restaurants. <code>+</code> is the <code>AND</code> operator, and <code>,</code> is <code>OR</code>. The search request for the XYZ Maps could look something like that:</p>"},{"location":"api/walkthrough/searchbytags/#request_1","title":"Request","text":"<p>Try in your local Swagger</p> <pre><code>GET /spaces/{spaceId}/search?tags=vegan+indian,vegetarian\n</code></pre>"},{"location":"api/walkthrough/searchbytags/#response_1","title":"Response","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": [ ...  ],\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"...\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"vegetarian\",\n            \"mexican\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": ...,\n          \"updatedAt\": ...\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ ... ]\n      }\n    },\n    {\n      \"id\": \"{featureId}\",\n      \"bbox\": { ... },\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"...\",\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"vegan\",\n            \"indian\"\n          ],\n          \"space\": \"{spaceId}\",\n          \"createdAt\": ...,\n          \"updatedAt\": ...\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ ... ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/walkthrough/walkthrough/","title":"Walkthrough","text":""},{"location":"cli/","title":"XYZ Maps CLI","text":"<p>We think developers deserve an easy to use, convenient and streamlined experience to work with XYZ Maps APIs. That\u2019s why we\u2019ve built the XYZ Maps CLI. XYZ Maps CLI is a Node.js command line interface which works not only with XYZ Maps, but eventually, with any XYZ API. Right now, it allows you to interact with XYZ Maps to create and manage your projects and easily upload and manage your datasets.</p> <p>In this section, we'll quickly introduce you to the XYZ Maps CLI, how to install it and how to make the most of it while working on your project. </p>"},{"location":"cli/#xyz-maps-cli-on-github","title":"XYZ Maps CLI on GitHub","text":"<p>XYZ Maps CLI is Open Source, where developers like yourself can contribute new functionality and features.</p>"},{"location":"cli/#introduction","title":"Introduction","text":"<p>As mentioned before, the XYZ Maps CLI was built to make your life as a developer working with XYZ APIs easier. It allows you to quickly try out new APIs to see how they behave before you get on to your keyboard to actually develop an application. It can also be used to easily script common, repetitive tasks or help in testing application logic or data.</p>"},{"location":"cli/#quick-start","title":"Quick Start","text":"<p>XYZ Maps CLI is built on Node.js, a cross-platform efficient language to write even complex, local applications.</p>"},{"location":"cli/#install-nodejs-and-npm","title":"Install Node.js and npm","text":"<p>To use the new XYZ Maps CLI, you should have npm installed. The best way is to go to nodejs.org and install the appropriate package for your system (both 8.x LTS and 10.x Current should work).</p>"},{"location":"cli/#windows","title":"Windows","text":"<p>Download the package and install it normally.</p> <p>Alternatively, if you use a package manager like Chocolatey you just need an administrative cmd.exe/powershell.exe and run</p> <pre><code>choco install -y nodejs\n</code></pre>"},{"location":"cli/#macos","title":"macOS","text":"<p>Similarly on macOS you can just download and install the <code>.pkg</code> package file.</p> <p>You can also use your favorite package manager, like homebrew:</p> <pre><code>brew install node\n</code></pre>"},{"location":"cli/#linux-ubuntu-fedora-gentoo-etc","title":"Linux (Ubuntu, Fedora, Gentoo etc)","text":"<p>Follow the instructions at the Node.js Package Manager site, find your dist and install the packages.</p> <p>For Linux it's best to use NVM :</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\nnvm install --lts\n</code></pre> <p>To be on the safe side you might want to install the optional <code>build-essentials</code> package as you might come across native packages eventually and it's good to have the right tools around.</p>"},{"location":"cli/#check-that-it-works","title":"Check that it works","text":"<p>After installing, check in the command-line if <code>npm</code> is available. Depending on how you installed it you might need to close and reopen your terminal or command-line prompt.</p> <pre><code>$ npm -v\n9.x.x\n</code></pre>"},{"location":"cli/#install-xyz-maps-cli","title":"Install XYZ Maps CLI","text":"<p>When you are sure your system has <code>node</code> and <code>npm</code> installed you can go ahead and install the latest version of XYZ Maps CLI with following command:</p> <pre><code>npm install -g xyzmaps-cli\n</code></pre>"},{"location":"cli/#note-administrative-permissions","title":"Note: Administrative permissions","text":"<p>Depending on your system, you might need elevated system permissions to install globally with <code>-g</code>,     which essentially means you can call the <code>here</code> command from anywhere.</p> <p>To elevate you permissions, either start an Admin Command Prompt or Admin PowerShell on Windows,     or use <code>sudo</code> on Linux or macOS.</p>"},{"location":"cli/SUMMARY/","title":"SUMMARY","text":"<ul> <li>XYZ Maps CLI</li> <li>Overview</li> <li>Basic features</li> <li>Add-on features</li> <li>Tutorials<ul> <li>Shapefiles</li> <li>Hexbins</li> <li>Group by in CSV</li> </ul> </li> <li>Commands</li> <li>Space Invader</li> <li>Tools</li> <li>GeoJSON Viewer</li> <li>Overview</li> <li>GeoJSON Basics</li> <li>Advanced Features</li> <li>Open Datasets</li> <li>XYZ Maps Add-on</li> </ul>"},{"location":"cli/add-on/","title":"Add-on features","text":""},{"location":"cli/add-on/#schema-validation-for-geojson-data","title":"Schema Validation for GeoJSON data","text":"<p>A JSON schema definition file can be configured for a space. Users can set the schema definition in the form of a URL or a local file. Features that do not match this schema will not be uploaded.</p>"},{"location":"cli/add-on/#note","title":"Note","text":"<p>Schema definition configurations and modifications will be applied to future data uploads, and not to existing data in a space.</p>"},{"location":"cli/add-on/#configuring-schema-for-a-space","title":"Configuring schema for a space","text":"<p>You can configure the JSON schema definition for an existing space using the 'config' command.</p>"},{"location":"cli/add-on/#note_1","title":"Note","text":"<p>XYZ Maps Schema Validation expects a GeoJSON feature schema to validate against the uploaded data.</p>"},{"location":"cli/add-on/#addupdate-schema","title":"Add/Update schema","text":"<p>To set a new schema definition or update an existing schema definition for a space using a local file or a URL:</p> <pre><code>xyzmaps space config YOUR_SPACE_ID --add --schema [LOCAL_FILE_PATH | SCHEMA_HTTP_URL]\n</code></pre> <p>You can add a schema definition to a space while creating it as well:</p> <pre><code>xyzmaps space create -t &lt;SPACE_TITLE&gt; -d &lt;SPACE_DESCRIPTION&gt; --schema [LOCAL_FILE_PATH | SCHEMA_HTTP_URL]\n</code></pre>"},{"location":"cli/add-on/#view-schema","title":"View schema","text":"<p>To view the schema definition configured on a space:</p> <pre><code>xyzmaps space config YOUR_SPACE_ID --schema --view\n</code></pre> <p>Sample output:</p> <pre><code>{\n   \"definitions\": {},\n   \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n   \"$id\": \"http://example.com/root.json\",\n   \"type\": \"object\",\n   \"title\": \"The Root Schema\",\n   \"required\": [\n      \"geometry\",\n      \"type\",\n      \"properties\"\n   ]...\n}\n</code></pre>"},{"location":"cli/add-on/#delete-schema","title":"Delete schema","text":"<p>To delete a schema definition for a space:</p> <pre><code>xyzmaps space config YOUR_SPACE_ID --schema --delete\n</code></pre>"},{"location":"cli/add-on/#rule-based-tags","title":"Rule Based Tags","text":"<p>Rule Based Tags let you create tags on features using conditional rules applied against feature properties as you upload data to a space.</p> <p>Tag rules can be set up for string, boolean or numeric properties. Multiple conditions can also be defined. The name of the rule you create is set as the name of the tag in the features that match those conditions.</p> <p>Look at the following example feature and corresponding sample tag rule conditions:</p> <pre><code>{\n  \"geometry\": {\n    \"coordinates\": [\n      52.3828125,\n      29.5352295\n    ],\n    \"type\": \"Point\"\n  },\n  \"id\": \"987654321\",\n  \"properties\": {\n    \"averageInvoice\": 25,\n    \"details\": {\n        \"capacity\": 20,\n        \"employeeCount\": 10\n        },\n    \"category\": \"Coffee Shop\",\n    \"costCategory\": \"High\",\n    \"opensEarly\": true,\n    \"name\": \"XYZ Maps Cafe\"\n  },\n  \"type\": \"Feature\"\n}\n</code></pre> Tag_name Auto_tag_condition coffeeShop p.category == 'Coffee Shop' opensEarly p.opensEarly == true largeGroupFriendly p.details.capacity &gt; 16 &amp;&amp; p.details.employee &gt; 8 id@987654321 f.id == 987654321"},{"location":"cli/add-on/#note_2","title":"Note","text":"<p>Rule based tagging does not create tags on existing data you have on the space. It only tags the  data you upload after setting the rules.</p>"},{"location":"cli/add-on/#important-tip","title":"Important tip","text":"<p>The property names inside the properties key of a GeoJSON feature need to be prefixed with a p., and those outside it, like the feature ID, need to be have an f. prefix.</p>"},{"location":"cli/add-on/#add-a-tag-rule","title":"Add a tag rule","text":"<pre><code>xyzmaps space config &lt;spaceId&gt; \u2013tagrules --add\n</code></pre> <p>For example,</p> <pre><code>$ xyzmaps space config  HJtXzHWi --tagrules --add\nStarting to add a new synchronous rule to automatically tag features..\n? Enter a tag name you would like to assign :   =&gt; opensEarly\n\n? Please enter condition(s) for the auto tagging your features with  `opensEarly` e.g. \"f.id == 123 || (p.country=='USA' &amp; p.count&lt;=100)\"\n? condition :    =&gt; p.opensEarly == true\n</code></pre>"},{"location":"cli/add-on/#view-tag-rules","title":"View tag rules","text":"<pre><code>xyzmaps space config &lt;spaceId&gt; \u2013-tagrules  or xyzmaps space config  &lt;spaceId&gt; \u2013tagrules --view\n</code></pre>"},{"location":"cli/add-on/#delete-tag-rules","title":"Delete tag rules","text":"<pre><code>xyzmaps space config &lt;spaceId&gt;  \u2013-tagrules --delete\n</code></pre>"},{"location":"cli/add-on/#update-tagrule-users-can-update-tagrule-name-and-conditions-using-update-command","title":"Update tagrule [Users can update tagrule name and conditions using update command]","text":"<pre><code>xyzmaps space config &lt;spaceId&gt;  \u2013-tagrules --update\n</code></pre> <p>e.g.:</p> <pre><code>$ xyzmaps space config 4HTUXtve --tagrules --update\n? Select tag rule to be updated (Use arrow keys)\n  largeGroupFriendly , rule : p.details.capacity &gt; 16 &amp;&amp; p.details.employees &gt; 8 , mode : sync\n&gt; coffeeShop , rule : p.category == \"Coffee Shop\" , mode: sync\n  opensEarly , rule : p.opensEarly == true , mode : sync\n\n? Press ENTER to keep existing tag name OR type new tag name =&gt; coffee_shop\n\n  Press ENTER OR type condition(s) for this tag rule. e.g. \"f.id == 123 || (p.country=='USA' &amp; p.count&lt;=100)\"\n? condition : =&gt; p.category == \"Coffee Shop\" || p.category == \"Coffee Bar\"\n\ntagrules updated successully!\n</code></pre>"},{"location":"cli/add-on/#searchable-properties","title":"Searchable Properties","text":"<p>XYZ Maps automatically indexes certain properties based on the number of features in your Space. If you have 10,000 features or fewer in a space, all properties are searchable. If a property is not automatically indexed, you can force it to be indexed using the <code>--searchable</code> option. This is where you'll need a XYZ Maps Add-On licence.</p>"},{"location":"cli/add-on/#add-searchable-properties","title":"Add Searchable Properties","text":"<pre><code>$ xyzmaps space config &lt;spaceId&gt; --searchable --add\n? Enter the property name to make searchable (create index on ):    =&gt;  address\n</code></pre>"},{"location":"cli/add-on/#view-searchable-properties","title":"View Searchable Properties","text":"<pre><code>xyzmaps space config &lt;spaceId&gt; --searchable --view\n</code></pre> <p>e.g</p> <pre><code>$ xyzmaps space config fgtdc6tz --searchable \u2013-view\n\n| PropertyName       | Mode         | Searchable     |\n| ------------------ | ------------ | -------------- |\n|  city              | Auto         |   true         |\n|  address           | Manually     |   true         |\n</code></pre>"},{"location":"cli/add-on/#delete-searchable-properties-user-can-delete-one-or-all-searchable-properties-using-delete-command","title":"Delete Searchable Properties [User can delete one or all searchable properties using delete command]","text":"<pre><code>xyzmaps space config &lt;spaceId&gt; --searchable --delete\n</code></pre>"},{"location":"cli/add-on/#activity-log","title":"Activity Log","text":"<p>Activity Log tracks what has been written, modified, and deleted in a XYZ Maps Space. The changes are written to a second space, with options to show</p> <ul> <li>FEATURE_ONLY (default): Just the full new version of the feature, with the id moved. No diff to previous.</li> <li>DIFF_ONLY: Head (newest object) is the full feature. All older versions are only a Diff to the successor. In order from newest to oldest: Obj1: Newest, full Feature + Diff to Obj2-&gt; Obj2: Diff to Obj3 -&gt; Obj3: Diff to Obj4 -&gt; Obj4 \u2026</li> <li>FULL</li> </ul>"},{"location":"cli/add-on/#check-or-enable-activity-log","title":"Check or enable Activity Log","text":"<pre><code>xyzmaps space config &lt;spaceId&gt; --activitylog\n</code></pre> <p>e.g:</p> <pre><code>$ xyzmaps space config jsopziJd --activitylog\nactivity log for this space is not enabled.\n\n? Select action for activity log (Use arrow keys)\n&gt; enable activity log for this space\n  cancel operation\n\n? Select storage mode for activity log (Use arrow keys)\n&gt; full - store whole object on change\n  diff - store only the changed properties\n\n? Select state (number of change history to be kept) for activity log** (Use arrow keys)\n  1\n&gt; 2\n  3\n  4\n  5\n\nactivity log configuration updated successfully, it may take a few seconds to take effect and reflect.\n</code></pre> <p>You can use the same command to check the activity log status, disable or re-configure the activity log settings</p> <p></p>"},{"location":"cli/add-on/#virtual-spaces","title":"Virtual Spaces","text":"<p>Virtual Spaces give users access to multiple spaces with one ID. Group lets you bundle your spaces together, and changes get written back to their original spaces. Associate lets you make your own personal edits to a shared space or one with public data, merging the properties of objects with the same feature ID.</p> <pre><code>xyzmaps space virtualize|vs -a|-g space1,space2\n</code></pre>"},{"location":"cli/add-on/#group","title":"Group","text":"<pre><code>xyzmaps space virtualize -g space1,space2,...\n</code></pre> <p><code>group</code> takes multiple XYZ Maps spaces and presents them via a single XYZ Maps space ID. Duplicates can occur. Any updates will be made to the original spaces.</p>"},{"location":"cli/add-on/#associate","title":"Associate","text":"<pre><code>xyzmaps space vs -a space1,space2\n</code></pre> <p><code>associate</code> takes features from <code>space1</code> and merges their properties into features with the same feature id in <code>space2</code>.</p> <p>One way of using <code>virtualize</code> is to upload CSVs of census data with unique geoID, and merge the statistics on the fly into census geometries where the geoID is the unique ID.</p>"},{"location":"cli/add-on/#options","title":"Options","text":"<p><code>-t,--title [title]</code> Title for virtual XYZ Maps space</p> <p><code>-d,--message [message]</code> set description for the space</p> <p><code>-g, --group [spaceids]</code> Group the spaces (all objects of each space will be part of the response) - enter comma separated space ids</p> <p><code>-a, --associate [spaceids]</code> Associate the spaces. Features with same id will be merged into one feature. Enter comma separated space ids [space1,space2] -- space1 properties will be merged into space2 features.</p> <p><code>-h, --help</code> output usage information</p>"},{"location":"cli/add-on/#join-virtual-spaces","title":"Join (Virtual Spaces)","text":"<p>The <code>join</code> command simplifies use of virtual spaces when using CSV tables and existing geometries. You can designate a CSV column to be the feature ID, and use the <code>associate</code> virtual spaces option to join it with a space with geometries that use the same set of feature IDs.</p> <pre><code>xyzmaps space join space_with_geometries -f data_table.csv -k column_with_id\n</code></pre>"},{"location":"cli/add-on/#note_3","title":"Note","text":"<p><code>join</code> creates a space of features with no geometries. You can inspect this space using geojson.tools via <code>show -w</code>.</p> <p>You can update this \"csv space\" using <code>xyzmaps space upload spaceID -f new.csv -k id --noGeom</code> and the next time the virtual space ID is references, the properties will contain the updated values.</p>"},{"location":"cli/add-on/#join-options","title":"Join Options","text":"<p><code>-f, --file &lt;file&gt;</code>   csv to be uploaded and associated</p> <p><code>-k, --keyField &lt;keyField&gt;</code>  field in csv file to become feature id</p> <p><code>-x, --lon [lon]</code>                 longitude field name</p> <p><code>-y, --lat [lat]</code>                 latitude field name</p> <p><code>-z, --point [point]</code>             points field name with coordinates like (Latitude,Longitude) e.g.(37.7,-122.4)</p> <p><code>--lonlat</code>                         parse a \u2014point/-z csv field as (lon,lat) instead of (lat,lon)</p> <p><code>-d, --delimiter [,]</code>             alternate delimiter used in csv (default: \",\")</p> <p><code>-q, --quote [\"]</code>                 quote used in csv (default: \"\\\"\")</p> <p><code>--token &lt;token&gt;</code>               an external token to create another user's spaces</p> <p><code>-s, --stream</code>                    streaming data for faster uploads and large csv support</p> <p><code>--string-fields &lt;stringFields&gt;</code>  property name(s) of CSV string fields not to be automatically converted into numbers or booleans (e.g. number-like census geoids, postal codes with leading zeros)</p> <p><code>-h, --help</code>                      display help for command</p>"},{"location":"cli/add-on/#note_4","title":"Note","text":"<p><code>join</code> creates a space of features with no geometries. You can inspect this space using geojson.tools via <code>show -w</code>.</p> <p>You can update this \"csv space\" using <code>xyzmaps space upload spaceID -f new.csv -k id --noGeom</code> and the next time the virtual space ID is references, the properties will contain the updated values.</p>"},{"location":"cli/add-on/#gis","title":"GIS","text":"<p>The CLI has access to a number of convenient geospatial data functions via the <code>xyzmaps space gis</code> command. Some of these functions add properties to the original features, while others create data in a new space. These functions are based on popular JavaScript tools like turf.js and D3, and are designed to be modular so you can easily add your own.</p>"},{"location":"cli/add-on/#options_1","title":"Options","text":"<p><code>--centroid</code>             calculates centroids of Line and Polygon features and uploads in                          a different space</p> <p><code>--length</code>               calculates length of LineString features</p> <p><code>--area</code>                 calculates area of Polygon features</p> <p><code>--voronoi</code>              calculates Voronoi Polygons of point features and uploads in                          different space</p> <p><code>--tin</code>                  calculates Delaunay Polygons of point features and uploads in                          different space</p> <p><code>--property &lt;property&gt;</code>  populates Delaunay polygons' properties based on the specified                          feature property</p> <p><code>-c, --chunk [chunk]</code>    chunk size, default 20 -- default for polygons, increase for                          faster point feature uploads</p> <p><code>-t, --tags &lt;tags&gt;</code>      source space tags to filter on</p> <p><code>--samespace</code>            option to upload centroids/voronoi/tin to same space, use tags to                          filter</p> <p><code>-h, --help</code>             display help for command</p> <ul> <li><code>--area</code> uses <code>turf.js</code> to calculate the area of polygons, and saves this as a set of new properties in each polygon feature. <code>xyz_area_sqmiles,'xyz_area_sqkm</code> are rounded for display convenience, and <code>xyz_area_sqm</code> is not rounded.</li> <li><code>--length</code> uses <code>turf.js</code> to calculate the length of lines in a space, and saves this as a set of new properties in each linestring feature, <code>xyz_length_miles</code>,<code>xyz_length_km</code> which are rounded for display convenience, and <code>xyz_length_m</code> which is not rounded.</li> <li><code>--centroid</code> uses <code>turf.js</code> to calculate the center of each polygon in a space. By default, these points are written to a new space, but can saved in the existing space using the <code>--samespace</code> option. In either case, they all receive a <code>centroid</code> tag.</li> <li><code>--voronoi</code> uses <code>d3-delaunay.js</code> to generate Voronoi polygons from points in a XYZ Maps space. The edges of these polygons are equidistant from two points, and the vertices are equidistant to three points. By default, they are written to a new space, but can saved in the source point space using the <code>--samespace</code> option. In either case, they all receive a <code>voronoi</code> tag.</li> <li><code>--tin</code> uses <code>d3-delaunay.js</code> to generate Delaunay triangles from points in a XYZ Maps space. This process maximizes the minimum angle of all the angles of the triangles created from the source points. By default, they are written to a new space, but can saved in the source point space using the <code>--samespace</code> option. In either case, they all receive a <code>tin</code> tag.</li> </ul>"},{"location":"cli/add-on/#cli-hexbins","title":"CLI Hexbins","text":"<p>CLI Hexbins are a data simplification method that makes it easier to visualize large datasets of point features at low zoom levels (e.g., a continent, country, or state/province). A series of hexagon grids are created. The points that fall inside each of them are counted and written to a new XYZ Maps space, and statistics are calculated across the hexbin grid.</p> <p>These differ from the H3 hexbins generated via server-side clustering in a number of ways. CLI Hexbins use the <code>iterate</code> endpoint to calculate and write hexbins to a space across the specified zoom levels, while server-side hexbins are generated on the fly for each zoom level. CLI Hexbins for a specified zoom level can be viewed at any other zoom level using tags -- for example, CLI hexbins or their centroids generated at zoom level 15 can be viewed at zoom level 5 via the hexbin space, whereas server-side hexbins cannot. Server-side hexbins have detailed statistics for the values in a particular hexbin, but CLI hexbins have built-in color formatting and global \"occupancy\" percentages. CLI hexbins also can generate \"subcounts\" of unique values across a dataset.</p> <p>These hexagons (or their centroids) and their statistics can be quickly displayed in place of the raw data that might overwhelm a renderer. Default colors indicating relative \"occupancy\" are generated for convenience of display.</p> <p><code>xyzmaps space hexbin spaceID -z 5-10</code> create hexbins appropriate for zoom levels 5 through 10</p> <p><code>xyzmaps space hexbin spaceID -z 8,10,12</code> create hexbins appropriate for zoom levels 8,10,12</p> <p><code>xyzmaps space hexbin spaceID -c 100,1000,100000</code> create hexbins that are 100 meters, 1 km and 10 km wide</p> <p>Hexbins are tagged by zoom level, width, and type, making it easy to extract one set from the hexbin space for display and comparison.</p> <p>You can learn more about hexbins and how to display them in this tutorial.</p>"},{"location":"cli/add-on/#data-contained-in-xyz-maps-hexbins","title":"Data contained in XYZ Maps Hexbins","text":"<p>Hexbin features contain various values that can help with analysis and visualization:</p> <ul> <li><code>count</code>: the number of points in a hexbin</li> <li><code>maxCount</code>: the largest number of points in any hexbin across that particular zoom level or cell width</li> <li><code>occupancy</code>: <code>count/maxCount</code>, how \"full\" that hexbin is compared to other across that particular zoom level or cell width</li> <li><code>color</code>: an <code>hsla</code> color range that correlates to relative occupancy (red = \"full\", green = \"average\", blue = \"empty</li> <li><code>centroid</code>: the centroid of the hexbin (useful for label placement -- the centroid is also written as a separate feature)</li> </ul> <pre><code>      ...,\n      \"properties\": {\n        \"color\": \"hsla(0, 100%, 50%,0.51)\",\n        \"count\": 468,\n        \"maxCount\": 468,\n        \"occupancy\": 1,\n      },\n      ...,\n      \"properties\": {\n        \"color\": \"hsla(81, 100%, 50%,0.51)\",\n        \"count\": 279,\n        \"maxCount\": 468,\n        \"occupancy\": 0.5961538461538461\n      },\n      ...\n      \"properties\": {\n        \"color\": \"hsla(197, 100%, 50%,0.51)\",\n        \"count\": 6,\n        \"maxCount\": 468,\n        \"occupancy\": 0.01282051282051282...\n      }\n</code></pre>"},{"location":"cli/add-on/#hexbin-sum-and-average","title":"Hexbin sum and average","text":"<p>If a property is qualitative (property values, income, population), in addition to counting points, XYZ Maps Hexbins can add up the value of the properties in each hexbin as well as calculate the average.</p> <pre><code>$ xyzmaps space hexbin spaceID -z 10 -a incidents\n\"sum\": {\n  \"sum\": 4071,\n  \"maxSum\": 5117,\n  \"average\": 8.698717948717949,\n  \"property_name\": \"incidents\"\n}\n</code></pre>"},{"location":"cli/add-on/#hexbin-subcounts","title":"Hexbin subcounts","text":"<p>You can also specify a <code>subcount</code> within each hexbin based upon the count of the values of particular property.</p> <pre><code>`xyzmaps space hexbin spaceID -z 8-12 -p business_type`\n</code></pre> <p>This would create a <code>subcount</code> object in each hexbin, which would contain the relative count of that property value across the hexbin grid.</p> <pre><code>    {\n        \"count\": 48,\n        \"maxcount\": 400,\n        \"subcount\": {\n          \"bar\": {\n            \"color\": \"hsla(181, 100%, 50%,0.51)\",\n            \"count\": 3,\n            \"maxCount\": 32,\n            \"occupancy\": 0.09375\n          },\n          \"grocery_store\": {\n            \"color\": \"hsla(158, 100%, 50%,0.51)\",\n            \"count\": 5,\n            \"maxCount\": 24,\n            \"occupancy\": 0.20833333333333334\n          },\n          \"restaurant\": {\n            \"color\": \"hsla(0, 100%, 50%,0.51)\",\n            \"count\": 20,\n            \"maxCount\": 40,\n            \"occupancy\": 1\n          }...\n  }\n</code></pre>"},{"location":"cli/add-on/#options_2","title":"Options","text":"<p><code>-c, --cellsize &lt;cellsize&gt;</code>      size of hexgrid cells in meters, comma-separate multiple                                  values</p> <p><code>-i, --ids</code>                      add IDs of features counted within the hexbin as an array                                  in the hexbin's feature property</p> <p><code>-p, --groupBy &lt;groupBy&gt;</code>        name of the feature property by which hexbin counts will                                  be further grouped</p> <p><code>-a, --aggregate &lt;aggregate&gt;</code>    name of the feature property used for aggregating sum                                  value of all the features inside a hexbin</p> <p><code>-t, --tags &lt;tags&gt;</code>              only make hexbins for features in the source space that                                  match the specific tag(s), comma-separate multiple values</p> <p><code>-b, --bbox [bbox]</code>              only create hexbins for records inside the bounding box                                  specified either by individual coordinates provided                                  interactively or as minLon,minLat,maxLon,maxLat (use \u201c \u201c                                  to escape a bbox with negative coordinate(s))</p> <p><code>-l, --latitude &lt;latitude&gt;</code>      latitude which will be used for converting cellSize from                                  meters to degrees</p> <p><code>-z, --zoomLevels &lt;zoomLevels&gt;</code>  hexbins optimized for zoom levels (1-18) - comma separate                                  multiple values(-z 8,10,12) or dash for continuous                                  range(-z 10-15)</p> <p><code>-h, --help</code>                     display help for command</p> <p>You can create hexbins either by width in meters, or use preset widths appropriate to the zoom level.</p>"},{"location":"cli/basic-features/","title":"XYZ Maps CLI","text":"<p>In this section we give you a quick overview of the most commonly used commands to interact with XYZ Maps Spaces from the XYZ Maps CLI. </p>"},{"location":"cli/basic-features/#supported-commands","title":"Supported Commands","text":"<p>XYZ Maps CLI is built to be modular and extensible, so it is entirely possible that when you use the tool it has already learned a couple of new tricks.</p> <p>The general structure is that you call the <code>here</code> command followed by command which essentially corresponds to the API you want to interact with or get more information from.</p>"},{"location":"cli/basic-features/#getting-help","title":"Getting help","text":"<p>You can always call up help on the XYZ Maps CLI either by not providing any parameter at all or by using the <code>--help</code> switch.</p> <pre><code>xyzmaps --help\n</code></pre>"},{"location":"cli/basic-features/#interact-with-xyz-maps-spaces","title":"Interact with XYZ Maps Spaces <p>The <code>space</code> command is used to interact with XYZ Maps Spaces.</p> <p>You can find the supported subcommands with the <code>--help</code> switch:</p> <pre><code>xyzmaps space --help\n</code></pre>","text":""},{"location":"cli/basic-features/#list-spaces","title":"List Spaces","text":"<p>To list all Spaces you have access to, you can use</p> <pre><code>xyzmaps space list\n</code></pre>"},{"location":"cli/basic-features/#options","title":"Options","text":"<p><code>-r, --raw</code> shows the raw space list definition in json</p> <p><code>--filter &lt;filter&gt;</code> a comma separated list of strings to filter spaces by, based on title or description text</p> <p>Lists only the spaces where the title or description contain the matching string(s).</p> <p><code>-p, --prop &lt;prop&gt;</code> choose which space property to show when listing spaces: id, title or description.</p>"},{"location":"cli/basic-features/#create-a-new-space","title":"Create a new Space","text":"<pre><code>xyzmaps space create -t \"sample test xyz\" -d \"sample creation\"\n</code></pre> <p>When you create a new space, the SpaceID will be automatically generated.</p>"},{"location":"cli/basic-features/#tip","title":"Tip","text":"<p>The <code>upload</code> command can also automatically generate a new space ID for you if it is not specified</p>"},{"location":"cli/basic-features/#options_1","title":"Options","text":"<p><code>-t &lt;title&gt;</code> title for the space</p> <p><code>-d &lt;desc&gt;</code> description for the space</p> <p><code>-s &lt;schema definition&gt;</code>  set a json schema definition for your space</p> <p>Applies a schema validation json file to the space to be applied to future uploads. The schema definition can be in the form of a url or a local schema json file. Features that do not match this schema will not be uploaded to the space.</p>"},{"location":"cli/basic-features/#tip_1","title":"Tip","text":"<p>When you have many spaces, you will be glad you added meaningful titles and descriptions.</p>"},{"location":"cli/basic-features/#uploadupdate-data-to-a-space","title":"Upload/Update data to a Space","text":"<p>The CLI makes it easy to upload geospatial files to a XYZ Maps Space, and there are many options to enhance, optimize and speed up the upload process.</p>"},{"location":"cli/basic-features/#upload-geojson","title":"Upload GeoJSON","text":"<p>Upload a GeoJSON file to a new space. XYZ Maps will automatically generate a space ID and display it for you.</p> <pre><code>xyzmaps space upload -f /Users/xyz/data.geojson\n</code></pre> <p>Upload a GeoJSON file to an existing space.</p> <pre><code>xyzmaps space upload SPACE_ID -f /Users/xyz/data.geojson\n</code></pre>"},{"location":"cli/basic-features/#tip_2","title":"Tip","text":"<p>Use streaming for faster uploads</p> <p>Streaming with the <code>upload -s</code> option will significantly reduce the time required to upload GeoJSON files. The default non-streaming mode is useful for troubleshooting. If your features are small, you can also try increasing the chunk size using <code>-c</code>. Chunk size for many point datasets can be safely increased to 1000 or more (the default is 200).</p>"},{"location":"cli/basic-features/#note","title":"Note","text":"<p>XYZ Maps requires that every feature in a space has a unique ID. This helps you access individual features in a space using the API.</p> <p>If a GeoJSON feature does not have an ID (a common occurrence), XYZ Maps's default upload behavior is to create one based on a hash of the feature's property \u2014 note that if you have records with duplicate IDs in a dataset at the same location with the same properties, only one will be uploaded. You can define a new feature ID using more than one property using <code>-i</code>.)</p> <p>By default, the CLI will respect any IDs already in a feature. Note that if a new feature has the same ID as an existing feature, XYZ Maps will consider it an update and overwrite the existing feature.  Note that some public datasets have a set of feature IDs that are simply incremental integers, which can lead to feature replacement that you probably didn't want when you are uploading multiple files to the same space. In this case, you may want to use <code>-o</code> to override the existing ID and create a unique feature ID based on a hash of the feature's properties. You can also select multiple properties with <code>-i</code> to generate something unique and human-readable.</p>"},{"location":"cli/basic-features/#upload-a-csv-file","title":"Upload a CSV file","text":"<pre><code>xyzmaps space upload -f /Users/xyz/data.csv\n</code></pre> <p>XYZ Maps will attempt to choose the columns containing the latitude and longitude fields based on well-known names including:</p> <p>y, ycoord, ycoordinate, coordy, coordinatey, latitude, lat x, xcoord, xcoordinate, coordx, coordinatex, longitude, lon, lng, long, longitud</p> <p>If your csv uses different names, you can specify the latitude field with <code>-y</code> and longitude with <code>-x</code>. </p> <pre><code>xyzmaps space upload -f /Users/xyz/data.csv -x the_lon -y the_lat\n</code></pre> <p>If the csv combines coordinates into a single field, such as</p> <p>37.7,-122.2</p> <p>or</p> <p>(37.7,-122.2)</p> <p>you can specify the name of that column with <code>-z</code>. (Thanks to user ToonvanStrijp for some nice regex.)</p> <pre><code>xyzmaps space upload -f /Users/xyz/data.csv -z points\n</code></pre> <p>Rows that have <code>0,0</code> or <code>null</code> values in the designated latitude and longitude columns will be tagged with <code>null_island</code>. They will not be displayed on the map, but you can access them via the API (or in geojson.tools) by appending <code>&amp;tags=null_island</code> so you can inspect and repair the records.</p> <p>If the lat/lon columns contain letters or other invalid characters, the features are tagged with <code>invalid</code>.</p> <p>If you specify <code>upload --noCoords</code>, the CLI will upload the CSV rows as features with a null geometry object, and tag it with <code>null_island</code>. This is useful for working with data tables that you want to dynamically merge with geometries using Virtual Spaces.</p>"},{"location":"cli/basic-features/#tip_3","title":"Tip","text":"<p>Use streaming for faster uploads</p> <p>Using streaming via the <code>upload -s</code> option will significantly reduce the time required to upload CSV files of any size. Standard, non-streaming mode is useful for troubleshooting.</p>"},{"location":"cli/basic-features/#tip_4","title":"Tip","text":"<p>Using properties as the feature ID</p> <p>The CLI converts a CSV row into a GeoJSON feature before uploading it. If you want values in a CSV column to be the GeoJSON feature ID, use <code>-i columnName.</code> Note that you can choose more than one column to create the feature ID.</p>"},{"location":"cli/basic-features/#grouping-multiple-csv-rows-into-a-single-unique-feature-id","title":"Grouping multiple CSV rows into a single unique feature ID","text":"<p>You can use <code>--groupby</code> with <code>-i</code> to consolidate multiple rows \"belonging to\" a unique ID as nested objects within a single feature. A good example of this would be a CSV of election results across many electoral precincts, where each candidate running in that precinct has their own row. Please read the Group By tutorial for more details.</p>"},{"location":"cli/basic-features/#chunking","title":"Chunking","text":"<p>You can adjust the \"chunk\" size when streaming an upload. This controls the number of features that the CLI sends to the API at a time. The default chunk size is 200 features.</p>"},{"location":"cli/basic-features/#tip_5","title":"Tip","text":"<p>Using <code>-c 1</code> and <code>-e</code> can help troubleshoot problematic features in individual GeoJSON features.</p>"},{"location":"cli/basic-features/#large-features","title":"Large features","text":"<p>You may see upload errors from the CLI if your features are large, complex geometries. By decreasing the chunk size, you may still be able to upload these large features. Try <code>-c 100</code>, or even <code>-c 10</code> or <code>-c 1</code>.</p> <p>As of v1.6, if the CLI receives a <code>413 Request Entity Too Large</code> error, it will cut the chunk size in half in an attempt to upload the features.</p> <p>If you continue to see errors -- probably because a single feature is larger than the limit of the API gateway (approximately 10 MB -- you may need to simplify the geometry before uploading them.</p>"},{"location":"cli/basic-features/#small-features","title":"Small features","text":"<p>If your features are small, like you might see in a GeoJSON file containing points or a CSV, you will see faster uploads if you increase the chunk size. For example, <code>-c 1000</code> will enable the CLI to upload 1000 features at a time. If the features are very simple, <code>-c 10000</code> may also be appropriate. As long as the chunk size is below the size of the API gateway, this will speed up your upload. The CLI will notify you if there is an upload error. (You can see more detailed errors using <code>-e</code>.)</p> <p>Note that if you need to restart your upload, existing features will not be duplicated.</p>"},{"location":"cli/basic-features/#upload-and-stream-large-csv-and-geojson-files","title":"Upload and stream large CSV and GeoJSON files","text":"<p>To upload very large CSV and GeoJSON files to your XYZ Maps space, you will need to use <code>-s</code> -- this will stream the file and avoid Node.js memory errors. It will also be considerably faster than the standard upload method. (Note that you cannot currently stream a shapefile.)</p> <pre><code>xyzmaps space upload YOUR_SPACE_ID -f /Users/xyz/big_data.csv -s\n</code></pre>"},{"location":"cli/basic-features/#note_1","title":"Note","text":"<p>When a file is streamed with <code>-s</code> it is not loaded into memory and -a is not available to preview  and assign tags. You can specify tags using <code>-p</code>.</p>"},{"location":"cli/basic-features/#note_2","title":"Note","text":"<p>XYZ Maps is a database. Databases trade off storage space for speed, and your data will always take up more storage space in XYZ Maps than it does in a static file. When a file is uploaded into a XYZ Maps Space, features, their properties, and the geometries are broken out into multiple tables, indexed and tagged. All of this lets you query your geospatial data on demand, and access it dynamically as vector tiles. You can check the size of your XYZ Maps Spaces in your account dashboard or the CLI.</p>"},{"location":"cli/basic-features/#upload-a-shapefile","title":"Upload a shapefile","text":"<p>If a shapefile is unzipped, select the file with the .shp extension, and the CLI will look for the accompanying files in that directory</p> <pre><code>xyzmaps space upload -f /Users/dhatb/data.shp\n</code></pre> <p>As of v1.6, the CLI can upload a zipped shapefile:</p> <pre><code>xyzmaps space upload -f /Users/dhatb/data.zip\n</code></pre> <p>Upload shapefile data to a Space.</p> <p>There are many, many more tips in the Working with Shapefiles tutorial.</p>"},{"location":"cli/basic-features/#note_3","title":"Note","text":"<p>Shapefiles cannot be streamed with <code>-s</code>.</p>"},{"location":"cli/basic-features/#tip_6","title":"Tip","text":"<p>Instead of passing the content as a file with <code>-f</code> option you can also pipe the output of another command directly into the input stream of the XYZ Maps CLI like <code>cmd | xyzmaps space upload YOUR_SPACE_ID</code> -- this can be useful when piping data from geospatial tools like <code>mapshaper</code>.</p>"},{"location":"cli/basic-features/#upload-a-csv-using-a-unique-id","title":"Upload a CSV using a unique ID","text":"<pre><code>xyzmaps space upload -f data.csv -i unique_id\n</code></pre> <p>You can upload CSV to a XYZ Maps space and select a column to be the GeoJSON feature ID.</p> <p>This feature should be used if your data has well-known and truly unique identifiers that you want to preserve. The XYZ Maps API can query individual features by feature ID, so this can be a valuable method of accessing and updating features.</p> <p>By default, the CLI will generate a unique feature ID during CSV upload based on a hash of the properties and geometry.</p>"},{"location":"cli/basic-features/#note_4","title":"Note","text":"<p>Unique IDs are important for XYZ Maps Add-on features such as  Virtual Spaces.</p>"},{"location":"cli/basic-features/#warning","title":"Warning","text":"<p>Many GIS systems will simply assign incrementing integers as feature IDs to every file. These can conflict across files.</p>"},{"location":"cli/basic-features/#upload-and-assign-tags","title":"Upload and assign tags","text":"<p>Tags are special properties that can be added to a feature that makes it easy to query them from the XYZ Maps API using the <code>&amp;tags=</code> parameter.</p>"},{"location":"cli/basic-features/#note_5","title":"Note","text":"<p>XYZ Maps Tags should be used selectively, ideally using Rule-Based Tags. Tags are not meant to be a replacement for Property Search as you will be duplicating existing data in a record.</p>"},{"location":"cli/basic-features/#assign-tags-interactively","title":"Assign tags interactively","text":"<pre><code>xyzmaps space upload -f file.geojson -a\n</code></pre> <p>Uploads data and allows users to select tags from a list of feature keynames in shapefiles, CSVs and GeoJSON files, with a preview of the first few values.</p>"},{"location":"cli/basic-features/#note_6","title":"Note","text":"<p><code>-a</code> does not allow you to stream the upload.</p>"},{"location":"cli/basic-features/#note_7","title":"Note","text":"<p>The mapping of CSV columns to GeoJSON is as follows:</p> Type CSV column GeoJSON spatial e.g. ...;lat;long; ... ...;50.16192;8.53362;... ...\"geometry\": {  \"type\": \"Point\",\"coordinates\": {[8.53362,50.16192]}} non-spatial anyOtherName properties.anyOtherName e.g. ...;name;amenity;......;Anfield;Football Stadium;... ...properties {...  \"name\": \"Anfield\",\"amenity\": \"Football Stadium\",...}"},{"location":"cli/basic-features/#assign-tags-using-property-names","title":"Assign tags using property names","text":"<pre><code>xyzmaps space upload -f file.geojson -p treatment\n</code></pre> <p>Uploads data and adds the value of the selected feature property as tag. These tags can be used to filter data when querying the XYZ Maps API. The tags will be stored as <code>propertyname@value</code>. This is most effective when the property consists of a limited number of qualitative values -- if you have many unique values, or quantitative values, you are better off using Property Search.</p>"},{"location":"cli/basic-features/#response","title":"Response","text":"<pre><code>treatment@green_paint, treatment@sharrows, treatment@hit_post\n</code></pre>"},{"location":"cli/basic-features/#upload-data-with-a-timestamp-and-date-properties","title":"Upload data with a timestamp and date properties","text":"<p>If you have a timestamp or date properties in your data, the CLI can help you create additional time and date specific properties and time-based tags. This will make it easier to use the XYZ Maps Property Search feature.</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; -f &lt;CSV|GEOJSON&gt; --date &lt;propertyname&gt;\n</code></pre> <p>Convert a valid date/timestamp property into an ISO 8601 date and a unix timestamp and adds them as <code>datahub_timestamp_propertyname</code> and <code>datahub_iso8601_propertyname</code> properties to the features.</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; -f &lt;CSV|GEOJSON&gt; --date &lt;propertyname&gt; --dateprops [year,month,week,weekday,year_month,year_week,hour]\n</code></pre> <p>Extract the date parameter(s) specified following <code>--dateprops</code> from the property and upload them as individual properties to the features.</p> <p>So for an example property in a feature: <code>\"start_time\": \"2020-04-29T22:00:00+05:30\"</code>, you will get the following properties added to the feature upon upload.</p> --dateprops property value year date_start_time_year 2020 month date_start_time_month April week date_start_time_week 18 weekday date_start_time_weekday Wednesday year_month date_start_time_year_month 2020-04 year_week date_start_time_year_week 2020-18 hour date_start_time_hour 22 <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; -f &lt;CSV|GEOJSON&gt; --date &lt;propertyname&gt; --datetag [year,month,week,weekday,year_month,year_week,hour]\n</code></pre> <p>Along similar lines, <code>--datetag</code> will let you specify which date parameter tags need to be created out of a date property for the features.</p> --datetag tag year date_start_time_year@2020 month date_start_time_month@april week date_start_time_week@18 weekday date_start_time_weekday@wednesday year_month date_start_time_year_month@2020-04 year_week date_start_time_year_week@2020-18 hour date_start_time_hour@22"},{"location":"cli/basic-features/#upload-history-of-a-space","title":"Upload history of a space","text":"<p>The CLI saves the 3 most recent upload commands for a space within the space metadata. This allows you to re-use one of them later with the <code>--history</code> option. You can specify a command index which can range from 0(newest) to 2 (oldest), or you can use the <code>--history</code> option without an index, and you will be provided with an interactive list of historical upload commands.</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; --history [0-2|blank]\n</code></pre> <p>You can also mark one of the history commands as a \"favorite\" so that you can later re-execute it.</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; --history save\n</code></pre> <p>To execute the favorite upload command:</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; --history fav\n</code></pre> <p>This is a convenient way to save upload commands with particularly complex options, especially when you revisit a space a few months after you last worked with it.</p> <p>Note that this will immediately upload the command.</p> <p>You can clear a space's <code>history</code> using <code>clear</code></p>"},{"location":"cli/basic-features/#upload-multiple-files-with-batch-upload","title":"Upload multiple files with batch upload","text":"<p>You can upload a directory full of geospatial files to a space in one command using <code>--batch</code>. This is a convenient way to rejoin datasets that have been broken into multiple files, or to add regional files to one space in order to build a national dataset.</p> <p>You must specify the directory with <code>-f</code> and the filetype after <code>--batch</code>.</p> <pre><code>xyzmaps space upload &lt;SPACE_ID&gt; --batch [geojson|csv|shp|gpx] -f &lt;PATH_TO_FOLDER&gt;\n</code></pre> <p>While uploading shapefiles, <code>--batch</code> will inspect one level of sub-directories within that specified directory to look for <code>.shp</code> and all other relevant files from when uncompressing a zipped shapefile.</p>"},{"location":"cli/basic-features/#options_2","title":"Options","text":"<p><code>-f, --file &lt;file&gt;</code>   GeoJSON, GeoJSONL, CSV, GPX, XLS/XLSX, or Shapefile to upload</p> <p><code>-c, --chunk [chunk]</code> chunk size (adjusts the number of features uploaded at once)</p> <p><code>-t, --tags [tags]</code>   tags for the XYZ Maps space (used to filter data from the API)</p> <p><code>--token &lt;token&gt;</code>    an external token to upload data to another user's space</p> <p><code>-x, --lon [lon]</code>     choose longitude CSV field name, if not well-known</p> <p><code>-y, --lat [lat]</code>     latitude CSV field name, if not well-known</p> <p><code>-z, --point [point]</code>  points field name, e.g. <code>(lat,lon)</code></p> <p><code>--lonlat</code>              parse a --point/-z csv field as <code>(lon,lat)</code> instead of <code>(lat,lon)</code></p> <p><code>-p, --ptag [ptag]</code>    property name(s) whose values will be used to generate tags</p> <p><code>-i, --id [id]</code>        property name(s) to be used as the feature ID</p> <p><code>-a, --assign</code>         lists a sample of properties, allowing you to assign fields to be selected as tags and Feature IDs</p> <p><code>-o, --override</code>       override existing GeoJSON feature IDs and generate unique IDs using the property hash function</p> <p><code>-d, --delimiter [,]</code>  an alternate delimiter used in CSV (default: \",\")</p> <p><code>-q, --quote [\"]</code>       quote used in CSV (default: \"\\\"\")</p> <p><code>-e, --errors</code>         print data upload errors</p> <p><code>-s, --stream</code>        speed up CSV and GeoJSON uploads. Required to stream large geojson and csv files (&gt; 200 MB) (<code>-a</code> unavailable with streaming, use <code>-p</code>)</p> <p><code>--string-fields &lt;stringFields&gt;</code>  property name(s) of CSV string fields not to be automatically converted into numbers or booleans (e.g. number-like census geoids, postal codes with leading zeros)</p> <p><code>--groupby &lt;groupby&gt;</code>             consolidate multiple rows of a CSV into a single feature based on a unique ID designated with -i; values of each row within the selected column will become top-level properties within the consolidated feature</p> <p><code>--flatten</code>             stores the groupby operation output in a flattened format separated by colon (:)</p> <p><code>--promote &lt;promote&gt;</code>             comma-separated column names which should not be nested in the groupby object</p> <p><code>--date &lt;date&gt;</code>                   date-related property name(s) of a feature to be normalized as an ISO 8601 datestring (<code>xyz_iso8601_[propertyname]</code>), and unix timestamp (<code>xyz_timestamp_[propertyname]</code>)</p> <p><code>--datetag [datetagString]</code>       comma-separated list of granular date tags to be added via --date. possible options - year, month, week, weekday, year_month, year_week</p> <p><code>--dateprops [datepropsString]</code>   comma separated list of granular date properties to be added via --date. possible options - year, month, week, weekday, year_month, year_week</p> <p><code>--noCoords</code>                      upload CSV files with no coordinates, generates null geometry (best used with -i and virtual spaces)</p> <p><code>--history [history]</code>             repeat commands previously used to upload data to a space; save and recall a specific command using \"--history save\" and \"--history fav\"</p> <p><code>--batch [batch]</code>                 select type of files to be uploaded in batch (select directory with -f)</p> <p><code>-h, --help</code>           output usage information</p>"},{"location":"cli/basic-features/#tip_7","title":"Tip","text":"<p>You can pipe data to the <code>upload</code> command and an existing space -- <code>atoolthatoutputsgeojson | xyzmaps space upload spaceID</code></p>"},{"location":"cli/basic-features/#note_8","title":"Note","text":"<p>Some GeoJSON features may cross the international dateline. In older GeoJSON files, some coordinates may have longitudes greater than 180 or less than -180.  You cannot upload these features to XYZ Maps \u2013 these features should be split into MultiPolygons or MultiLineStrings. Also, some coordinates that are supposed to be 180/-180 can end up looking like <code>180.0000008576</code> thanks to floating-point precision errors in whatever process created them. This is also something you can't upload to XYZ Maps.</p>"},{"location":"cli/basic-features/#join-data-to-another-space","title":"Join data to another space","text":"<pre><code>xyzmaps space join YOUR_SPACE_ID -f data.csv --keys csv_column\n</code></pre> <p><code>join</code> will upload a csv and create a new Virtual Space -- it simplifies the steps one does with <code>xyzmaps space upload -f my.csv --noCoords</code> and <code>xyzmaps space vs -a csvspace,geometryspace</code>.</p>"},{"location":"cli/basic-features/#note_9","title":"Note","text":"<p>It is not recommended you build scripts using <code>join</code> until v1.7 as the order of the command will be changing to operate more like <code>upload spaceID</code>, where the space ID in the command will contain the csv, and <code>--target spaceID</code> will contain the geometry space.</p>"},{"location":"cli/basic-features/#show-contents-of-a-space","title":"Show contents of a space","text":"<pre><code>xyzmaps space show YOUR_SPACE_ID\n</code></pre> <p>Show the objects of a space in a table, filter by tags or property values, or open the space in other visualization tools.</p> <p>Using <code>show</code> on a large space will generate a long table. You can see the raw GeoJSON of the first 5000 features using <code>-r</code>. This can also be very long. You may want to direct this output to a file, or pipe to <code>more</code>.</p> <pre><code>xyzmaps space show spaceID -r &gt; my.geojson\n</code></pre> <p>If your space contains a few hundred to a few thousand features, you can open the space in geojson.tools, a data preview tool, using <code>show -w</code>. Larger spaces can be previewed in Space Invader, a Tangram-based tool from XYZ Maps Labs, using <code>show -v</code>, and features like H3 hexbin and quadbin clustering can be used to visualize even larger spaces.</p>"},{"location":"cli/basic-features/#note_10","title":"Note","text":"<p>As of v1.6, tokens generated using <code>-v</code> and <code>-w</code> are for the that space only. Also, these tokens expire in 48 hours by default. To generate a permanent token for a space, use <code>--permanent</code> or <code>-x</code>.</p>"},{"location":"cli/basic-features/#filter-by-tags","title":"Filter by Tags","text":"<p>You can filter tags from XYZ Maps using tags with <code>-t</code>:</p> <p><code>xyzmaps space show spaceID -t my_tag</code> (records with <code>my_tag</code> will be printed in the console) <code>xyzmaps space show spaceID -w -t my_tag</code> (records with <code>my_tag</code> will be opened in geojson.tools) <code>xyzmaps space show spaceID -v -t my_tag</code> (records with <code>my_tag</code> will be opened in XYZ Maps Space Invader)</p>"},{"location":"cli/basic-features/#property-search","title":"Property Search","text":"<p>If a property has been indexed by XYZ Maps, you can filter them with <code>-s</code> or <code>--search</code>. The property name must be prefixed by <code>p.</code>:</p> <pre><code>xyzmaps space show spaceID -s \"p.property_name&gt;value\"\n\nxyzmaps space show spaceID -s \"p.name=John,Tom+p.age&lt;50+p.phone='9999999'+p.zipcode=123456\" -w\n</code></pre> <ul> <li>Operators include <code>=</code>,<code>!=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code></li> <li>Search expressions must be enclosed in double quotes, e.g. <code>\"p.property_name&gt;value\"</code></li> <li>Use comma separated values to search multiple values of a property, e.g. <code>OR</code>. Use <code>+</code> for <code>AND</code>.</li> <li>Use single quotes to signify a string value, e.g. <code>\"p.property_name&gt;value='100'\"</code> vs <code>\"p.property_name&gt;value=100\"</code></li> <li>To access feature ID, timestamps, or tags, prefix them with <code>f.</code>, e.g. <code>f.id, f.updatedAt, f.tags f.createdAt</code></li> <li>When accessing Property Search via the API, the URL-safe arguments are <code>=</code>, <code>!=</code>, <code>=gt=</code>, <code>=gte=</code>, <code>=lt=</code>, <code>=lte=</code>.</li> </ul>"},{"location":"cli/basic-features/#note_11","title":"Note","text":"<p>Property Search is available in spaces with fewer than 10,000 features by default. For spaces larger than 10,000 features, a limited number will be indexed. To access more, you'll need a XYZ Maps Add-on license, learn more about XYZ Maps Add-on features here.</p>"},{"location":"cli/basic-features/#property-filters","title":"Property Filters","text":"<p>You can use <code>show -p</code> or <code>--prop</code> to filter the properties that are returned by the XYZ Maps API. This is useful when your features have a large number of properties, and you only need to return some of them along with the geometry.</p> <pre><code>xyzmaps space show -p p.property1,p.property2 -w\n</code></pre>"},{"location":"cli/basic-features/#spatial-search","title":"Spatial Search","text":"<p>You can use <code>--spatial</code> to search for features in a XYZ Maps space that fall within the radius from a point, or within a polygon, or along a line.</p> <p>You can specify a point and a radius, or a feature in another XYZ Maps space, or a GeoJSON file containing a feature.</p> <ul> <li><code>--center</code>: comma separated <code>lon,lat</code> values <code>(x,y)</code> that specify the center point for the search. While this might work unquoted in most shells, some shells are going to interpret the <code>-</code> as an argument, so it's safest to use double quotes.</li> <li><code>--radius</code>: the radius of the search, in meters, from the <code>--center</code> point, or a buffer around a geometry specified with <code>--feature</code> or <code>--geometry</code></li> <li><code>--feature</code>: comma separated <code>spaceid,featureid</code> values that specify a reference geometry from another XYZ Maps space -- this will return features from the first space that fall within or along a feature from the second space</li> <li><code>--geometry</code>: a single GeoJSON feature in a file to be uploaded for the spatial query (not a feature collection)</li> </ul>"},{"location":"cli/basic-features/#tip_8","title":"Tip","text":"<p>These results are most easily viewable using <code>show -w</code>.</p>"},{"location":"cli/basic-features/#options_3","title":"Options","text":"<p><code>-l, --limit &lt;limit&gt;</code> Number of objects to be fetched</p> <p><code>-o, --offset &lt;offset&gt;</code> The offset / handle to continue the iteration</p> <p><code>-t, --tags &lt;tags&gt;</code> Tags to filter on</p> <p><code>-r, --raw</code> show raw XYZ Maps space content (this iterates through every feature, so you can direct this to a file using <code>&gt;</code></p> <p><code>--all</code> iterate over entire XYZ Maps space to get entire data of space, output will be shown on the console in geojson format (and can be directed to a file using <code>&gt;</code>)</p> <p><code>--geojsonl</code> to print output of --all in geojsonl format</p> <p><code>-c, --chunk [chunk]</code> chunk size to use in --all option, default 5000</p> <p><code>--token &lt;token&gt;</code> an external token to access another user's space</p> <p><code>-p, --prop &lt;prop&gt;</code> selection of properties, use p.\\&lt;FEATUREPROP&gt; or f. <p><code>-w, --web</code> display XYZ Maps space on http://geojson.tools</p> <p><code>-v, --vector</code> inspect and analyze using XYZ Maps Space Invader and tangram.js</p> <p><code>-x, --permanent</code> generate a permanent token for the space when using <code>-v</code> or <code>-w</code> instead of a temporary token that expires in 48 hours)</p> <p><code>-s, --search &lt;propfilter&gt;</code> search expression in \"double quotes\", use single quote to signify string value,  use p.\\&lt;FEATUREPROP&gt; or f.\\ (Use                              '+' for AND , Operators : &gt;,&lt;,&lt;=,&lt;=,=,!=) (use comma separated values to search multiple values of a property) {e.g.                              \"p.name=John,Tom+p.age&lt;50+p.phone='9999999'+p.zipcode=123456\"} <p><code>--spatial</code>  make a spatial search on the space</p> <p><code>--radius &lt;radius&gt;</code> indicate a radius for a spatial search, or to thicken the input linestring or polygon (in meters)</p> <p><code>--center &lt;center&gt;</code> comma separated <code>lon,lat</code> values to specify the center point for radius search (best to surround this with quotes)</p> <p><code>--feature &lt;feature&gt;</code> comma separated <code>spaceid,featureid</code> values to specify reference geometry (taken from feature) for spatial query</p> <p><code>--geometry &lt;geometry&gt;</code> geometry file to upload for a spatial query (single feature in geojson file)</p> <p><code>-h, --help</code> display help for command</p>"},{"location":"cli/basic-features/#delete-a-space","title":"Delete a Space","text":"<pre><code>xyzmaps space delete YOUR_SPACE_ID\n</code></pre> <p>Delete a space you have access to. By default, you will be shown information about the space for context, and a confirmation prompt.</p>"},{"location":"cli/basic-features/#options_4","title":"Options","text":"<p><code>--force</code> skip the confirmation prompt</p> <p><code>--token &lt;token&gt;</code> an external token to delete another user's space</p> <p><code>-h, --help</code> display help for command</p>"},{"location":"cli/basic-features/#clear-a-space","title":"Clear a Space","text":"<pre><code>xyzmaps space clear YOUR_SPACE_ID\n</code></pre> <p>Clear data from your space. You clear the entire space, or clear by tag or feature ID. By default, you will be shown information about the space for context, and a confirmation prompt.</p>"},{"location":"cli/basic-features/#options_5","title":"Options","text":"<p><code>-t, --tags &lt;tags&gt;</code> tags for the XYZ Maps space</p> <p><code>-i, --ids &lt;ids&gt;</code> ids for the XYZ Maps space</p> <p><code>--token &lt;token&gt;</code> an external token to clear another user's space data</p> <p><code>--force</code> skip the confirmation prompt</p> <p><code>-h, --help</code> display help for command</p>"},{"location":"cli/basic-features/#list-all-tokens","title":"List all tokens","text":"<pre><code>xyzmaps space token\n</code></pre> <p>Lists all the XYZ Maps tokens you have available:</p> <pre><code>id             | type    | lat      | description\n--------------- --------- ---------- ------------------------------------------------------------------------------\nYOUR_TOKEN_NR_1 PERMANENT 1534451767 xyz-hub=readFeatures,createFeatures,updateFeatures,deleteFeatures,manageSpaces\nYOUR_TOKEN_NR_2 PERMANENT 1534516620 xyz-hub=readFeatures\n</code></pre>"},{"location":"cli/basic-features/#options_6","title":"Options","text":"<p><code>--console</code> opens the web console for XYZ Maps https://localhost:8080/console</p> <p><code>-h, --help</code> display help for command</p>"},{"location":"cli/basic-features/#get-or-update-more-information-about-your-spaces","title":"Get or update more information about your spaces","text":"<p>You can use the <code>config</code> command to get and update information about your spaces.</p>"},{"location":"cli/basic-features/#get-information-about-a-space","title":"Get information about a space","text":"<pre><code>xyzmaps space config SPACE_ID\n</code></pre> <p>This will print a formatted table with the title, description, and other high-level information about the space.</p> <p>You can see the raw <code>json</code> response from the <code>/statistics</code> endpoint using <code>-r</code>:</p> <pre><code>xyzmaps space config SPACE_ID -r\n</code></pre>"},{"location":"cli/basic-features/#get-a-list-of-tags-and-properties-used-in-a-space","title":"Get a list of tags and properties used in a space","text":"<p>You can get more details about a space by using the <code>--stats</code> option. This will return the number of features, the size of the space, the bbox, geometry types, names and counts of tags, as well as the names of properties (and if they can be accessed via Property Search).</p> <pre><code>xyzmaps space config SPACE_ID --stats\n</code></pre>"},{"location":"cli/basic-features/#tip_9","title":"Tip","text":"<p>Use <code>xyzmaps space analyze</code> to get a count and list of values of a property in a space. Note that this is a client-side operation and is best suited for qualitative values. Only the first 500,000 features in a space will be analyzed.</p>"},{"location":"cli/basic-features/#update-the-title-and-description-of-a-space","title":"Update the title and description of a space","text":"<p>To update the title and/or description of a space:</p> <pre><code>xyzmaps space config -t \"A meaningful title for a space\" -d \"additional details about this space that future you will appreciate 6 months from now\"\n</code></pre>"},{"location":"cli/basic-features/#share-a-space","title":"Share a space","text":"<p>You can share a space with other users using the <code>--shared</code> option. If they have a XYZ Maps account, they will be able to read from that space using their own tokens (and any data transfer will be charged to their XYZ Maps account).</p> <pre><code>xyzmaps space config spaceID --shared true\n</code></pre> <p>You can disable sharing by passing a <code>false</code> parameter:</p> <pre><code>xyzmaps space config spaceID --shared false\n</code></pre> <p>Note that any XYZ Maps user will be able to read a space you have shared, and will be able to view a list all shared spaces.</p> <p>If you want to selectively share a space, you should generate a token for just that space using the XYZ Maps Console.</p>"},{"location":"cli/basic-features/#basic-options","title":"Basic Options","text":"<p><code>--shared &lt;flag&gt;</code> set your space as shared / public (default is false)</p> <p><code>-t,--title [title]</code> set title for the space</p> <p><code>-d,--message [message]</code> set description for the space</p> <p><code>-c,--copyright [copyright]</code> set copyright text for the space</p> <p><code>--cacheTTL &lt;cacheTTL&gt;</code> set cacheTTL value for the space with valid number</p> <p><code>--stats</code> see detailed space statistics</p> <p><code>--token &lt;token&gt;</code> an external token to access another user's space config and stats information</p> <p><code>-r, --raw</code> show raw json output</p> <p><code>--console</code> opens web console for XYZ Maps</p> <p><code>-h, --help</code> display help for command</p>"},{"location":"cli/basic-features/#add-on-options","title":"Add-on Options","text":"<p><code>-s,--schema [schemadef]</code> view or set schema definition (local filepath / http link) for your space, applicable on future data, use with add/delete/update</p> <p><code>--searchable</code> view or configure searchable properties of a XYZ Maps space, use with add/delete/update</p> <p><code>--tagrules</code> add, remove, view the conditional rules to tag your features automatically, use with add/delete/update -- at present all tag rules will be                                applied synchronously before features are stored ( mode : sync )</p> <p><code>--delete</code> use with schema/searchable/tagrules options to remove the respective configurations</p> <p><code>--add</code> use with schema/searchable/tagrules options to add/set the respective configurations</p> <p><code>--update</code> use with tagrules options to update the respective configurations</p> <p><code>--view</code> use with schema/searchable/tagrules options to view the respective configurations</p> <p><code>--activitylog</code> configure activity logs for your space interactively</p>"},{"location":"cli/basic-features/#note_12","title":"Note","text":"<p>To use these features, your account needs access to the XYZ Maps Add-on Services. Learn more about XYZ Maps Add-on features here.</p>"},{"location":"cli/basic-features/#transform-csv-shp-and-gpx-to-geojson","title":"Transform csv, shp and gpx to geojson <p>The <code>here transform</code> command converts CSVs, shapefiles, XLS/XLSX, and GPX files to GeoJSON. Note this will generate raw GeoJSON and not save it to a space. The <code>upload</code> command uses <code>transform</code>.</p>","text":""},{"location":"cli/basic-features/#geocode-locations","title":"Geocode locations <p>The <code>here geocode</code> command takes an address string and uses the XYZ Geocoder to return a GeoJSON feature containing the coordinates. This returns raw GeoJSON and does not save it to a space.</p>","text":""},{"location":"cli/command-reference/","title":"XYZ Maps CLI Command Reference","text":"<p>In this section you can find all the supported commands and subcommands along with supported options.</p> <p>XYZ CLI is not fully updated</p> <p>XYZ CLI is currently being updated to reflect the fork and resulting changes in moving to a free and open source version of XYZ Maps. </p>"},{"location":"cli/command-reference/#xyzmaps","title":"xyzmaps","text":"<pre><code>Commands:\n  space|xs [list|create|upload]             work with XYZ Maps spaces\n  transform|tf [csv2geo|shp2geo|gpx2geo]  convert from csv/shapefile/gpx to geojson\n  help [command]                          display help for command\n</code></pre>"},{"location":"cli/command-reference/#space","title":"space","text":"<p>XYZ Maps Space related operations</p> <pre><code>Commands:\n  list|ls [options]        information about available XYZ Maps Spaces\n  analyze [options] &lt;id&gt;   property based analysis of the content of the\n                           given [id]\n  hexbin [options] &lt;id&gt;    create fixed height hexbins (and their centroids)\n                           using points in a XYZ Maps space, and upload them to\n                           another space\n  show [options] &lt;id&gt;      shows the content of the given [id]\n  delete [options] &lt;id&gt;    delete the XYZ Maps Space with the given id\n  create [options]         create a new XYZ Maps Space\n  clear [options] &lt;id&gt;     clear data from XYZ Maps Space\n  token [options]          list all XYZ Maps tokens\n  upload [options] [id]    upload GeoJSON, CSV, or a Shapefile to the given\n                           id -- if no spaceID is given, a new Space will be\n                           created\n  config [options] [id]    configure/view advanced XYZ Maps features for\n                           space\n  join [options] &lt;id&gt;      {XYZ Maps Add-on} create a new virtual XYZ Maps\n                           space with a CSV and a Space with geometries,\n                           associating by feature ID\n  virtualize|vs [options]  {XYZ Maps Add-on} create a new virtual XYZ Maps\n                           space\n  gis [options] &lt;id&gt;       {XYZ Maps Add-on} perform gis operations with\n                           Space data\n  help [command]           display help for command\n</code></pre>"},{"location":"cli/command-reference/#create","title":"create","text":"<p>Create a new XYZ Maps Space.</p> <pre><code>Options:\n  -t, --title [title]       Title for Space\n  -d, --message [message]   Short description\n  -s, --schema [schemadef]  set json schema definition (local filepath / http\n                            link) for your Space, all future data for this\n                            Space will be validated for the schema\n  -h, --help                display help for command\n</code></pre>"},{"location":"cli/command-reference/#list","title":"list","text":"<p>Information about available XYZ Maps spaces</p> <pre><code>Options:\n  -r, --raw          show raw Space definition\n  --filter &lt;filter&gt;  a comma separted strings to filter Spaces\n  -p, --prop &lt;prop&gt;  property fields to include in table (default: [])\n  -h, --help         display help for command\n</code></pre>"},{"location":"cli/command-reference/#show","title":"show","text":"<p>Shows the contents of the given XYZ Maps Space.</p> <pre><code>Options:\n  -l, --limit &lt;limit&gt;        Number of objects to be fetched\n  -o, --offset &lt;offset&gt;      The offset / handle to continue the iteration\n  -t, --tags &lt;tags&gt;          Tags to filter on\n  -r, --raw                  show raw Space content\n  --all                      iterate over entire Space to get entire\n                             data of space, output will be shown on the console\n                             in geojson format\n  --geojsonl                 to print output of --all in geojsonl format\n  -c, --chunk [chunk]        chunk size to use in --all option, default 5000\n  -p, --prop &lt;prop&gt;          selection of properties, use p.&lt;FEATUREPROP&gt; or\n                             f.&lt;id/updatedAt/tags/createdAt&gt;\n  -w, --web                  display Space on xyzmaps.github.io/geojson-tool/\n  -v, --vector               inspect and analyze using XYZ Maps Space Invader\n                             on xyzmaps.github.io/xyz-space-invader\n  -x, --permanent            generate a permanent token for --web and --vector option\n  -s, --search &lt;propfilter&gt;  search expression in \"double quotes\", use single\n                             quote to signify string value,  use\n                             p.&lt;FEATUREPROP&gt; or f.&lt;id/updatedAt/tags/createdAt&gt;\n                             (Use '+' for AND , Operators : &gt;,&lt;,&lt;=,&lt;=,=,!=)\n                             (use comma separated values to search multiple\n                             values of a property) {e.g.,\n                             \"p.name=John,Tom+p.age&lt;50+p.phone='9999999'+p.zipcode=123456\"}\n  --spatial                  indicate to make spatial search on the space\n  --radius &lt;radius&gt;          make a radius spatial search using --center, \n                             or thicken an input line or polygon (in meters)\n  --center &lt;center&gt;          comma separated, double quoted lon,lat values to specify the\n                             center point for radius search\n  --feature &lt;feature&gt;        comma separated spaceid,featureid values to\n                             specify reference geometry (taken from feature)\n                             for spatial query\n  --geometry &lt;geometry&gt;      geometry file to upload for spatial query (single\n                             feature in geojson file)\n  -h, --help                 display help for command\n</code></pre>"},{"location":"cli/command-reference/#upload","title":"upload","text":"<p>Upload GeoJSON, CSV, or a Shapefile to the given Space -- if no spaceID is given, a new space will be created. GeoJSON feature IDs will be respected unless you override with -o or specify with -i; pipe GeoJSON via stdout using | xyzmaps space upload spaceid</p> <pre><code>  -f, --file &lt;file&gt;               comma separated list of local GeoJSON,\n                                  GeoJSONL, Shapefile, CSV, GPX, or XLS/X files (or\n                                  GeoJSON/CSV URLs); use a directory path and\n                                  --batch [filetype] to upload all files of\n                                  that type within a directory\n  -c, --chunk [chunk]             chunk size, default 200 -- use smaller values\n                                  (1 to 10) to allow safer uploads of very\n                                  large geometries (big polygons, many\n                                  properties), use higher values (e.g., 500 to\n                                  5000) for faster uploads of small geometries\n                                  (points and lines, few properties)\n  -t, --tags [tags]               fixed tags for features uploaded to the XYZ Maps space\n  --token &lt;token&gt;                 a external token to upload data to another\n                                  user's Space\n  -x, --lon [lon]                 longitude field name\n  -y, --lat [lat]                 latitude field name\n  -z, --point [point]             points field name with coordinates like\n                                  (Latitude,Longitude) e.g., (37.7,-122.4)\n  --lonlat                        parse a -\u2014point/-z csv field as (lon,lat)\n                                  instead of (lat,lon)\n  -p, --ptag [ptag]               property name(s) to be used to add tags,\n                                  property_name@value, best for a small number of\n                                  quantitative values\n  -i, --id [id]                   property name(s) to be used as the feature ID\n                                  (must be unique) -- multiple values can be\n                                  comma separated\n  -a, --assign                    interactive mode to analyze and select fields\n                                  to be used as tags and unique feature IDs\n  -o, --override                  override existing GeoJSON feature ID and \n                                  generate property hash as feature ID\n  -s, --stream                    streaming support for upload  and/or large\n                                  csv and geojson uploads using concurrent\n                                  writes, tune chunk size with -c\n  -d, --delimiter [,]             alternate delimiter used in CSV (default:\n                                  \",\")\n  -q, --quote [\"]                 quote used in CSV (default: \"\\\"\")\n  -e, --errors                    print data upload errors\n  --string-fields &lt;stringFields&gt;  property name(s) of CSV string fields *not*\n                                  to be automatically converted into numbers or\n                                  booleans (e.g., number-like census geoids,\n                                  postal codes with leading zeros)\n  --groupby &lt;groupby&gt;             consolidate multiple rows of a CSV into a\n                                  single feature based on a unique ID\n                                  designated with -i; values of each row within\n                                  the selected column will become top level\n                                  properties within the consolidated feature\n  --promote &lt;promote&gt;             comma separated column names which should not be nested within a top level property generated consolidated by --groupby\n  --flatten                       stores the --groupby consolidated output in flattened string separated by colon (:) instead of a nested object\n  --date &lt;date&gt;                   date-related property name(s) of a feature to\n                                  be normalized as a ISO 8601 datestring\n                                  (datahub_iso8601_[propertyname]), and unix\n                                  timestamp (datahub_timestamp_[propertyname]\n  --datetag [datetagString]       comma separated list of granular date tags to\n                                  be added via --date. possible options - year,\n                                  month, week, weekday, year_month, year_week,\n                                  hour\n  --dateprops [datepropsString]   comma separated list of granular date\n                                  properties to be added via --date. possible\n                                  options - year, month, week, weekday,\n                                  year_month, year_week, hour\n  --noCoords                      upload CSV files with no coordinates,\n                                  generates null geometry (best used with -i\n                                  and virtual spaces)\n  --history [history]             repeat commands previously used to upload\n                                  data to a space; save and recall a specific\n                                  command using \"--history save\" and \"--history\n                                  fav\"\n  --batch [batch]                 upload all files of the same type within a\n                                  directory; specify \"--batch\n                                  [geojson|geojsonl|csv|shp|gpx]\" (will inspect\n                                  shapefile subdirectories). select directory\n                                  with -f\n  -h, --help                      display help for command\n</code></pre>"},{"location":"cli/command-reference/#clear","title":"clear","text":"<p>Clear data from a XYZ Maps Space.</p> <pre><code>Options:\n  -t, --tags &lt;tags&gt;  tags for the Space\n  -i, --ids &lt;ids&gt;    ids for the Space\n  --force            skip the confirmation prompt\n  -h, --help         display help for command\n</code></pre>"},{"location":"cli/command-reference/#delete","title":"delete","text":"<p>Delete a given Space.</p> <pre><code>Options:\n  --force          skip the confirmation prompt\n  -h, --help       display help for command\n</code></pre>"},{"location":"cli/command-reference/#config","title":"config","text":"<p>Configure/view advanced XYZ Maps features for a Space.</p> <pre><code>Options:\n  --shared &lt;flag&gt;             set your space as shared / public (default is\n                              false)\n  --readonly &lt;flag&gt;.          set your space as readOnly (default is false)\n  -t,--title [title]          set title for the Space\n  -d,--message [message]      set description for the Space\n  -c,--copyright [copyright]  set copyright text for the Space\n  --cacheTTL &lt;cacheTTL&gt;       set cacheTTL value for the Space with valid\n                              number\n  --stats                     see detailed space statistics\n  -r, --raw                   show raw json output\n  -s,--schema [schemadef]     view or set schema definition (local filepath /\n                              http link) for your Space, applicable on future\n                              data, use with add/delete/update\n  --searchable                view or configure searchable properties of a\n                              Space, use with add/delete/update\n  --tagrules                  add, remove, view the conditional rules to tag\n                              your features automatically, use with\n                              add/delete/update -- at present all tag rules\n                              will be applied synchronously before features are\n                              stored ( mode : sync )\n  --delete                    use with schema/searchable/tagrules options to\n                              remove the respective configurations\n  --add                       use with schema/searchable/tagrules options to\n                              add/set the respective configurations\n  --update                    use with tagrules options to update the\n                              respective configurations\n  --view                      use with schema/searchable/tagrules options to\n                              view the respective configurations\n  --activitylog               configure activity logs for your Space\n                              interactively\n  --console                   opens web console for XYZ Maps\n  -h, --help                  display help for command\n</code></pre>"},{"location":"cli/command-reference/#virtualize","title":"virtualize","text":"<p>Create a new virtual Space.</p> <pre><code>Options:\n  -t, --title [title]         Title for virtual Space\n  -d, --message [message]     set description for the Space\n  -g, --group [spaceids]      Group the Spaces (all objects of each space will\n                              be part of the response) - enter comma separated\n                              Space ids\n  -a, --associate [spaceids]  Associate the Spaces. Features with same id will\n                              be merged into one feature. Enter comma separated\n                              space ids [space1,space2] -- space1 properties\n                              will be merged into space2 features.\n  -h, --help                  display help for command\n</code></pre>"},{"location":"cli/command-reference/#join","title":"join","text":"<p>Create a new virtual Space with a CSV and a space with geometries, associating by feature ID.</p> <pre><code>Options:\n  -f, --file &lt;file&gt;               csv to be uploaded and associated\n  -i, --keyField &lt;keyField&gt;       field in csv file to become feature id\n  -x, --lon [lon]                 longitude field name\n  -y, --lat [lat]                 latitude field name\n  -z, --point [point]             points field name with coordinates like\n                                  (Latitude,Longitude) e.g., (37.7,-122.4)\n  --lonlat                        parse a \u2014point/-z csv field as (lon,lat)\n                                  instead of (lat,lon)\n  -d, --delimiter [,]             alternate delimiter used in csv (default:\n                                  \",\")\n  -q, --quote [\"]                 quote used in csv (default: \"\\\"\")\n  --token &lt;token&gt;                 a external token to create another user's\n                                  Spaces\n  -s, --stream                    streaming data for faster uploads and large\n                                  csv support\n  --string-fields &lt;stringFields&gt;  property name(s) of CSV string fields *not*\n                                  to be automatically converted into numbers or\n                                  booleans (e.g., number-like census geoids,\n                                  postal codes with leading zeros)\n  --groupby &lt;groupby&gt;             consolidate multiple rows of a CSV into a\n                                  single feature based on a unique ID\n                                  designated with -i; values of each row within\n                                  the selected column will become top level\n                                  properties within the consolidated feature\n  -h, --help                      display help for command\n</code></pre>"},{"location":"cli/command-reference/#hexbin","title":"hexbin","text":"<p>Create fixed height hexbins (and their centroids) using points in a Space, and upload them to another Space.</p> <pre><code>Options:\n  -c, --cellsize &lt;cellsize&gt;      size of hexgrid cells in meters,\n                                 comma-separate multiple values\n  -i, --ids                      add IDs of features counted within the hexbin\n                                 as an array in the hexbin's feature property\n  -p, --groupBy &lt;groupBy&gt;        name of the feature property by which hexbin\n                                 counts will be further grouped\n  -a, --aggregate &lt;aggregate&gt;    name of the feature property used for\n                                 aggregating sum value of all the features\n                                 inside a hexbin\n  -r, --readToken &lt;readToken&gt;    token of another user's source space, from\n                                 which points will be read\n  -w, --writeToken &lt;writeToken&gt;  token of another user's target space to which\n                                 hexbins will be written\n  -t, --tags &lt;tags&gt;              only make hexbins for features in the source\n                                 space that match the specific tag(s),\n                                 comma-separate multiple values\n  -b, --bbox [bbox]              only create hexbins for records inside the\n                                 bounding box specified either by individual\n                                 coordinates provided interactively or as\n                                 minLon,minLat,maxLon,maxLat (use \u201c\\ \u201c to\n                                 escape a bbox with negative coordinate(s))\n  -l, --latitude &lt;latitude&gt;      latitude which will be used for converting\n                                 cellSize from meters to degrees\n  -z, --zoomLevels &lt;zoomLevels&gt;  hexbins optimized for zoom levels (1-18) -\n                                 comma separate multiple values(-z 8,10,12) or\n                                 dash for continuous range(-z 10-15)\n  -h, --help                     display help for command\n</code></pre>"},{"location":"cli/command-reference/#gis","title":"gis","text":"<p>Perform GIS operations with space data.</p> <pre><code>Options:\n  --centroid             calculates centroids of Line and Polygon features and\n                         uploads in a different Space\n  --length               calculates length of LineString features and adds new properties\n  --area                 calculates area of Polygon features and adds new properties\n  --voronoi              calculates Voronoi Polygons of point features and\n                         uploads in different Space\n  --tin                  calculates Delaunay Polygons of point features and\n                         uploads in different Space\n  --property &lt;property&gt;  populates Delaunay polygons' properties based on the\n                         specified feature property\n  -c, --chunk [chunk]    chunk size, default 20 -- default for polygons,\n                         increase for faster point feature uploads\n  -t, --tags &lt;tags&gt;      source Space tags to filter on\n  --samespace            option to upload centroids/voronoi/tin to same Space,\n                         use tags to filter\n  -h, --help             display help for command\n</code></pre>"},{"location":"cli/command-reference/#transform","title":"transform","text":"<p>Transform various file formats to geojson.</p> <pre><code>Commands:\n  csv2geo [options] &lt;path&gt;  convert csv to geojson\n  shp2geo &lt;path&gt;            convert shapefile to geojson\n  gpx2geo &lt;path&gt;            convert gpx to geojson\n  help [command]            display help for command\n</code></pre>"},{"location":"cli/command-reference/#csv2geo","title":"csv2geo","text":"<p>Convert a csv file to geojson.</p> <pre><code>Options:\n  -y, --lat [lat]                 latitude field name\n  -x, --lon [lon]                 longitude field name\n  -d, --delimiter [,]             delimiter used in csv (default: \",\")\n  -q, --quote [\"]                 quote used in csv (default: \"\\\"\")\n  -z, --point [point]             points field name\n  --string-fields &lt;stringFields&gt;  comma seperated property names which needs to\n                                  be converted as String even though they are\n                                  numbers or boolean e.g. postal code\n  -h, --help                      display help for command\n</code></pre>"},{"location":"cli/datahub_add-on/","title":"XYZ Maps Adanced concepts","text":""},{"location":"cli/datahub_add-on/#property-search","title":"Property Search","text":"<p>Property Search indexes data in your Spaces and lets you use the API to search by property value.</p> <p>This is currently available in the CLI and the API. Property Search is available for all Spaces with less than 10,000 features. In order to use Property Search on more than 10,000 features and for all properties you want, you'll need a XYZ Maps Add-on account.</p> <p>More details are available in the CLI documentation and the Swagger API <code>/search</code> endpoint.</p>"},{"location":"cli/datahub_add-on/#virtual-spaces","title":"Virtual Spaces","text":"<p>Virtual Spaces let you group or associate geospatial features in multiple Spaces and present them as a single Space.</p> <p><code>group</code> acts as an alias, presenting multiple XYZ Maps spaces via a single Space ID.</p> <p><code>associate</code> merges feature properties from one XYZ Maps space into features in a second space based on feature ID matches. This allows you to import statistical data and merge it with pre-existing polygons on the fly.</p> <p>This is currently available in the CLI and API. For more details, see the CLI documentation</p>"},{"location":"cli/datahub_add-on/#gis-functions","title":"GIS Functions","text":"<p>Use the CLI to calculate the area of a polygon or length of line and save it as a new property. Generate centroids of polygons. Create Voronoi polygons or Delaunay triangles from sets of points. For more details, see the CLI documentation</p>"},{"location":"cli/datahub_add-on/#hexbins","title":"Hexbins","text":"<p>Hexbins are a data simplification method that makes it easier to visualize large datasets of point features at low zoom levels (continent, country, state/province). A series of hexagon grids are created and the points that fall inside each are counted and written to a new space, and statistics are calculated across the hexbin grid.</p> <p>These hexagons, their centroids, and their statistics can be quickly displayed in place of the raw data that might overwhelm a renderer. Default colors indicating relative \"occupancy\" are generated for convenience of display.</p> <p>Hexbins are tagged by zoom level and width and type, making it easy to extract one set from the hexbin space for display and comparison.</p> <p>You can learn more about hexbins and how to display them in this tutorial and the CLI documentation</p>"},{"location":"cli/datahub_add-on/#rule-based-tags","title":"Rule Based Tags","text":"<p>Create tags using conditional rules based on the values of properties in features. This makes it easy to view and extract data from your XYZ Maps space.</p>"},{"location":"cli/datahub_add-on/#schema-validation","title":"Schema Validation","text":"<p>Apply a schema validation JSON file to space to ensure that only valid data is uploaded to a XYZ Maps space.</p> <p>The schema definition can be in the form of a web address or a local schema JSON file.</p>"},{"location":"cli/datahub_add-on/#schema-validation-is-not-transactional","title":"Schema validation is not transactional","text":"<p>The schema validation will be non-transactional (<code>Transaction = FALSE</code>) and will upload all the objects which pass schema definition and display the list of objects rejected.</p>"},{"location":"cli/datahub_add-on/#activity-log","title":"Activity Log","text":"<p>See what's been written, modified, and deleted in a Space. The changes are written to a second Space, with options to show</p> <ul> <li><code>FEATURE_ONLY</code> (default): Just the full new version of the feature, with the ID moved. No diff to previous.</li> <li><code>DIFF_ONLY</code>: Head (newest object) is the full feature. All older versions are only a Diff to the successor. In order from newest to oldest: Obj1: Newest, full Feature + Diff to Obj2-&gt; Obj2: Diff to Obj3 -&gt; Obj3: Diff to Obj4 -&gt; Obj4 \u2026</li> <li><code>FULL</code>: Every feature in Activity Log is full feature + Diff to previous.</li> </ul>"},{"location":"cli/tools/","title":"XYZ Maps Tools and Integrations","text":"<p>You can acess the XYZ Maps API using a number of different SDKs and APIs.</p>"},{"location":"cli/tools/#xyz-spaces-for-python","title":"XYZ Spaces for Python","text":"<p>https://github.com/xyzmaps/xyz-spaces-python</p> <p>This open source Python package allows to interact with your XYZ Maps Spaces and features on a given Hub using a higher level programmatic interface that wraps the RESTful API. Using this package you can:</p> <ul> <li>Create, read, list, update, share, delete spaces (also: get Space info and stats).</li> <li>Add, read, update, iterate, search, cluster (hex/quad bins), delete features.</li> <li>Search features by ID, tag, property, bbox, tile, radius, geometry.</li> <li>Access H3 hexbin and quadbin clustering, virtual spaces, extended property search, and more.</li> </ul>"},{"location":"cli/tools/#installation","title":"Installation","text":"<p>This package can be installed with <code>pip</code> or <code>conda</code> from various sources:</p> <ul> <li> <p>Install with conda from the Anaconda conda-forge channel:</p> <pre><code>conda install -c conda-forge xyzspaces\n</code></pre> </li> <li> <p>Install from the Python Package Index:</p> <pre><code>pip install xyzspaces\n</code></pre> </li> <li> <p>Install from its source repository on GitHub:</p> <pre><code>pip install -e git+https://github.com/xyzmaps/xyz-spaces-python#egg=xyzspaces\n</code></pre> </li> </ul>"},{"location":"cli/tools/#documentation","title":"Documentation","text":"<p>The detailed documentation is available here.</p>"},{"location":"cli/space-invader/","title":"Space Invader","text":"<p>Space Invader lets you inspect and analyze data, properties, and tags in a Space.</p> <p>It uses the tile query feature of the Tangram.js API to read, count and store all tags in the vector tiles loaded for map display, saving a second query to the XYZ Maps endpoint.</p> <p>It can also read and analyze properties of features in the viewport, and dynamically assign color ranges based on their ranges (for numbers), or counts (of discrete values). It can calculate basic statistics on values in a space and use those to help display appropriate color ramps.</p> <p>From the XYZ Maps <code>/statistics</code> endpoint, it reads the number of features and the size of the space along with the bounding box of the data, and attempts to center the map there (unless the map is already centered within the bbox).</p> <p>Multiple color palettes can be applied to property ranges and ranks, and it is designed to be easy to add more palettes.</p> <p>Multiple basemaps are available. Basemap properties such as roads and buildings can be toggled on and off. The size of points and lines can also be increased and decreased to help visualize data sets of various density.</p> <p>Space Invader can show hundreds of thousands to millions of features, though this depends greatly on geographic density of data, zoom level, and kind and complexity of the geometries involved. In general you will be able to show more points and lines than polygons at any given zoom level. We're also working on ways to intelligently handle dense data sets using tags and hexbins.</p>"},{"location":"cli/space-invader/#to-get-started","title":"To get started","text":"<ul> <li>install the XYZ Maps CLI</li> <li>upload a GeoJSON file, CSV or Shapefile to a Space, and add tags based on properties</li> <li>open Space Invader from your account using <code>xyzmaps space show SPACEID -v</code></li> </ul> <p>Here are some examples to get you familiar with the interface and what Space Invader can do:</p> <p>2018 Gubernatorial California Primary results (LA Times)</p> <p>The Los Angeles Times gathers, normalizes and aggregates precinct level election data from counties in Southern California. Here is data for the 2018 Gubernatorial Primary from the 7500 precincts in Los Angeles County, Orange County, and San Diego County.</p> <p></p> <p>There are several different visualization modes that can help get you familiar with your data and prepare it for visualization. note: these URLs are based on the latest branch -- this will change, and the root URL (for now) is xyz-space-invader.netlify.com</p>"},{"location":"cli/space-invader/#simple-color-selection","title":"Simple color selection","text":""},{"location":"cli/space-invader/#x-ray-mode","title":"X-ray mode","text":"<p>X-ray mode shows you an overview of the geometries in the space. This is especially useful when you have overlapping geometries, or different types of geometries, or you just want to see the coverage of the data set.</p> <p>https://xyz-space-invader.netlify.com/?space=ylnRzWDL&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=xray#11.6/34.0256/-118.3172</p>"},{"location":"cli/space-invader/#note","title":"Note","text":"<p>You can toggle polygon outlines on and off (either press 'o' or click on 'outlines' in the  top left panel).</p>"},{"location":"cli/space-invader/#hash-mode","title":"Hash mode","text":"<p>This generates unique colors based on a hash of all a feature's properties. This is useful for distinguishing adjacent or nearby features. Note however that this does not prevent similar colors from being adjacent to each other.</p> <p>https://xyz-space-invader.netlify.com/?space=ylnRzWDL&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=hash&amp;points=0&amp;lines=0&amp;highlight=0&amp;property=winner&amp;palette=viridisInferno&amp;paletteFlip=false#13.795833333333333/34.0581/-118.2976</p>"},{"location":"cli/space-invader/#coloring-features-by-property-value","title":"Coloring features by property value","text":"<p>There are several ways to generate colors by the value of an individual property. Once the mode is selected, click on a property in the center left pane to analyze it.</p>"},{"location":"cli/space-invader/#property","title":"Property","text":"<p>This generates a simple color hash of the values of the selected property.</p> <p>https://xyz-space-invader.netlify.com/?space=ylnRzWDL&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=property&amp;points=0&amp;lines=0&amp;highlight=0&amp;property=winner&amp;palette=viridisInferno&amp;paletteFlip=false#11.820833333333333/34.0372/-118.2583</p> <p>Color choices are consistent for any specific property value, but this does not prevent similar colors from being adjacent to each other.</p>"},{"location":"cli/space-invader/#range","title":"Range","text":"<p>This is ideal for properties with continuous numerical values (temperature, price, area, vote count, etc). It will apply a color palette from the minimum to maximum values of the property seen in the viewport.</p> <p></p> <p>https://xyz-space-invader.netlify.com/?space=ylnRzWDL&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=range&amp;points=0&amp;lines=0&amp;highlight=0&amp;property=gov_votes&amp;palette=viridisInferno&amp;paletteFlip=false#11.050000000000011/34.0306/-118.1441</p> <p>You can choose between several different color palettes, and you can also \"flip\" each palette, depending on if you want to emphasize the lower or higher values with 'brighter' values.</p> <p>Individual values of properties in the viewport can be sorted either by count or by value. (Note that this can be a very long list, depending on the kind or size of the data.)</p> <p>Note that the color of an individual feature may change as you pan or zoom the map as different <code>min</code> and <code>max</code> values become visible in the viewport. This allows better inspection of otherwise subtle differences between \"local\" values, especially when \"global\" <code>min</code> and <code>max</code> is extreme compared to local values. (However, we recognize that being able to compare local values to global <code>min</code> and <code>max</code> values is also necessary. This will come in a later release.)</p>"},{"location":"cli/space-invader/#rank","title":"Rank","text":"<p>This mode sorts values by their frequency in the viewport. This is best for a relatively a discrete number of values, usually text.</p> <p></p>"},{"location":"cli/space-invader/#statistics","title":"Statistics","text":"<p>Basic statistics are generated for the values of the selected property, including, min, max, median, mean, standard deviation, and sigma.</p> <p>A dynamically generated histogram is generated in order show how the data is distributed in the viewport.</p> <p>A quick note on outliers: In many datasets, a few outliers can cause a max so high that the majority of features around the median and mean get 'squished' into the opposite end of the color palette. You can see the high and the low, but one outlying high value may force thousands of values to be in one 'low' colors. For the time being, we limit the 'filtered' max to be four sigmas above the mean. This in effect 'squishes' the outliers into the high end of the color range, while the majority of the values get more room in the color palette. More fine-grained controls for manipulating the min and max values to handle various value ranges are in the works.</p> <p>The benefit of this approach can be seen in this dataset of AirBnB listings:</p> <p>https://xyz-space-invader.netlify.com/?space=40ILezn0&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=range&amp;points=3&amp;lines=0&amp;highlight=0&amp;tags=listings&amp;property=price&amp;palette=viridis&amp;paletteFlip=false#14.200000000000005/34.0837/-118.3770</p> <p></p> <p>Most properties in the Los Angeles area are under $250 a night, but a few listings are as high as $10,000 or even $25,000. By considering a 'filtered max' closer to the median and mean, a meaningful spread of colors can be shown, as opposed to just two for very high and very low.</p> <p>More interesting views of AirBnB listings data include:</p> <ul> <li>single rooms vs whole houses (rank or property)</li> <li>prices (range)</li> <li>names (rank)</li> </ul> <p>US Census data by income (California and San Francisco)</p> <p></p> <p>https://xyz-space-invader.netlify.com/?space=zK3K5S6b&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=none&amp;buildings=0&amp;points=1&amp;lines=1&amp;outlines=0&amp;highlight=0&amp;roads=0&amp;water=0&amp;colors=range&amp;tags=zip&amp;property=B19013001&amp;palette=viridisPlasma&amp;paletteFlip=false#7.775416573527989/37.645/-121.339</p> <p>Filter by tags to show data by</p> <ul> <li>county</li> <li>zip code</li> <li>census tract (SF only)</li> </ul> <p>The income of certain counties and zip codes is so far above the average that it triggers the 4-sigma filter.</p>"},{"location":"cli/space-invader/#tags-wip","title":"Tags (WIP)","text":"<p>Excavation Permits in San Francisco, by rank:</p> <p></p> <p>https://xyz-space-invader.netlify.com/?space=ZLvdcZgi&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill-dark&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=rank&amp;points=0&amp;lines=0&amp;highlight=0&amp;property=Permit_Reason&amp;palette=viridis&amp;paletteFlip=false#12.973739133520723/37.7546/-122.4372</p> <p>AirBnB listings in the Hollywood Hills:</p> <p></p> <p>https://xyz-space-invader.netlify.com/?space=40ILezn0&amp;token=AOsE9k2EdCdT8lEX12PDZ38&amp;basemap=refill&amp;buildings=0&amp;outlines=1&amp;roads=1&amp;water=0&amp;colors=range&amp;points=0&amp;lines=0&amp;highlight=0&amp;tags=neighbourhood%40hollywood_hills%2Blistings&amp;property=price&amp;palette=viridis&amp;paletteFlip=true#13.779166666666672/34.1220/-118.3403</p>"},{"location":"cli/space-invader/#feedback","title":"Feedback","text":"<p>If you have suggestions or run into bugs, please file a Github issue.</p>"},{"location":"cli/topics/cli/","title":"Commands","text":"<p>In this section we give you a quick overview of the most commonly used commands to interact with XYZ Spaces from the XYZ Maps CLI.</p>"},{"location":"cli/topics/cli/#supported-commands","title":"Supported Commands","text":"<p>XYZ Maps CLI is built to be modular and extensible, so it is entirely possible that when you use the tool it has already learned a couple of new tricks.</p> <p>The general structure is that you call the <code>here</code> command followed by command which essentially corresponds to the API you want to interact with or get more information from.</p>"},{"location":"cli/topics/cli/#help","title":"Help","text":"<p>You can always call up help on the XYZ Maps CLI either by not providing any parameter at all or by using the <code>--help</code> switch.</p> <pre><code>xyzmaps --help\n</code></pre>"},{"location":"cli/topics/cli/#spaces","title":"Spaces","text":"<p>The <code>space</code> command is used to interact with XYZ Spaces.</p>"},{"location":"cli/topics/cli/#list-all-spaces","title":"List all Spaces","text":"<p>To list all Spaces you have access to (with or without Schema Validation) you can use</p> <pre><code>xyzmaps space list\n</code></pre>"},{"location":"cli/topics/cli/#create-a-new-space","title":"Create a New Space","text":"<pre><code>xyzmaps space create -t \"sample test xyz\" -d \"sample creation\"\n</code></pre> <p>When you create a new Space, the SpaceID will be generated automatically.</p>"},{"location":"cli/topics/cli/#hint","title":"Hint","text":"<p>The <code>upload</code> command can also automatically generate a new space ID for you.</p>"},{"location":"cli/topics/cli/#options","title":"Options","text":"<p><code>-t &lt;title&gt;</code> title for space</p> <p><code>-d &lt;desc&gt;</code> description for space</p> <p><code>-s &lt;schema definition&gt;</code> Applies a schema validation json file to space. The schema definition can be in the form of a web address or a local schema json file. Features that do not match this schema will not be uploaded. </p>"},{"location":"cli/topics/cli/#hint_1","title":"Hint","text":"<p>When you have many spaces, you will be glad you added meaningful titles and descriptions.</p>"},{"location":"cli/topics/cli/#uploadupdate-data-to-a-space","title":"Upload/Update Data to a Space","text":""},{"location":"cli/topics/cli/#options_1","title":"Options","text":"<p><code>-f, --file &lt;file&gt;</code>    GeoJSON, GeoJSONL, CSV or Shapefile to upload</p> <p><code>-c, --chunk [chunk]</code>  chunk size (adjusts the number of features uploaded at once)</p> <p><code>-t, --tags [tags]</code>    tags for the xyz space (used to filter data from the API)</p> <p><code>-x, --lon [lon]</code>      choose longitude CSV field name, if not well known</p> <p><code>-y, --lat [lat]</code>     latitude CSV field name, if not well known</p> <p><code>-z, --point [poiunt]</code> points field name, e.g. <code>(lat,lon)</code></p> <p><code>-p, --ptag [ptag]</code>    property name(s) whose values will to be used to generate tags</p> <p><code>-i, --id [id]</code>        property name(s) to be used as the feature ID</p> <p><code>-a, --assign</code>         list a sample of properties, allowing you to assign fields to be selected as tags</p> <p><code>-u, --unique</code>         option to enforce uniqueness to the id by creating a hash of features to use that as id</p> <p><code>-o, --override</code>       allow duplicate features to be uploaded even if they share the same feature id</p> <p><code>-s, --stream</code>        speed up CSV and GeoJSON uploads. required to stream large geojson and csv files (&gt; 200 MB) (<code>-a</code> unavailable with streaming, use <code>-p</code>)</p> <p><code>-h, --help</code>           output usage information</p>"},{"location":"cli/topics/cli/#upload-geojson","title":"Upload GeoJSON","text":"<p>Upload a GeoJSON file to a new space. XYZ will automatically generate a space ID and display it for you.</p> <pre><code>xyzmaps space upload -f /Users/xyz/data.geojson\n</code></pre> <p>Upload a GeoJSON file to an existing space.</p> <pre><code>xyzmaps space upload SPACE_ID -f /Users/xyz/data.geojson\n</code></pre>"},{"location":"cli/topics/cli/#hint_2","title":"Hint","text":"<p>Use streaming for faster uploads. Using streaming via the <code>upload -s</code> option will significantly reduce the time required to  upload GeoJSON files. The default non-streaming mode is useful for troubleshooting. If your features are small, you can also try increasing the chunk size using <code>-c</code>.</p>"},{"location":"cli/topics/cli/#note","title":"Note","text":"<p>Feature IDs: XYZ requires that every feature in a space has a unique id. (This lets you access features in a space using the API.) If a GeoJSON feature does not have an ID (a common occurance), XYZ's default upload behavior is to create one based on a hash of the feature's property. (If you have duplicate records in a dataset at the same location, only the first will be uploaded.) If you are certain that your dataset has a well-managed set of unique feature IDs, use <code>upload -o</code> to have XYZ use them. If you use <code>-o</code> to upload a new dataset, and a new feature has the same ID as an existing feature, XYZ will consider it an update and overwrite the existing feature with  the new feature. Many public datasets often have a \"unique\" set of feature IDs that are simply incremental integers which can lead to feature replacement that you probably didn't want.</p>"},{"location":"cli/topics/cli/#upload-a-csv-file","title":"Upload a CSV file","text":"<pre><code>xyzmaps space upload -f /Users/xyz/data.csv\n</code></pre> <p>XYZ will attempt to choose the columns containing the latitude and longitude fields based on well known names including:</p> <pre><code>y, ycoord, ycoordinate, coordy, coordinatey, latitude, lat\nx, xcoord, xcoordinate, coordx, coordinatex, longitude, lon, lng, long, longitud\n</code></pre> <p>If your csv uses different names, you can specify the latitude field with <code>-y</code> and longitude with <code>-x</code>.</p> <pre><code>xyzmaps space upload -f /Users/xyz/data.csv -x the_lon -y the_lat\n</code></pre> <p>If the csv combines coordinates into a single field, such as</p> <pre><code>37.7,-122.2\n</code></pre> <p>or</p> <pre><code>(37.7,-122.2)\n</code></pre> <p>you can specify the name of that column with <code>-z</code>.</p> <pre><code>xyzmaps space upload -f /Users/xyz/data.csv -z points\n</code></pre> <p>Rows that have <code>0,0</code> or <code>null</code> values in the designated latitude and longitude columns will be tagged with <code>null_island</code>. They will not be displayed on the map, but you can access them via the API (or in geojson.tools) by appending <code>&amp;tags=null_island</code> so you can inspect and repair the records.</p> <p>If the lat/lon columns contain letters or other invalid characters, the features are tagged with <code>invalid</code>.</p> <pre><code>    Using streaming via the `upload -s` option will significantly reduce the time required to upload CSV files of any size. Standard, non-streaming mode is useful for troubleshooting.\n</code></pre> <pre><code>The CLI converts a CSV row into a GeoJSON feature before uploading it. If you want values in a CSV columns to be the GeoJSON feature ID, use `-i columnName.`\n</code></pre>"},{"location":"cli/topics/cli/#hint_3","title":"Hint","text":"<p>Use streaming for faster uploads.</p>"},{"location":"cli/topics/cli/#hint_4","title":"Hint","text":"<p>Using properties as the feature ID.</p>"},{"location":"cli/topics/cli/#chunking","title":"Chunking","text":"<p>You can adjust the \"chunk\" size when streaming an upload. This controls the number of features that the CLI sends to the API at a time. The default chunk size is 200 features.</p>"},{"location":"cli/topics/cli/#large-features","title":"Large Features","text":"<p>You may see upload errors from the CLI if your features are large, complex geometries. By decreasing the chunk size, you may still be able to upload these large features. Try <code>-c 100</code>, or even <code>-c 10</code> or <code>-c 1</code>. If you continue to see errors you may need to simplify the geometries before uploading them.</p>"},{"location":"cli/topics/cli/#small-features","title":"Small Features","text":"<p>If your features are small, like you might see in a GeoJSON file containing points or a CSV, you will see faster uploads if you increase the chunk size. For example, <code>-c 1000</code> will enable the CLI to upload 1000 features at a time. If the features are very simple, <code>-c 10000</code> may also be approproate. As long as the chunk size is below the size of the API gateway, this will speed up your upload. The CLI will notify you if there is an upload error. Note that if you need to restart your upload, existing features will not be duplicated.</p>"},{"location":"cli/topics/cli/#upload-and-stream-large-csv-and-geojson-files","title":"Upload and Stream Large CSV and GeoJSON Files","text":"<p>To upload very large CSV and GeoJSON files to your XYZ space, will will need to use <code>-s</code> -- this will stream the file and avoid Node.js memory errors. (It will also be considerably faster than the standard upload method.)</p> <pre><code>xyzmaps space upload YOUR_SPACE_ID -f /Users/xyz/big_data.csv -s\n</code></pre>"},{"location":"cli/topics/cli/#note_1","title":"Note","text":"<p>When a file is streamed with <code>-s</code> it is not loaded into memory and -a is not available  to preview and assign tags. You can specify tags using <code>-p</code>.</p>"},{"location":"cli/topics/cli/#info","title":"Info","text":"<p>xyzmaps space is a database. Databases trade off storage space for speed, and your data will always  take up more space in XYZ than it does in a static file. When a file is uploaded into an XYZ Space, features, their properties, and the geometries are broken out into multiple tables, indexed and tagged. All of this lets you query your geospatial data on demand, and access it dynamically as vector tiles. You can check the size of your XYZ Spaces in your account dashboard or the CLI. </p>"},{"location":"cli/topics/cli/#upload-a-shapefile","title":"Upload a Shapefile","text":"<pre><code>xyzmaps space upload -f /Users/dhatb/data.shp\n</code></pre> <p>Upload shapefile data to a Space.</p> <p>More tips in the Working with Shapefiles tutorial.</p>"},{"location":"cli/topics/cli/#note_2","title":"Note","text":"<p>Shapefiles cannot be streamed with <code>-s</code>.</p>"},{"location":"cli/topics/cli/#hint_5","title":"Hint","text":"<p>Instead of passing the content as a file with <code>-f</code> option you can also pipe the output  of  another command directly into the input stream of the XYZ Maps CLI like <code>cmd | xyzmaps space upload YOUR_SPACE_ID</code>.</p>"},{"location":"cli/topics/cli/#upload-with-a-unique-id","title":"Upload with a Unique ID","text":"<pre><code>xyzmaps space upload -f data.csv -i unique_id\n</code></pre> <p>Upload data to an XYZ space with a feature ID based on the feature's property <code>unique_id</code>. </p> <p>This feature should be used if your data has well-known and truly unique identifiers that you want to preserve. The XYZ API can query individual features by feature ID, so this can be a valuable method of accessing and updating data.</p> <p>By default, the CLI will generate a unique feature ID during upload based on a hash of the properties and geometry. </p>"},{"location":"cli/topics/cli/#note_3","title":"Note","text":"<p>Unique IDs are important for XYZ Pro features such as Virtual Spaces. </p>"},{"location":"cli/topics/cli/#warning","title":"Warning","text":"<p>Many GIS systems will simply assign incrementing integers as feature IDs to every file.  These can conflict across files.</p>"},{"location":"cli/topics/cli/#upload-and-assign-tags","title":"Upload and Assign Tags","text":"<p>Tags are special properties that can be added to a feature that makes it easy to query them from the XYZ API using the <code>&amp;tags=</code> parameter.</p>"},{"location":"cli/topics/cli/#note_4","title":"Note","text":"<p>XYZ Tags should be used selectively, ideally using Rule-Based Tags. Tags are not meant to be a replacement for  Property Search, as you  will be duplicating existing data in a record. </p>"},{"location":"cli/topics/cli/#assign-tags-interactively","title":"Assign Tags Interactively","text":"<pre><code>xyzmaps space upload -f file.geojson -a\n</code></pre> <p>Uploads data and allows users to select tags from a list of feature keynames, with a preview of the first few values. </p>"},{"location":"cli/topics/cli/#assign-tags-using-property-names","title":"Assign Tags Using Property Names","text":"<p><pre><code>xyzmaps space upload -f file.geojson -p treatment\n</code></pre> Uploads data and adds the value of the selected feature property as tag. These tags can be used to filter data when querying the xyzmaps space API. The tags will be stored as <code>propertyname@value</code>. This is most effective when the property consists of a limited number of qualitative values.</p>"},{"location":"cli/topics/cli/#response","title":"Response","text":"<pre><code>treatment@green_paint, treatment@sharrows, treatment@hit_post\n</code></pre>"},{"location":"cli/topics/cli/#show-contents-of-a-space","title":"Show Contents of a Space","text":"<pre><code>xyzmaps space show YOUR_SPACE_ID\n</code></pre> <p>Show the objects of a space in table, filter by tags or property values, or open the space in other tools.</p>"},{"location":"cli/topics/cli/#options_2","title":"Options","text":"<p><code>-l, --limit &lt;limit&gt;</code> Number of objects to be fetched</p> <p><code>-h, --handle &lt;handle&gt;</code> The handle to continue the iteration</p> <p><code>-t, --tags &lt;tags&gt;</code> Filter by tags</p> <p><code>-r, --raw</code> show raw GeoJSON content instead of table</p> <p><code>-s, --search &lt;propfilter&gt;</code> search feature properties </p> <p><code>-p, --prop &lt;prop&gt;</code> property fields to include in table, can be used multiple times</p> <p><code>-w --web</code> display xyz on http://geojson.tools</p> <p><code>-v --vector</code> inspect and anayze XYZ spaces using Tangram / XYZ Space Invader</p>"},{"location":"cli/topics/cli/#filter-by-tags","title":"Filter by Tags","text":"<p>Using <code>show</code> on a large space will generate a long table. You can see the raw GeoJSON of the first 5000 features using <code>-r</code>. This can also be very long. You may want to direct this output to a file.</p> <pre><code>xyzmaps space show spaceID -r &gt; my.geojson\n</code></pre> <p>If your space contains a few hundred to a few thousand features, you can open the space in geojson.tools, a data preview tool, using <code>show -w</code>. Larger spaces can be previewed in XYZ Space Invader, a Tangram-based tool from XYZ Labs, using <code>show -v</code>.</p> <p>You can filter tags from XYZ using tags with <code>-t</code>:</p> <p><code>xyzmaps space show spaceID -t my_tag</code> (records with <code>my_tag</code> will be printed in the console) <code>xyzmaps space show spaceID -w -t my_tag</code> (records with <code>my_tag</code> will be opened in geojson.tools) <code>xyzmaps space show spaceID -v -t my_tag</code> (records with <code>my_tag</code> will be opened in XYZ Space Invader)</p>"},{"location":"cli/topics/cli/#property-search","title":"Property Search","text":"<p>If a property has been indexed by XYZ, you can filter them with <code>-s</code> or <code>--search</code>. The property name must be prefixed by <code>p.</code>:</p> <pre><code>xyzmaps space show spaceID -s \"p.property_name&gt;value\"\nxyzmaps space show spaceID -s \"p.name=John,Tom+p.age&lt;50+p.phone='9999999'+p.zipcode=123456\" -w\n</code></pre> <ul> <li>Operators include <code>=,!=,&gt;,&gt;=,&lt;,&lt;=</code></li> <li>Search expressions must be enclosed in double quotes, e.g. <code>\"p.property_name&gt;value\"</code></li> <li>Use comma separated values to search multiple values of a property, e.g. <code>OR</code>. Use <code>+</code> for <code>AND</code>.</li> <li>Use single quotes to signify a string value, e.g. <code>\"p.property_name&gt;value='100'\"</code> vs <code>\"p.property_name&gt;value=100\"</code></li> <li>To access feature ID, timestamps, or tags, prefix them with <code>f.</code>, e.g. <code>f.id, f.updatedAt, f.tags f.createdAt</code></li> <li>When accessing Property Search via the API, the URL-safe arguments are <code>=</code>, <code>!=</code>, <code>=gt=</code>, <code>=gte=</code>, <code>=lt=</code>, <code>=lte=</code>.</li> </ul>"},{"location":"cli/topics/cli/#note_5","title":"Note","text":"<p>Property Search is available in spaces with fewer than 15,000 features by default.  For spaces larger than 15,000 features, a limited number will be indexed. To access more,  you will need an XYZ Pro license, learn more about XYZ Pro features here.  </p>"},{"location":"cli/topics/cli/#property-filters","title":"Property Filters","text":"<p>You can use <code>show -p</code> or <code>--prop</code> to filter the properties that get returned by the API. This is useful when your features have a large number of properties, and you only need to return some of them along with with the geometry.</p> <pre><code>xyzmaps space show -p p.property1,p.property2 -w\n</code></pre>"},{"location":"cli/topics/cli/#note_6","title":"Note","text":"<p>Your account needs access to the XYZ Pro Services.  Learn more about XYZ Pro features here.</p>"},{"location":"cli/topics/cli/#spatial-search","title":"Spatial Search","text":"<p>You can use <code>--spatial</code> to search for features in an XYZ space that fall within a radius, or a polygon, or along a line. You can specify a point and a radius, a feature in another XYZ space, or a feature in a geojson file.</p> <ul> <li><code>--center</code>: comma separated <code>lat,lon</code> values that specify the center point for the search</li> <li><code>--radius</code>: the radius of the search, in meters, from the <code>--center</code> point, or a buffer around a geometry specified with <code>--feature</code> or <code>--geometry</code></li> <li><code>--feature</code>: comma separated <code>spaceid,featureid</code> values that specify a reference geometry from another XYZ space -- this will return features from the first space that fall within or along a feature from the second space</li> <li><code>--geometry</code>: a single GeoJSON feature in a file to be uploaded for the spatial query</li> </ul> <p>These results are most easily viewable using <code>show -w</code>.</p>"},{"location":"cli/topics/cli/#delete-a-space","title":"Delete a Space","text":"<pre><code>xyzmaps space delete YOUR_SPACE_ID\n</code></pre> <p>Delete a Space you have access to.</p>"},{"location":"cli/topics/cli/#clear-a-space","title":"Clear a Space","text":"<pre><code>xyzmaps space clear YOUR_SPACE_ID\n</code></pre> <p>Clear data from your space. You clear the entire space, or clear by tag or feature ID.</p>"},{"location":"cli/topics/cli/#options_3","title":"Options","text":"<p><code>-t, --tags [tags]</code> tags in your Space</p> <p><code>-i, --ids [IDs]</code> IDs in your Space</p> <p><code>-h --help</code> output usage information</p>"},{"location":"cli/topics/cli/#list-all-tokens","title":"List All Tokens","text":"<pre><code>xyzmaps space token\n</code></pre> <p>Lists all the xyz token you use:</p> <pre><code>id type lat description\n--------------- --------- ---------- ------------------------------------------------------------------------------\nYOUR_TOKEN_NR_1 PERMANENT 1534451767 xyz-hub=readFeatures,createFeatures,updateFeatures,deleteFeatures,manageSpaces\nYOUR_TOKEN_NR_2 PERMANENT 1534516620 xyz-hub=readFeatures\n</code></pre>"},{"location":"cli/topics/cli/#get-more-information-about-your-spaces","title":"Get More Information about Your Spaces","text":"<p>You can use the <code>config</code> command to get and update information about your spaces.</p>"},{"location":"cli/topics/cli/#note_7","title":"Note","text":"<p>To use this feature, your account needs access to the XYZ Pro Services. Learn more about XYZ Pro features here.</p>"},{"location":"cli/topics/cli/#options_4","title":"Options","text":"<p><code>--shared &lt;flag&gt;</code> set your space as shared / public (default is false) <code>-s,--schema [schemadef]</code> set schema definition (local filepath / http link) for your space, all future data for this space will be validated for the schema <code>-t,--title [title]</code> set title for the space <code>-d,--message [message]</code> set description for the space <code>-c,--copyright [copyright]</code> set copyright text for the space <code>--stats</code> see detailed space statistics <code>-r, --raw</code> show raw output <code>-h, --help</code> output usage information</p>"},{"location":"cli/topics/cli/#get-information-about-a-space","title":"Get Information about a Space","text":"<pre><code>xyzmaps space config SPACE_ID\n</code></pre> <p>This will print a table with the title, desciption, and other high-level information about the space.</p> <p>You can see the raw <code>json</code> response from the <code>/statistics</code> endpoing using <code>-r</code>:</p> <pre><code>    xyzmaps space config SPACE_ID -r\n</code></pre>"},{"location":"cli/topics/cli/#get-a-list-of-tags-and-properties-used-in-a-space","title":"Get a List of Tags and Properties Used in a Space","text":"<p>You can get more details about a space by using the <code>--stats</code> option. This will return the number of features, the size of the space, the bbox, geometry types, names and counts of tags, as well as the names of properties (and if they can be accessed via Property Search).</p> <pre><code>xyzmaps space config SPACE_ID --stats\n</code></pre>"},{"location":"cli/topics/cli/#hint_6","title":"Hint","text":"<p>Use <code>xyzmaps space analyze</code> to get a count and list of values of a property in a space.  This is best suited for qualitative values. Only the first 500,000 features in a space  will be analyzed. </p>"},{"location":"cli/topics/cli/#update-the-title-and-description-of-a-space","title":"Update the Title and Description of a Space","text":"<p>To update the title and/or description of a space:</p> <pre><code>xyzmaps space config -t \"A meaningful title for a space\" -d \"additional details about this space that future you will appreciate 6 months from now\"\n</code></pre>"},{"location":"cli/topics/cli/#share-a-space","title":"Share a Space","text":"<p>You can share a space with other users using the <code>--shared</code> option. If they have an XYZ account, they will be able to read from that space using their own tokens (and any data transfer will be charged to their XYZ account).</p> <pre><code>xyzmaps space config spaceID --shared true\n</code></pre> <p>You can disable sharing by passing a <code>false</code> parameter:</p> <pre><code>xyzmaps space config spaceID --shared false\n</code></pre>"},{"location":"cli/topics/cli/#update-upload-or-delete-a-schema-definition","title":"Update, Upload, or Delete a Schema Definition","text":"<p>A schema validation json file can be configured for a space. The schema definition can be in the form of a web address or a local schema json file. Features that do not match this schema will not be uploaded. </p> <p><pre><code>xyzmaps space config YOUR_SPACE_ID -s schema_definition.json\n</code></pre> To delete a schema from a space:</p> <pre><code>xyzmaps space config YOUR_SPACE_ID -s\n</code></pre>"},{"location":"cli/topics/cli/#note_8","title":"Note","text":"<p>To use this feature, your account needs access to the XYZ Pro Services. Learn more about XYZ Pro features here.</p>"},{"location":"cli/topics/cli/#virtual-spaces","title":"Virtual Spaces","text":"<p>Virtual Spaces give users access to multiple spaces with one ID. Group lets you bundle your spaces together, and changes get written back to their original spaces. Associate lets you make your own personal edits to a shared space or one with public data, merging the properties of objects with the same feature ID.</p> <pre><code>xyzmaps space virtualize|vs -a|-g space1,space2\n</code></pre>"},{"location":"cli/topics/cli/#note_9","title":"Note","text":"<p>To use this feature, your account needs access to the XYZ Pro Services. Learn more about XYZ Pro features here.</p>"},{"location":"cli/topics/cli/#group","title":"Group","text":"<pre><code>xyzmaps space virtualize -g space1,space2,...\n</code></pre> <p><code>group</code> takes multiple XYZ spaces and presents them via a single XYZ space ID. Duplicates can occur. Any updates will be made to the original spaces.</p>"},{"location":"cli/topics/cli/#associate","title":"Associate","text":"<pre><code>xyzmaps space vs -a space1,space2\n</code></pre> <p><code>associate</code> takes features from <code>space1</code> and merges their properties into features with the same feature id in <code>space2</code>.</p> <p>One way of using <code>virtualize</code> is to upload CSVs of census data with unique geoID, and merge the statistics on the fly into census geometries where the geoID is the unique ID.</p>"},{"location":"cli/topics/cli/#join-virtual-spaces","title":"Join (Virtual Spaces)","text":"<p>The <code>join</code> command simplifies use of virtual spaces when using CSV tables and existing geometries. You can designate a CSV column to be the feature ID, and use the <code>associate</code> virtual spaces option to join it with a space with geometries that use the same set of feature IDs. </p> <pre><code>xyzmaps space join space_with_geometries -f data_table.csv -k column_with_id\n</code></pre> <pre><code>You can update this \"csv space\" using `xyzmaps space upload spaceID -f new.csv -k id --noGeom` and the next time the virtual space ID is references, the properties will contain the updated values.\n</code></pre>"},{"location":"cli/topics/cli/#note_10","title":"Note","text":"<p><code>join</code> creates a space of features with no geometries. You can inspect this space using  geojson.tools via <code>show -w</code>.</p>"},{"location":"cli/topics/cli/#spatial-search_1","title":"Spatial Search","text":""},{"location":"cli/topics/cli/#gis-functions","title":"GIS Functions","text":"<p>The CLI has access to a number of convenient geopspatial data functions via the <code>xyzmaps space gis</code> command. Some of these functions add properties to the original features, while others create data in a new space. </p> <ul> <li><code>--area</code> uses <code>turf.js</code> to calculate the area of polygons, and saves this as a set of new properties in each polygon feature. <code>xyz_area_sqmiles</code>,<code>xyz_area_sqkm</code> are rounded for display convenience, and <code>xyz_area_sqm</code> is not rounded.</li> <li><code>--length</code> uses <code>turf.js</code> to calculate the length of lines in a space, and saves this as a set of new properties in each linestring feature, <code>xyz_length_miles</code>,<code>xyz_length_km</code> which are rounded for display convenience, and <code>xyz_length_m</code> which is not rounded.</li> <li><code>--centroid</code> uses <code>turf.js</code> to calculate the center of each polygon in a space. By default, these points are written to a new space, but can saved in the existing space using the <code>--samespace</code> option. In either case, they all receive a <code>centroid</code> tag.</li> <li><code>--voronoi</code> uses <code>d3-delaunay.js</code> to generate Voronoi polygons from points in an XYZ space. The edges of these polygons are equidistant from two points, and the vertices are equidistant to three points. By default, they are written to a new space, but can saved in the source point space using the <code>--samespace</code> option. In either case, they all receive a <code>voronoi</code> tag. </li> <li><code>--tin</code> uses <code>d3-delaunay.js</code> to generate Delaunay triangles from points in an XYZ space. This process maximizes the minimum angle of all the angles of the triangles created from the source points. By default, they are written to a new space, but can saved in the source point space using the <code>--samespace</code> option. In either case, they all receive a <code>tin</code> tag. </li> </ul>"},{"location":"cli/topics/cli/#note_11","title":"Note","text":"<p>To use this feature, your account needs access to the XYZ Pro Services. Learn more about XYZ Pro features here.</p>"},{"location":"cli/topics/cli/#hexbins","title":"Hexbins","text":"<p>Hexbins are a data simplification method that makes it easier to visualize large datasets of point features at low zoom levels (continent, country, state/province). A series of hexagon grids are created and the points that fall inside each are counted and written to a new XYZ space, and statistics are calculated across the hexbin grid. </p> <p>These hexagons (or their centroids) and their statistics can be quickly displayed in place of the raw data that might overwhelm a renderer. Default colors indicating relative \"occupancy\" are generated for convenience of display.</p> <p><code>xyzmaps space hexbin spaceID -z 5-10</code> create hexbins appropriate for zoom levels 5 through 10</p> <p><code>xyzmaps space hexbin spaceID -z 8,10,12</code> create hexbins appropriate for zoom 8,10,12</p> <p><code>xyzmaps space hexbin spaceID -c 100,1000,100000</code> create hexbins that are 100 meters, 1km and 10km wide</p> <p>Hexbins are tagged by zoom level, width, and type, making it easy to extract one set from the hexbin space for display and comparison.</p> <p>You can learn more about hexbins and how to display them in this tutorial.</p>"},{"location":"cli/topics/cli/#data-contained-in-xyz-hexbins","title":"Data Contained in XYZ Hexbins","text":"<p>Hexbin features contain various values that can help with analysis and visualization: - <code>count</code>: the number of points in a hexbin  - <code>maxCount</code>: the largest number of points in any hexbin across that particular zoom level or cell width - <code>occupancy</code>: <code>count/maxCount</code>, how \"full\" that hexbin is compared to other across that particular zoom level or cell width - <code>color</code>: an <code>hsla</code> color range that correlates to relative occupancy (red = \"full\", green = \"average\", blue = \"empty - <code>centroid</code>: the centroid of the hexbin (useful for label placement -- the centroid is also written as a separate feature)</p> <pre><code>      \"properties\": {\n        \"color\": \"hsla(0, 100%, 50%,0.51)\",\n        \"count\": 468,\n        \"maxCount\": 468,\n        \"occupancy\": 1,\n      },\n      ...\n      \"properties\": {\n        \"color\": \"hsla(81, 100%, 50%,0.51)\",\n        \"count\": 279,\n        \"maxCount\": 468,\n        \"occupancy\": 0.5961538461538461\n      },\n      ...\n      \"properties\": {\n        \"color\": \"hsla(197, 100%, 50%,0.51)\",\n        \"count\": 6,\n        \"maxCount\": 468,\n        \"occupancy\": 0.01282051282051282...\n      }\n</code></pre>"},{"location":"cli/topics/cli/#hexbin-sum-and-average","title":"Hexbin Sum and Average","text":"<p>If a property is qualitative (property values, income, population), in addition to counting points, XYZ Hexbins can add up the value of the properties in each hexbin as well as calculate the average.</p> <pre><code>xyzmaps space hexbin spaceID -z 10 -a incidents\n</code></pre> <pre><code>        \"sum\": {\n          \"sum\": 4071,\n          \"maxSum\": 5117,\n          \"average\": 8.698717948717949,\n          \"property_name\": \"incidents\"\n        }\n</code></pre>"},{"location":"cli/topics/cli/#hexbin-subcounts","title":"Hexbin Subcounts","text":"<p>You can also specify a <code>subcount</code> within each hexbin based upon the count of the values of particular property.</p> <pre><code>`xyzmaps space hexbin spaceID -z 8-12 -p business_type`\n</code></pre> <p>This would create a <code>subcount</code> object in each hexbin, which would contain the relative count of that property value across the hexbin grid.</p> <pre><code>        \"count\": 48,\n        \"maxcount\": 400,\n        \"subcount\": {\n          \"bar\": {\n            \"color\": \"hsla(181, 100%, 50%,0.51)\",\n            \"count\": 3,\n            \"maxCount\": 32,\n            \"occupancy\": 0.09375\n          },\n          \"grocery_store\": {\n            \"color\": \"hsla(158, 100%, 50%,0.51)\",\n            \"count\": 5,\n            \"maxCount\": 24,\n            \"occupancy\": 0.20833333333333334\n          },\n          \"restaurant\": {\n            \"color\": \"hsla(0, 100%, 50%,0.51)\",\n            \"count\": 20,\n            \"maxCount\": 40,\n            \"occupancy\": 1\n          }...\n</code></pre>"},{"location":"cli/topics/cli/#options_5","title":"Options","text":"<p><code>-c, --cellsize &lt;cellsize&gt;</code> size of hexgrid cells in meters, comma-separate multiple values</p> <p><code>-i, --ids</code> add IDs of features counted within the hexbin as an array inside the property of the hexbin created</p> <p><code>-p, --groupBy &lt;groupBy&gt;</code> name of the feature property by which hexbin counts will be further grouped. subcounts for unique values will be available as objects in the feature</p> <p><code>-a, --aggregate &lt;aggregate&gt;</code> name of the feature property used for aggregating sum value of all the features inside hexbin. A sum object will be created, with relative and max sum, and average.</p> <p><code>-t, --tags &lt;tags&gt;</code> only make hexbins for features in the source space that match the specific tag(s), comma-separate multiple values</p> <p><code>-b, --bbox &lt;bbox&gt;</code> only create hexbins for records inside a specified bounding box - minLon,minLat,maxLon,maxLat</p> <p><code>-l, --latitude &lt;latitude&gt;</code> latitude which will be used for converting cellSize from meters to degrees</p> <p><code>-z, --zoomLevels &lt;zoomLevels&gt;</code> create hexbins optimized for zoom levels -- comma separate multiple values, (-z 8,10,12) or dash for continuous range (-z 10-15)</p> <p><code>-h, --help</code> output usage information</p> <p>You can create hexbins either by width in meters, or use preset widths appropriate to the zoom level.</p>"},{"location":"cli/topics/geojsonbasics/","title":"GeoJSON Basics","text":"<p>GeoJSON is an open standardized format for geodata based on the Javascript Object Notation (JSON) used to encode geographic data structures. This section is based on RFC 7946.</p> <p>GeoJSON is a textual representation of geographical data and its non-spatial attributes. A GeoJSON document contains one object with can be a Feature, a FeatureCollection or a Geometry. The object has to have a property type which is one of the following:</p>"},{"location":"cli/topics/geojsonbasics/#point","title":"Point","text":"<p>The coordinates array of the Point object usually contains two to three dimensions representing longitude, latitude and possibly elevation in this order.</p>"},{"location":"cli/topics/geojsonbasics/#example-point","title":"Example Point","text":"<pre><code>{\n    \"type\": \"Point\",\n    \"coordinates\": [8.53362,50.16192]\n}\n</code></pre> <p>View this Point on a map</p>"},{"location":"cli/topics/geojsonbasics/#multipoint","title":"MultiPoint","text":"<p>Each entry in the coordinates array is a Point coordinates array.</p>"},{"location":"cli/topics/geojsonbasics/#example-multipoint","title":"Example MultiPoint","text":"<pre><code>{\n   \"type\": \"MultiPoint\",\n   \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n}\n</code></pre> <p>View this MultiPoint on a map</p>"},{"location":"cli/topics/geojsonbasics/#linestring","title":"LineString","text":"<p>A LineString coordinates array consists of two or more Point coordinates arrays.</p>"},{"location":"cli/topics/geojsonbasics/#example-linestring","title":"Example LineString","text":"<pre><code>{\n   \"type\": \"LineString\",\n   \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n}\n</code></pre> <p>View this LineString on a map</p>"},{"location":"cli/topics/geojsonbasics/#multilinestring","title":"MultiLineString","text":"<p>As the name suggests, a MultiLineString coordinates array contains LineString coordinates arrays.</p>"},{"location":"cli/topics/geojsonbasics/#example-multilinestring","title":"Example MultiLineString","text":"<pre><code>{\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [\n          [\n            [78.0422,27.1744],[78.0422,27.1733]\n          ],\n          [\n            [78.0422,27.1730],[78.0422,27.1719]\n          ]\n        ]\n      }\n</code></pre> <p>View this MultiLineString on a map</p>"},{"location":"cli/topics/geojsonbasics/#polygon","title":"Polygon","text":"<p>Each element of a Polygon coordinates array has to be a special LineString coordinates array. This special kind is called a 'linear ring' in the RFC specification. In a 'linear ring' the first and last elements in the coordinates array are the same.</p> <p>If the Polygon contains more than one 'linear ring', that is a shape with holes, the first ring must describe the exterior ring, the following the holes. The coordinates of the exterior ring must be listed counterclockwise, the coordinates of the hole(s) clockwise.</p>"},{"location":"cli/topics/geojsonbasics/#example-polygon","title":"Example Polygon","text":"<pre><code>{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [\n      [-77.0578,38.87254],[-77.0584,38.87],[-77.0555,38.8688],[-77.0531,38.8706],[-77.0546,38.8729],[-77.0578,38.87254]\n    ],\n    [\n      [-77.0567,38.8715],[-77.0555,38.8717],[-77.0549,38.8708],[-77.0558,38.8702],[-77.0569,38.8706],[-77.0567,38.8715]\n    ]\n  ]\n}\n</code></pre> <p>View this Polygon on map</p>"},{"location":"cli/topics/geojsonbasics/#multipolygon","title":"Multipolygon","text":"<p>In a Multipolygon, each of the elements of the coordinates array is defined as a Polygon above.</p>"},{"location":"cli/topics/geojsonbasics/#example-multipolygon","title":"Example Multipolygon","text":"<pre><code>{\n   \"type\": \"MultiPolygon\",\n        \"coordinates\": [\n          [\n             [[31.1330,29.9780],[31.1354,29.9780],[31.1354,29.9801],[31.1330,29.9801],[31.1330,29.9780]],\n             [[31.1296,29.9750],[31.1319,29.9750],[31.1319,29.9769],[31.1296,29.9769],[31.1296,29.9750]],\n             [[31.1277,29.9720],[31.1287,29.9720],[31.1287,29.9729],[31.1277,29.9729],[31.1277,29.9720]]\n          ]\n        ]\n}\n</code></pre> <p>View this MultiPolygon on a map</p>"},{"location":"cli/topics/geojsonbasics/#feature","title":"Feature","text":"<p>A Feature object contains two members besides the type property: geometry and properties</p> <p>The geometry can be any of the aforementioned types or a GeoJSON null value.</p> <p>The value of properties can be any GeoJSON object or a GeoJSON null value.</p>"},{"location":"cli/topics/geojsonbasics/#example-feature","title":"Example Feature","text":"<pre><code>{\n   \"type\": \"Feature\",\n   \"geometry\": {\n       \"type\": \"LineString\",\n      \"coordinates\": [\n       [13.35,52.5145], [13.377,52.5162]\n   ]\n   },\n   \"properties\": {\n       \"prop0\": \"value0\",\n       \"prop1\": \"value1\"\n   }\n}\n</code></pre> <p>View this Feature on a map</p>"},{"location":"cli/topics/geojsonbasics/#featurecollection","title":"FeatureCollection","text":"<p>A FeatureCollection contains an array of Features, contained in a member called unsurprisingly features.</p>"},{"location":"cli/topics/geojsonbasics/#example-featurecollection","title":"Example FeatureCollection","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -2.960847,\n          53.430828\n        ]\n      },\n      \"properties\": {\n        \"@ns:com:here:xyz\": {\n          \"tags\": [\n            \"football\",\n            \"stadium\"\n          ]\n        },\n        \"name\": \"Anfield\",\n        \"amenity\": \"Football Stadium\",\n        \"capacity\": 54074,\n        \"popupContent\": \"Home of Liverpool Football Club\"\n      }\n    }\n  ]\n}\n</code></pre> <p>View this FeatureCollection on a map</p>"},{"location":"cli/topics/geojsonbasics/#geometrycollection","title":"GeometryCollection","text":"<p>A GeometryCollection is a collection of zero or more geometry objects like the ones above in an array member called geometries</p>"},{"location":"cli/topics/geojsonbasics/#warning","title":"Warning","text":"<p>GeometryCollection is not supported by xyzmaps space Hub. It is just included here for completeness.</p>"},{"location":"cli/topics/geojsonbasics/#example-geometrycollection","title":"Example GeometryCollection","text":"<pre><code>{\n   \"type\": \"GeometryCollection\",\n   \"geometries\": [\n       {\n           \"type\": \"Point\",\n           \"coordinates\": [8.53362,50.16192]\n       },\n       {\n           \"type\": \"LineString\",\n           \"coordinates\": [\n               [13.35,52.5145], [13.377,52.5162]\n           ]\n       }\n   ]\n}\n</code></pre>"},{"location":"cli/topics/microsoft-buildings/","title":"XYZ Maps and Microsoft Building Footprints","text":"<p>During the summer of 2018 Microsoft released a set of building footprints based on analysis of aerial imagery. In all, the Microsoft dataset consisted of 125,192,184 building footprint polygon geometries in all 50 US States in GeoJSON format.</p> <p>This dataset formed the basis for an article, published on October 12<sup>th</sup> 2018, in the NY Times entitled \u201cA Map of Every Building in America.\u201d</p> <p>In early March 2019, Microsoft released a set of building footprints, using the same techniques, for all of Canada.</p> <p>Since XYZ Maps is a location data management service, we decided to see what we could do with these large datasets.</p> <p>We started with the source data from Microsoft and processed it so that users of XYZ Maps could quickly create maps that</p> <ul> <li>don\u2019t require coding or GIS experience</li> <li>don\u2019t require large file uploads or downloads</li> <li>allow filtering of the source data to focus in on a particular part of the US and/or Canada</li> <li>supports maximum zoom in</li> <li>allows exploration of the source data.</li> </ul> <p>XYZ worked with geocode.earth to enhance the original Microsoft Building Footprint dataset to add admin attributes to each polygon. As a result, the enhanced dataset can be filtered by admin attribute to focus on the data of interest.</p> <p>The data is available in two formats \u2013 GeoJSON and GeoJSONL. (Learn more about GeoJSONL over at interline.io.) It maintains the ODbL license granted by Microsoft.</p> <p>Both formats can be efficiently uploaded to XYZ Maps Spaces using the XYZ Maps CLI using the <code>-s</code> streaming option.</p> <p>You can use XYZ Maps tags to preview and extract various sub-regional admin levels, including <code>neighborhood</code>,<code>locality</code>, and <code>county</code>, along with <code>street</code> and <code>postalcode</code>. Some demonstration maps are provided below.</p> region geojsonl geojson size XYZ Maps map (tag,filter) Alabama geojsonl geojson 2.29 GB Alaska geojsonl geojson 0.11 GB Arizona geojsonl geojson 2.59 GB Arkansas geojsonl geojson 1.34 GB California geojsonl geojson 11.33 GB Colorado geojsonl geojson 2.06 GB Connecticut geojsonl geojson 1.22 GB Delaware geojsonl geojson 0.33 GB District of Columbia geojsonl geojson 0.06 GB Florida geojsonl geojson 6.89 GB Georgia geojsonl geojson 3.60 GB Hawaii geojsonl geojson 0.25 GB Idaho geojsonl geojson 0.83 GB Illinois geojsonl geojson 5.09 GB Indiana geojsonl geojson 3.41 GB Iowa geojsonl geojson 1.86 GB Kansas geojsonl geojson 1.67 GB Kentucky geojsonl geojson 2.13 GB Louisiana geojsonl geojson 1.95 GB Maine geojsonl geojson 0.77 GB Maryland geojsonl geojson 1.60 GB Massachusetts geojsonl geojson 2.16 GB Michigan geojsonl geojson 4.88 GB Minnesota geojsonl geojson 2.91 GB Mississippi geojsonl geojson 1.33 GB Missouri geojsonl geojson 3.14 GB Montana geojsonl geojson 0.74 GB Nebraska geojsonl geojson 1.14 GB Nevada geojsonl geojson 0.95 GB New Hampshire geojsonl geojson 0.57 GB New Jersey geojsonl geojson 2.62 GB New Mexico geojsonl geojson 0.99 GB New York geojsonl geojson 5.12 GB North Carolina geojsonl geojson 4.43 GB North Dakota geojsonl geojson 0.55 GB Ohio geojsonl geojson 5.72 GB Oklahoma geojsonl geojson 1.91 GB Oregon geojsonl geojson 1.78 GB Pennsylvania geojsonl geojson 4.94 GB RhodeIsland geojsonl geojson 0.39 GB South Carolina geojsonl geojson 2.06 GB South Dakota geojsonl geojson 0.66 GB Tennessee geojsonl geojson 2.88 GB Texas geojsonl geojson 9.72 GB Utah geojsonl geojson 1.01 GB Vermont geojsonl geojson 0.36 GB Virginia geojsonl geojson 2.98 GB Washington geojsonl geojson 2.95 GB West Virginia geojsonl geojson 0.98 GB Wisconsin geojsonl geojson 3.20 GB Wyoming geojsonl geojson 0.36 GB \ud83c\udde8\ud83c\udde6 Alberta geojsonl geojson 1.81 GB Edmonton (streets) British Columbia geojsonl geojson 1.49 GB Victoria (neighbourhoods) Manitoba geojsonl geojson 0.71 GB Winnipeg (neighbourhoods) New Brunswick geojsonl geojson 0.32 GB St. John Newfoundland and Labrador geojsonl geojson 0.22 GB Goose Bay Northwest Territories geojsonl geojson 0.02 GB Yellowknife Nova Scotia geojsonl geojson 0.35 GB Halifax (downtown streets) Nunavut geojsonl geojson 0.01 GB Iqaluit (streets) Ontario geojsonl geojson 3.71 GB Toronto (Yonge St) Prince Edward Island geojsonl geojson 0.07 GB Charlottetown (streets) Quebec geojsonl geojson 2.23 GB Quebec City (neighbourhoods) Saskatchewan geojsonl geojson 0.97 GB Regina (streets) Yukon Territory geojsonl geojson 0.02 GB Whitehorse (streets) <p>(Hint: press <code>R</code> to toggle roads.)</p>"},{"location":"cli/tutorials/cli_hexbins/","title":"Hexbins","text":""},{"location":"cli/tutorials/cli_hexbins/#creating-hexbins-with-the-xyz-maps-cli","title":"Creating hexbins with the XYZ Maps CLI","text":"<p>The <code>hexbin</code> command in the XYZ Maps CLI lets you easily create hexbins and their centroids from large, dense point datasets in your Spaces. Hexbins can be useful for data analysis, and can also allow you to visualize datasets that are too large to effectively view at low (regional or national) map zoom levels.</p>"},{"location":"cli/tutorials/cli_hexbins/#getting-started","title":"Getting started","text":"<p>If you don't already have a set of points in a Space, you can upload them using the CLI.</p> <pre><code>xyzmaps space upload -f your.geojson\nsmap\n</code></pre> <p>(You can also use a CSV with point coordinates or shapefiles.)</p> <p>If you do not have data handy, you can use this CSV of bicycle parking in San Francisco.</p> <pre><code>xyzmaps space upload -f \"https://data.sfgov.org/api/views/hn4j-6fx5/rows.csv\"\n</code></pre> <p>You'll be prompted to enter a title and description, and XYZ Maps will generate a unique ID for your dataset. Copy this as you will need it to access the data and generated hexbins.</p> <p>After the upload finishes, you can preview the map using geojson.tools</p> <pre><code>xyzmaps space show spaceID -w\n</code></pre> <p>or Space Invader. (Note it will be easier to view data sets larger than a few hundred points using XYZ Maps Space Invader.)</p> <pre><code>xyzmaps space show spaceID -v\n</code></pre>"},{"location":"cli/tutorials/cli_hexbins/#note","title":"Note","text":"<p>Some of the features in this file do not have any coordinates -- the XYZ Maps CLI will  report these as errors.</p>"},{"location":"cli/tutorials/cli_hexbins/#creating-hexbins","title":"Creating hexbins","text":"<p>Hexbins have a width in meters. You can set this manually using <code>-c</code>, but you also can use <code>-z</code> to generate a hexbin grid that fits well with a particular slippy map zoom level.</p> <pre><code>xyzmaps space hexbin spaceID -c 100\n\nxyzmaps space hexbin spaceID -z 10\n</code></pre> <p>You can also define multiple zoom levels, or a range:</p> <pre><code>xyzmaps space hexbin spaceID -z 10-13\nxyzmaps space hexbin spaceID -z 8,10,12\nxyzmaps space hexbin spaceID -c 100,200,400,800\n</code></pre> <p>For reference, here's a rough guide of zoom levels and admin hierarchies:</p> <pre><code>city: zoom 10-13\nregion: zoom 7-10\ncountry: zoom 4-7\nworld: zoom 1-4\n</code></pre> <p>Hexbins will generate a hexagonal grid for each zoom level (or width) that you selected. It will then count the points that fall within each hexagon, and save that to the properties of each hexbin.</p> <p>It also tracks the maximum count seen in that grid, and after the pass is completed, it writes that <code>maxCount</code> value to each hexbin. An <code>occupancy</code> rate is then calculated for each hexbin relative to the rest of that grid, and a scaled <code>hsla</code> color value is written to the feature for display convenience (blue is low, red is high).</p>"},{"location":"cli/tutorials/cli_hexbins/#using-tags-with-hexbin-data","title":"Using tags with hexbin data","text":"<p>If we generate hexbins for XYZ Maps Space containing the bike parking locations...</p> <pre><code>xyzmaps space hexbin spaceID -z 9-13\n</code></pre> <p>the CLI will generate tags so you can pull out the hexbins and centroids for each zoom level:</p> <pre><code>zoom9\nzoom9_hexbin\nzoom9_centroid\nzoom10\nzoom10_hexbin\nzoom10_centroid\n...\n</code></pre> <p>The CLI also creates centroids for each hexbin. This is useful for an alternate display method as well as for labels. You can use tags to pull these out separately from the hexbins.</p> <p>After you generate the hexbins from a XYZ Maps space, you can view them with any GeoJSON viewer. If you want to view just the zoom 11 hexbins, you can use the <code>-t</code> option with view:</p> <pre><code>xyzmaps space show spaceID -w -t zoom11_hexbin\n</code></pre> <p>For convenience, here is a link to that data. Note the <code>&amp;tags=zoom11_hexbin</code> -- that tells the XYZ Maps API to only return features with that tag, and thus that zoom level.</p> <p>https://xyzmaps.github.io/geojson-tool/index.html?url=https://localhost:8080/hub/spaces/ZGAzaLaA/search?limit=5000&amp;clientId=cli&amp;tags=zoom11_hexbin&amp;access_token=APwC9OKv8ww_zMGWqPTSQdg</p> <p></p>"},{"location":"cli/tutorials/cli_hexbins/#data-contained-in-hexbins","title":"Data contained in Hexbins","text":"<p>Hexbin features contain various values that can help with analysis and visualization:</p> <ul> <li><code>count</code>: the number of points in a hexbin</li> <li><code>maxCount</code>: the largest number of points in any hexbin across that particular zoom level or cell width</li> <li><code>occupancy</code>: how \"full\" that hexbin is compared to other hexbins across that particular zoom level or cell width (<code>count</code> divided by <code>maxCount</code>)</li> <li><code>color</code>: an <code>hsla</code> color value that correlates to that hexbin's relative occupancy (red = \"high\", green = \"average\", blue = \"low\", provided for display convience</li> <li><code>centroid</code>: the centroid of the hexbin (useful for label placement -- the centroid is also written as a separate feature)</li> </ul> <pre><code>\"properties\": {\n    \"color\": \"hsla(0, 100%, 50%,0.51)\",\n    \"count\": 468,\n    \"maxCount\": 468,\n    \"occupancy\": 1,\n},\n...\n\"properties\": {\n    \"color\": \"hsla(81, 100%, 50%,0.51)\",\n    \"count\": 279,\n    \"maxCount\": 468,\n    \"occupancy\": 0.5961538461538461\n},\n...\n\"properties\": {\n    \"color\": \"hsla(197, 100%, 50%,0.51)\",\n    \"count\": 6,\n    \"maxCount\": 468,\n    \"occupancy\": 0.01282051282051282...\n}\n</code></pre> <p>You can also open the hexbin space in XYZ Maps Space Invader and select zoom levels from the tag list.</p> <pre><code>xyzmaps space show spaceID -v\n</code></pre> <p>In Space Invader, you can select properties and choose data-driven color palettes, and change the basemaps to suit the data.</p> <p>If you do not choose a tag with <code>-t</code> in the CLI, you can select a zoom level using the tags in the right pane.</p> <p></p> <p>https://s3.amazonaws.com/xyz-demo/scenes/xyz_tangram/index.html?space=ZGAzaLaA&amp;token=APwC9OKv8ww_zMGWqPTSQdg&amp;basemap=xyz-pixel-dark&amp;buildings=1&amp;label=undefined&amp;colors=range&amp;points=2&amp;lines=0&amp;outlines=0&amp;highlight=0&amp;places=1&amp;roads=1&amp;water=0&amp;tags=zoom12_centroid&amp;property=count&amp;palette=colorBrewerYlOrRd&amp;paletteFlip=true&amp;sort=values&amp;hideOutliers=false#12.858333333333318/37.7474/-122.4452</p> <p>Click for more examples on how to use Space Invader.</p>"},{"location":"cli/tutorials/cli_hexbins/#advanced-options","title":"Advanced options","text":""},{"location":"cli/tutorials/cli_hexbins/#subgroups","title":"Subgroups","text":"<p>Values of properties of a feature can also be counted with <code>xyzmaps space hexbin -p propertyname</code>.</p> <pre><code>xyzmaps space hexbin spaceID -p street_type\n</code></pre> <p>This would count the unique values of the <code>street_type</code> property in each feature, track the maximum, and generate an occupancy value to be used in data visualization. Space Invader can use that value to dynamically generate a color based on that hexbin's subgroup value compared to other hexbin's subgroup values.</p> <p>Here's an example showing street types in San Francisco, where street type was chosen as a subgroup. <code>subcount.AVE</code> can be used to see where Avenue is the most common street type. You can click on <code>subcount.ST.count</code> to see the streets of San Francisco.</p> <p></p> <p>For reference, here is a sample of a subcount object:</p> <pre><code>\"properties\": {\n  \"count\": 468,\n  \"maxCount\": 468,\n  \"subcount\": {\n    \"ST\": {\n      \"color\": \"hsla(0, 100%, 50%,0.51)\",\n      \"count\": 324,\n      \"maxCount\": 324,\n      \"occupancy\": 1\n    },\n    \"ALY\": {\n      \"color\": \"hsla(0, 100%, 50%,0.51)\",\n      \"count\": 16,\n      \"maxCount\": 16,\n      \"occupancy\": 1\n    },\n    \"AVE\": {\n      \"color\": \"hsla(107, 100%, 50%,0.51)\",\n      \"count\": 57,\n      \"maxCount\": 122,\n      \"occupancy\": 0.4672131147540984\n    },\n</code></pre>"},{"location":"cli/tutorials/cli_hexbins/#sum-and-average","title":"Sum and average","text":"<p>If a point feature has a quantitative property, you can use <code>-a</code> to add it up within each hexbin, as well as calculate an average. These values, along with <code>maxSum</code>, is recorded in a <code>sum</code> object within each hexbin.</p> <pre><code>\"sum\": {\n  \"sum\": 4071,\n  \"maxSum\": 5117,\n  \"average\": 8.698717948717949,\n  \"property_name\": \"incidents\"\n}\n</code></pre> <p>Space Invader can compare and color these values across the hexbin grid. Here we see the aggregate values of Minneapolis property values summed within hexbin centroids.</p> <p></p>"},{"location":"cli/tutorials/cli_hexbins/#updates","title":"Updates","text":"<p>XYZ Maps tracks the source space of a hexbin space, and vice versa. If you add zoom levels or update hexbins, XYZ Maps will add to or edit any existing hexbin spaces for a source space.</p> <p>You can see in the description of the space, using <code>xyzmaps space config spaceID -r</code>. Hexbin zoom levels are also tracked.</p>"},{"location":"cli/tutorials/cli_hexbins/#dynamic-zoom","title":"Dynamic zoom","text":"<p>Since each zoom level can have its own hexbins and centroids, you can dynamically select data appropriate for the zoom level of a map using tags. Here's an example of centroids and hexbins for tornados in the United States from 1950 to 2017.</p> <p>https://burritojustice.github.io/noaa_historic_tornadoes/</p>"},{"location":"cli/tutorials/group_by/","title":"Group By in CSV Files","text":"<p>CSV is a flat file format, but the rows often contain hierarchical data associated with a particular region or place. A few examples include election results, census statistics, or time-series data. If more than one row of your CSV contains an ID for the same place, you can use <code>xyzmaps space upload --groupby</code> or <code>xyzmaps space join groupby</code> to nest the values of a column as unique properties within a single feature. You can then use Virtual Spaces to join the data to existing geometries on the fly.</p> <ul> <li><code>--groupby columnName</code> consolidates multiple rows of a CSV that share a unique ID into a single feature (designated with <code>-i</code> (usually representing a admin geography)); values in each row within that selected column will be grouped as nested properties within an object named after the column in the consolidated feature properties.</li> <li><code>--groupby</code> can be used with <code>upload</code> or the <code>join</code> command to extract the hierarchy from a CSV and upload it to a space without geometries.</li> </ul>"},{"location":"cli/tutorials/group_by/#upload-vs-join","title":"upload vs join","text":"<ul> <li>with <code>join</code>, the data is uploaded and the virtual space with the geometry space is created in one step.</li> <li><code>upload --groupby</code> is useful for updating the \"data space\" in a virtual space that has already been created. It can also be used to upload the grouped data before a virtual space has created with a space containing geometries matching geoIDs using <code>xyzmaps space vs -a</code></li> </ul>"},{"location":"cli/tutorials/group_by/#when-to-use-groupby","title":"When to use groupby","text":"<p>This is a complex feature and is best explained by example.</p> <p>Imagine a CSV of election results where each row contains a precinct ID, candidate name, political party, and that party's percentage of the vote. Since there are multiple candidates running for office in each precinct, there would be multiple rows containing the same precinct ID, which is what we would need to join this data to precinct geometries on a map using virtual spaces.</p> <pre><code>precinct,candidate,party,vote_percentage\n1,Baker,Red,30\n1,Farmer,Blue,60\n1,Fisher,Green,10\n2,Woods,Red,60\n2,Waters,Blue,10\n2,Rivers,Green,30\n</code></pre> <p>However, if we tried to upload this CSV using <code>-i precinct</code>, XYZ Maps would consider each new feature with that unique ID to be an update of the existing feature, which is not what we want.</p> <p>Using <code>group_by</code>, we can designate <code>precinct</code> as the feature ID, and select the values of <code>party</code> to be the nested object. This would generate geojson similar to this</p> <pre><code>{\n  id: 1,\n  geometry: null\n  properties: {\n    party: {\n      Red: {\n        candidate: Baker\n        vote_percentage: 30\n      },\n      Blue: {\n        candidate: Farmer\n        vote_percentage: 60\n      },\n      Green: {\n        candidate: Fisher\n        vote_percentage: 10\n      }\n    }\n  },\n{\n  id: 2,\n  geometry: null\n  properties: {\n    party: {\n      Red: {\n        candidate: Woods\n        vote_percentage: 60\n      },\n      Blue: {\n        candidate: Waters\n        vote_percentage: 10\n      },\n      Green: {\n        candidate: Rivers\n        vote_percentage: 30\n      }\n    }\n  }\n</code></pre> <p>This \"data space\" has no geometries, but using virtual spaces, it is simple to merge it on the fly with a second space that contains the precinct geometries with the same set of feature IDs.</p> <p>You can upload and merge this CSV two ways, using <code>upload</code> or <code>join</code>.</p> <pre><code>xyzmaps space upload -f http://elections.xyz/results.csv -i precinct --groupby party --noCoords \nxyzmaps space vs -a csvSpace,geometrySpace\n</code></pre> <p>or</p> <pre><code>xyzmaps space join precinctGeometrySpace -f http://elections.xyz/results.csv -i precinctID --groupby party --noCoords\n</code></pre> <p>This uploads the CSV into a space where the results for each precinct are consolidated in a GeoJSON feature with no geometry, and the results for each candidate / political party would be nested within a <code>party</code> object. With virtual spaces, these are easily merged with a space containing the precinct geometries with the same feature ID. The virtual space ID can then be visualized in a variety of mapping tools. More importantly, the space containing the nested CSV data can be updated each time it is updated by election officials using the <code>xyzmaps space upload</code> command specified above, avoiding the work involved in a manual join with a large, nationwide set of geometries.</p> <p>You can try this yourself with this CSV of election results from the 2019 Canadian Federal Election and the shared XYZ Maps space <code>mo3sLwE3</code>, which contains polygons of Canadian electoral precincts.</p> <pre><code>xyzmaps space join mo3sLwE3 -f https://github.com/heremaps/xyz-documentation/raw/master/docs/cli/tutorials/data/2019_canadian_federal_election_results.csv -i District --groupby party\n</code></pre>"},{"location":"cli/tutorials/group_by/#-promote","title":"--promote","text":"<p>There may be fields that you do not want to be nested in each sub-object -- a good example here is the name of the district. You can use <code>--promote</code> to keep those properties from being unnecessarily nested.</p> <p><code>xyzmaps space join mo3sLwE3 -f https://github.com/heremaps/xyz-documentation/raw/master/docs/cli/tutorials/data/2019_canadian_federal_election_results.csv -i District --groupby party --promote \"District Name\",\"Nom de Circonscription\"</code></p>"},{"location":"cli/tutorials/group_by/#-flatten","title":"--flatten","text":"<p>Nested objects have advantages and disadvantages. If your tools suffer from <code>Object object</code> you can use <code>--flatten</code> save the groups as individual properties where the names are simple strings, rather than nested objects, but still preserve the hierarchy using colons:</p> <pre><code>  \"properties\": {\n    \"party:Parti Rhinoc\u00e9ros Party:Given name - Pr\u00e9nom\": \"Richard\",\n    \"party:Parti Rhinoc\u00e9ros Party:Appartenance politique\": \"Parti Rhinoc\u00e9ros Party\",\n    \"party:Parti Rhinoc\u00e9ros Party:Surname - Nom de famille\": \"Plett\",\n    \"party:Parti Rhinoc\u00e9ros Party:Votes obtained - Votes obtenus\": 109,\n    \"party:Parti Rhinoc\u00e9ros Party:% Votes obtained - Votes obtenus %\": 0.2,\n    \"party:Parti Rhinoc\u00e9ros Party:Rejected ballots - Bulletins rejet\u00e9s***\": 489,\n    \"party:Parti Rhinoc\u00e9ros Party:Total number of ballots cast - Nombre total de votes d\u00e9pos\u00e9s\": 53438,\n    \"party:Liberal:Given name - Pr\u00e9nom\": \"Bruno\",\n    \"party:Liberal:Appartenance politique\": \"Lib\u00e9ral\",\n    \"party:Liberal:Surname - Nom de famille\": \"Uggenti\",\n    \"party:Liberal:Votes obtained - Votes obtenus\": 16057,\n    \"party:Liberal:% Votes obtained - Votes obtenus %\": 30.3,\n    \"party:Liberal:Rejected ballots - Bulletins rejet\u00e9s***\": 489,\n    \"party:Liberal:Total number of ballots cast - Nombre total de votes d\u00e9pos\u00e9s\": 53438...\n</code></pre> <p>vs</p> <pre><code>      \"properties\": {\n        \"party\": {\n          \"Liberal\": {\n            \"Type of results*\": \"validated\",\n            \"Given name - Pr\u00e9nom\": \"Bruno\",\n            \"Type de r\u00e9sultats**\": \"valid\u00e9s\",\n            \"Appartenance politique\": \"Lib\u00e9ral\",\n            \"Surname - Nom de famille\": \"Uggenti\",\n            \"Votes obtained - Votes obtenus\": 16057,\n            \"% Votes obtained - Votes obtenus %\": 30.3,\n            \"Rejected ballots - Bulletins rejet\u00e9s***\": 489,\n            \"Total number of ballots cast - Nombre total de votes d\u00e9pos\u00e9s\": 53438\n          },\n          \"Parti Rhinoc\u00e9ros Party\": {\n            \"Given name - Pr\u00e9nom\": \"Richard\",\n            \"Appartenance politique\": \"Parti Rhinoc\u00e9ros Party\",\n            \"Surname - Nom de famille\": \"Plett\",\n            \"Votes obtained - Votes obtenus\": 109,\n            \"% Votes obtained - Votes obtenus %\": 0.2,\n            \"Rejected ballots - Bulletins rejet\u00e9s***\": 489,\n            \"Total number of ballots cast - Nombre total de votes d\u00e9pos\u00e9s\": 53438\n          }...\n</code></pre> <p>Another example is COVID-19 data from the Covid Tracking project API.</p> <pre><code>xyzmaps space join xkRyxQl9 -f https://covidtracking.com/api/v1/states/daily.csv --noCoords -i state --groupby date\n</code></pre> <p>This will merge daily state testing data from March 2020 until today into a virtual space with xkRyxQl9, a shared space with US state geometries. </p> <p>Note that it is not recommended to use streaming / <code>-s</code> with <code>groupby</code> -- attempting simultaneous writes to the same property of the same feature can lead to potential API errors.</p>"},{"location":"cli/tutorials/shapefiles/","title":"Shapefiles","text":""},{"location":"cli/tutorials/shapefiles/#importing-shapefiles-into-xyz-maps","title":"Importing shapefiles into XYZ Maps","text":"<p>Shapefiles are a proprietary but common geospatial file format developed by ESRI. It is frequently used by governments to store geospatial data.</p> <p>As of version 1.1 of the XYZ Maps CLI, most shapefiles can be easily uploaded into a XYZ Maps Space.</p> <pre><code>xyzmaps space upload -f my_shapefile.shp\n</code></pre> <p>The CLI inspects the CRS and projection data in the <code>.prj</code> file normally found in the unzipped shapefile directory and will attempt to convert it to WGS84. If the CLI returns an error, the shapefile will require extra steps before you can bring it into XYZ Maps.  </p> <p>In this tutorial, we'll cover what you need to do to successfully import shapefiles, along with special steps using other open source tools for those trickier ones.</p> <p>This document assumes you have installed the XYZ Maps CLI and are comfortable enough using it already.</p> <p>You should also install</p> <ul> <li>mapshaper</li> <li>QGIS and the QGIS plugin</li> </ul>"},{"location":"cli/tutorials/shapefiles/#standard-shapefile-upload-via-the-xyz-maps-cli","title":"Standard shapefile upload via the XYZ Maps CLI","text":"<p>Unlike a GeoJSON file, a shapefile is made up of a number of separate files. Shapefiles on the internet are usually zipped, but once uncompressed you will see a number of files with the same name but different extensions. Some of the more important ones are:</p> <ul> <li><code>.shp</code> - contains the geometries of the features (points, lines, polygons)</li> <li><code>.dbf</code> - contains the attributes for the features</li> <li><code>.prj</code> - contains information about the projection and coordinate reference system (CRS)</li> </ul> <p>If the shapefile is under 200MB, you should be able to upload it using the XYZ Maps CLI.</p> <p>In the terminal, <code>cd</code> to the unzipped shapefile directory, and type</p> <pre><code>xyzmaps space upload space_id -f my_shapefile.shp\n</code></pre> <p>The CLI will look for <code>my_shapefile.dbf</code> and other files in the specified directory. (If it is missing, no attributes of the geometries will be imported.)</p> <p>As of version 1.5, multiple shapefiles can be uploaded to a space simultaneously using the <code>--batch</code> option. The CLI will inspect directories within the designated directory and upload any shapefile payloads it finds.</p> <pre><code>xyzmaps space upload -f my_directory_containing_shapefile --batch shp\n</code></pre> <p>Note that you can use <code>-a</code> to select attributes of features to convert into tags, which will let you filter features server-side when you access the XYZ Maps API.</p>"},{"location":"cli/tutorials/shapefiles/#advanced-shapefile-upload","title":"Advanced shapefile upload","text":"<p>Shapefiles are an infinitely variable format, and there will be cases where you may need to manipulate or modify the data in order to import it into your XYZ Maps space. You can do this with other open-source geospatial tools, specifically <code>mapshaper</code> and QGIS.</p>"},{"location":"cli/tutorials/shapefiles/#mapshaper","title":"mapshaper","text":"<p><code>mapshaper</code> is a powerful command-line tool for editing and manipulating geospatial data in a variety of common formats.</p> <pre><code>https://github.com/mbloch/mapshaper\nhttps://github.com/mbloch/mapshaper/wiki/Command-Reference\n</code></pre> <p>You can install it using <code>npm</code>:</p> <pre><code>npm install -g mapshaper\n</code></pre> <p>Note that <code>mapshaper</code> can modify shapefiles directly, or convert shapefiles into GeoJSON. Converting to GeoJSON will give you more options and faster uploads when bringing the data into XYZ Maps. The mapshaper documentation provides a wide variety of options, but a simple conversion command is:</p> <pre><code>mapshaper my_geodata.shp -o my_geodata.geojson\nxyzmaps space upload -f my_geodata.geojson -a\n</code></pre> <p><code>-a</code> lets you interactively pick property values to convert into tags. You can use <code>-s</code> to stream the file and upload it much more quickly, but in this case you will need to specify the property keys with <code>-p</code></p> <pre><code>xyzmaps space upload -f my_geodata.geojson -p property_name -s\n</code></pre> <p>Depending on the size of the shapefile you may be able to pipe the geojson from <code>mapshaper</code> directly to the XYZ Maps CLI, using the <code>-</code> option in <code>mapshaper</code>:</p> <pre><code>mapshaper my_geodata.shp -o format=geojson - | xyzmaps space upload spaceID -a -t specific_tag\n</code></pre> <p>Note: While you normally can use <code>upload</code> without specifying a XYZ Maps Space ID, you need to do so when piping.</p> <p>You can also stream it, which will upload your data much more quickly:</p> <pre><code>mapshaper my_geodata.shp -o format=geojson - | xyzmaps space upload spaceID -p property_name -t specific_tag -s\n</code></pre> <p>(If you see unusual errors when piping from <code>mapshaper</code> to XYZ Maps, you may have more success keeping the conversion and uploading as separate steps.)</p> <p>Note that you can also run <code>mapshaper</code> as a web app, though there may be limits on file sizes.</p> <pre><code>http://mapshaper.org\n</code></pre>"},{"location":"cli/tutorials/shapefiles/#xyz-maps-qgis-plugin","title":"XYZ Maps QGIS plugin","text":"<p>QGIS is an open-source desktop GIS tool that lets you edit, visualize, manage, analyze and convert geospatial data. You can upload and download data from your XYZ Maps spaces using the QGIS plugin. (The plugin is also available on Github.)</p> <p>You can install the QGIS plugin from within QGIS Plugin search tool if you have the \"show experimental plugins\" option checked in the plugin console settings.</p> <p></p> <p>You can easily open almost any shapefile in QGIS, at which point you can save it to your XYZ Maps spaces using the QGIS plugin, or export it as GeoJSON to the desktop to use the XYZ Maps CLI streaming upload options.</p>"},{"location":"cli/tutorials/shapefiles/#large-individual-features","title":"Large individual features","text":"<p>Some shapefiles may contain very large and extremely detailed individual lines or polygons. (Coastlines are a common example.) If a single feature is greater than 10-20MB, you may see <code>400</code> or <code>413</code> http errors when you try to upload the shapefile. In many cases, this level of detail is unnecessary for web mapping. If so, you can try to simplify the feature using <code>mapshaper</code> or QGIS. You may also want to adjust XYZ Maps CLI upload parameters so less data is sent in each API request.</p>"},{"location":"cli/tutorials/shapefiles/#adjusting-chunk-parameters","title":"Adjusting 'chunk' parameters","text":"<p>In order to optimize upload speed, the CLI \"chunks\" features together and then sends the chunk to the API. There are typically 200 features per chunk. While a large feature may be small enough to be uploaded, when combined with other features, the chunk may be too large for the API.</p> <p>You can adjust the chunk size using <code>-c</code> -- in this example, the CLI will upload 100 features per API request:</p> <pre><code>xyzmaps space upload spaceID -f large_features.shapefile -c 100\n</code></pre> <p>Depending on the size of the feature, you may want to try <code>c -10</code> (ten per request) or even <code>c -1</code> (which would load one feature at a time).</p>"},{"location":"cli/tutorials/shapefiles/#simplifying-with-mapshaper","title":"Simplifying with mapshaper","text":"<p>You can simplify lines and polygons in shapefiles using <code>-simplify</code>.</p> <pre><code>mapshaper very_large_features.shp -simplify dp 20% -o simplified_features.geojson\n</code></pre> <p>Depending on the zoom level and extent your web map, you can also try <code>10%</code>, <code>5%</code>, and <code>1%</code>.</p> <p>More information on simplification is available here: https://github.com/mbloch/mapshaper/wiki/Command-Reference#-simplify</p> <p>As previously mentioned, for smaller shapefiles you can pipe output from <code>mapshaper</code> directly to the XYZ Maps CLI, accelerating your TTM (Time To Map).</p> <pre><code>mapshaper big_shapefile.shp -o format=geojson - | xyzmaps space upload spaceID -p property_name -t specific_tag -s\n</code></pre>"},{"location":"cli/tutorials/shapefiles/#qgis","title":"QGIS","text":"<ul> <li>open the shapefile in QGIS</li> <li>choose Vector -&gt; Geometry Tools -&gt; Simplify</li> <li>save the simplified data to a new XYZ Maps space using the plugin</li> </ul> <p>The Simplify tool works in decimal degrees, and the default is 1 degree, which is probably not what you want. Useful values depend on the extent and zoom levels of your map, but <code>0.01</code>, <code>0.001</code>, <code>0.0001</code>, and <code>0.00001</code> are interesting values.</p>"},{"location":"cli/tutorials/shapefiles/#very-large-shapefiles-200mb","title":"Very large shapefiles (&gt; 200MB)","text":"<p>The XYZ Maps CLI will attempt to load the entire shapefile into memory before uploading it to the API. This will generally work for shapefiles up to 200MB, but you will start to see Node.js memory errors beyond that.</p> <p>While GeoJSON and CSVs can be streamed via the <code>upload -s</code> option, this option is not yet available for shapefiles. You will have the most success converting the shapefile to GeoJSON and then uploading to XYZ Maps.</p> <pre><code>mapshaper big_data.shp -o format=geojson big_data.geojson\nxyzmaps space upload spaceID -f big_data.geojson -s\n</code></pre> <p>Note that <code>-a</code> is not available when <code>-s</code> is used, but you can still specify properties to convert into tags using <code>-p</code>.</p> <p>You can also open the very large shapefile in QGIS and save directly to a XYZ Maps space using the XYZ Maps QGIS plugin, though this will be slower than using the CLI streaming feature as the QGIS plugin is not multi-threaded.</p>"},{"location":"cli/tutorials/shapefiles/#projections-and-crs-coordinate-reference-systems","title":"Projections and CRS (Coordinate Reference Systems)","text":"<p>Just like standards, the beauty of projections is there are so many to choose from. GeoJSON expects points to be projected in Web Mercator (WGS84/EPSG:4326). Many shapefiles are in different projections, or use local projections without lat/lon coordinates (i.e. state plane). The CLI will inspect the .prj file and attempt to convert it. If it is an uncommon projection, you may see errors, but it is easy to get <code>mapshaper</code> to try to convert into GeoJSON-friendly coordinates.</p> <pre><code>mapshaper different_projection.shp -proj wgs84 -o format=geojson - | xyzmaps space upload spaceID -p property_name -t specific_tag -s\n</code></pre> <p>If you see any <code>node.js</code> memory errors, you can break it up into two steps:</p> <pre><code>mapshaper different_projection.shp -proj wgs84 -o format=geojson different_projection.geojson\nxyzmaps space upload spaceID -f different_projection.geojson\n</code></pre> <p>If you continue to see errors, you may want to try opening the shapefile in QGIS or use GDAL's <code>ogr2ogr</code> conversion tools.</p>"},{"location":"cli/viewer-tool/","title":"Overview","text":"<p>The GeoJSON Tool is a web based visualization tool for GeoJSON data that can quickly display data from various sources, highlight and inspect specific features and supports even complex operations like finding data based on content.</p> <p></p>"},{"location":"cli/viewer-tool/#hint-geojson-tool-url","title":"Hint: GeoJSON Tool URL","text":"<p>Bookmark the GeoJSON Tool at: https://xyzmaps.github.io/geojson-tool/</p>"},{"location":"cli/viewer-tool/#getting-around","title":"Getting around","text":""},{"location":"cli/viewer-tool/#map-1","title":"Map (1)","text":"<p>The map display makes up the biggest part of the tool. It is here where you see your data on the background of the map. You can freely navigate around and zoom in and out to get a better view.</p>"},{"location":"cli/viewer-tool/#map-controls","title":"Map Controls","text":"<p>You can also use the controls in the bottom right hand corner of the map view to zoom in and out, as well as switching the background map style.</p> <p></p>"},{"location":"cli/viewer-tool/#full-page-map","title":"Full Page Map","text":"<p>Use the button in the top right hand corner to maximize the map to the full page to get a better view of the data in context.</p> <p></p>"},{"location":"cli/viewer-tool/#data-overlay","title":"Data Overlay","text":"<p>When you work with data on the map and select one feature, this features highlights on the map a magenta color. At the same time, the payload properties are shown in a heads-up data overlay in the top left hand corner of the map, where you can drill down into the individual attributes</p> <p></p>"},{"location":"cli/viewer-tool/#editor-2","title":"Editor (2)","text":"<p>On the right hand side of the page you see the GeoJSON text editor. Here you can type or paste GeoJSON describing the features you want to see on the map.</p> <p>[]</p>"},{"location":"cli/viewer-tool/#geojson-structure","title":"GeoJSON structure","text":"<p>You will notice that the editor does some automatic formatting on the text you  are typing to bring into a structured form. This indenting makes it easier to work  with the nested nature of GeoJSON.</p> <p>In the left margin of the panel you notice line numbers, as well small triangles.  The latter allow you to collapse or expand regions of the text that you don't want  to see right now:</p> <p></p>"},{"location":"cli/viewer-tool/#geojson-syntax-check","title":"GeoJSON Syntax Check","text":"<p>In addition to outlining the structure, the editor also checks if the GeoJSON is valid.  A missing a bracket or a comma can make your GeoJSON invalid for display. The editor tries  to give you a hint by showing a marker in the margin.</p> <p></p>"},{"location":"cli/viewer-tool/#location-bar-3","title":"Location bar (3)","text":"<p>On top of the map you find the Location bar. It allows you to quickly jump to any coordinate you enter:</p> <p></p>"},{"location":"cli/viewer-tool/#loading-data-4","title":"Loading Data (4)","text":"<p>There are of course more ways to get data into the viewer than typing into the editor. When you select the Load Data on top of the editor, you have the option to</p> <ul> <li>Load data from a URL by typing it in and clicking Go</li> <li>Upload a local file from you computer</li> <li>Clear the map and start afresh</li> </ul> <p></p> <p>When data was loaded into the viewer, you either get a confirmation or a warning banner depending on if the source could processed or not.</p> <p></p>"},{"location":"cli/viewer-tool/#hint","title":"Hint","text":"<p>You can also load a local file by drag&amp;drop meaning you pull it from your desktop or Finder/Explorer on the map.</p>"},{"location":"cli/viewer-tool/advanced/","title":"Advanced concepts","text":""},{"location":"cli/viewer-tool/advanced/#locating-content","title":"Locating content","text":""},{"location":"cli/viewer-tool/advanced/#from-editor-to-map","title":"From editor to map","text":"<p>Selecting an entire feature object in editor this will be zoom to in the map and highlighted with a magenta color.</p> <p></p> <p>Selecting any latitude and longitude of geometry from the editor, this point will be centered and highlighted on that map.</p> <p></p>"},{"location":"cli/viewer-tool/advanced/#from-map-to-editor","title":"From map to editor","text":"<p>Clicking on rendered feature on map it will be highlighted with magenta color and cursor will jump to respective feature in editor</p> <p></p>"},{"location":"cli/viewer-tool/advanced/#filtering-data","title":"Filtering data","text":"<p>Selecting a feature on map, clicking on a property label in the feature explorer pop-up card,this will highlight all features with that same property value.</p>"},{"location":"cli/viewer-tool/advanced/#example","title":"Example","text":"<p>After clicking on the <code>vehicle_type</code> label in the overlay, all features with that same value  (e.g., bus) are highlighted magenta  </p>"},{"location":"cli/viewer-tool/advanced/#styling-hints","title":"Styling hints","text":"<p>When some styling hints are present in the feature it renders with the given style on the map. Examples are the following key/value pairs for defining the line and fill styles:</p> <pre><code>    \"stroke\": \"#ffaa00\",\n    \"stroke-opacity\": 1,\n    \"stroke-width\": 0.5,\n    \"fill\": \"#ffff00\",\n    \"fill-opacity\": 0.6\n</code></pre> <p></p>"},{"location":"cli/viewer-tool/advanced/#data-url","title":"Data URL","text":"<p>GeoJSON can also be loaded and visualized directly by passing the source of the data in the URL with the named <code>url</code> parameter:</p>"},{"location":"cli/viewer-tool/advanced/#example-single-source","title":"Example \"Single source\"","text":"<p>https://xyzmaps.github.io/geojson-tool/?url=http://cms.in.here.com/v2/road/pvid/809297026?clientId=sis</p>"},{"location":"cli/viewer-tool/advanced/#example-multiple-sources","title":"Example \"Multiple sources\"","text":"<p>https://xyzmaps.github.io/geojson-tool/?url=http://cms.in.here.com/v2/road/pvid/809297026?clientId=sis;http://cms.in.here.com/v2/road/pvid/62884993?clientId=sis</p>"},{"location":"cli/viewer-tool/advanced/#embedding-the-viewer","title":"Embedding the viewer","text":"<p>The GeoJSON tool can be used to embed a map with features on any web page using an <code>iframe</code>. For this, the parameter <code>maponly=true</code> needs to be passed as well, which will hide the viewer controls and show only the map and content.</p>"},{"location":"cli/viewer-tool/advanced/#example_1","title":"Example","text":"<p>https://xyzmaps.github.io/geojson-tool/?url=http://cms.in.here.com/v2/road/pvid/809297026?clientId=sis&amp;maponly=true</p> <p></p>"},{"location":"ui/","title":"Overview","text":"<p>The easiest way to get data from an XYZ Maps Space onto a map is by using our XYZ Maps Maps JavaScript component in your web pages.</p>"},{"location":"ui/#maps-playground","title":"Maps Playground","text":"<p>To help you get started we have the playground, an easy to use exploration tool that gets you up to speed quickly with the most important concepts. By showing both the code and the result it is the best way try out unfamiliar APIs. Because the code is also directly editable, you can experiment directly in the browser to try out new things.</p> <p><code>https://localhost:8080/maps/</code></p> <p></p>"},{"location":"ui/#hint","title":"Hint","text":"<p>Using a sample as a template for your project.</p> <p>Using one of the samples is probably the easiest way for you to start your own visualization project. By clicking the download button on right side of the editor toolbar you can download the current file as a starter <code>.html</code>-file for your project.</p> <p></p> <p>The only thing left to do is to replace the <code>YOUR_TOKEN</code> placeholder with the actual string for your token.</p>"},{"location":"ui/#concepts-1","title":"Concepts (1)","text":"<p>The left-hand side panel shows a list of concepts for you to explore. They are ordered into groups like basic concepts to start with or more complex interactions for you to try out.</p> <p>Selecting one of the samples loads it into the Editor panel (2) and shows the result in the Map Output panel (3).</p>"},{"location":"ui/#editor-2","title":"Editor (2)","text":"<p>The editor in the middle shows the code for sample. It uses different colors for different symbols based on their meaning (syntax highlight). This is especially helpful if you made changes and forgot something (like closing a bracket or ending a string quote).</p> <p></p>"},{"location":"ui/#documentation","title":"Documentation","text":"<p>This is probably the most helpful link you can find, and it takes you directly into the <code>JSDoc</code> documentation site. You can also bookmark this for further reference:</p> <p><code>https://localhost:8080/maps/latest/documentation</code></p>"},{"location":"ui/#switch-code-views","title":"Switch Code Views","text":"<p>As normal for a web application it consists of both HTML and JavaScript. Usually, the interesting stuff happens in JavaScript - that's why this view is preselected. However, you can also see the JS in context by switching to the HTML&amp;JS tab with the corresponding button in the toolbar.</p>"},{"location":"ui/#run-code","title":"Run Code","text":"<p>As mentioned already, you can (and are encouraged to) make changes to the code and observe the output immediately. For this, you need to press the Run button in the toolbar.</p>"},{"location":"ui/#reset-code","title":"Reset Code","text":"<p>Don't worry if you make mistakes, you can also always go back to the default version of text example by selecting the Reset button.</p>"},{"location":"ui/#download-code","title":"Download Code","text":"<p>Note that there is helpful little download icon on the right hand side of the toolbar that allows you to download the code the example (with your changes) and use it as a starting point for you own application. There are still some small changes you need to make, like replacing the text <code>YOUR_TOKEN</code> with the string of your actual token (and don't forget to put in quotes, like this: <code>\"datahub9876\"</code>).</p>"},{"location":"ui/#hint_1","title":"Hint","text":"<p>Playground access to your data.</p> <p>The playground uses it's own credentials and token to access the Spaces used in the samples. This token doesn't show in the code.</p> <p>If you want to use your own data, add the token where you need it, either by globally setting <code>YOUR_TOKEN</code> or by adding it to specific <code>credentials</code> configuration as the <code>access_token.</code></p>"},{"location":"ui/#map-output-3","title":"Map Output (3)","text":"<p>You will see the result of the example or your experiment in the right hand panel. The output is fully interactive.</p> <p>If you have coded yourself into a corner and the map does not work anymore as expected you can always Reset the sample back to it's original state where it should work.</p>"},{"location":"ui/#hint_2","title":"Hint","text":"<p>Also look into your browsers Developer Tools for messages. It also help to understand what's going to open your browsers Developer Tools     (for Chrome press <code>CTRL-SHIFT-I</code> or <code>CMD+OPTION+I</code> on macOS). There you see     console messages and network information for what content gets loaded, especially     when pan and zoom the map.</p>"},{"location":"ui/gettingstarted/","title":"Getting Started with XYZ Maps UI","text":"<p>Even when you're using a Playground sample as a starting point, it's good to know the mechanics of the data ends up on the map. And when you're starting from scratch, it's vital that you understand how to make all of it happen yourself.</p>"},{"location":"ui/gettingstarted/#setup-basic-map-display","title":"Setup Basic Map Display","text":"<ol> <li> <p>Create a basic HTML and load the modules</p> <pre><code>&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-common.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n      &lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-core.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n      &lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-display.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n      &lt;!-- include this if you want to use an MVT basemap --&gt;\n      &lt;script src=\"https://localhost:8080/maps/latest/xyz-maps-plugins.min.js\" type=\"text/javascript\" charset=\"UTF-8\" &gt;&lt;/script&gt;\n    &lt;/head&gt;\n</code></pre> </li> <li> <p>Add a div element to body that can act as the display container</p> <pre><code>&lt;body&gt;\n  &lt;div style=\"width: 960px; height: 540px\" id=\"map\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre> </li> <li> <p>Create a basic Map Layer/Provider and setup visibility</p> <pre><code>&lt;script type=\"application/javascript\"&gt;\n  //specify your credentials to spaces\n  var YOUR_ACCESS_TOKEN = \"abcdef\"; // &lt;--- TODO: Replace this with your token\n\n  // configure layers\n  var layers = [\n    // TODO \n  ]\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Initialize the Map with Layer config and define the starting location</p> <pre><code>  // setup the Map Display\n  window.display = new  here.xyz.maps.Map( document.getElementById(\"map\"), {\n      zoomLevel : 17,\n      center: {\n          longitude: -117.15406, latitude: 32.72966\n      },\n      // add layers to display\n      layers: layers\n  });\n</code></pre> </li> <li> <p>Congratulations! Your first XYZ Maps map is ready</p> </li> </ol>"},{"location":"ui/styleyourdata/","title":"Style your own data","text":"<p>In this Example we create our own custom style to make the data look we want. To keep it simple we'll be styling a line feature to be drawn with a light yellow, with yellow-grey dashed border and the <code>name</code> property shown as text inside the line.</p> <p>To do this, we define our own style group for the line (called <code>lineStyle</code> in the code). As you can see, it get's build up by the following drawing primitives provided inside the array:</p> <ul> <li>18px wide Yellow line</li> <li>18px wide Dark Grey dashed line (12px stroke, 10px gap)</li> <li>thinner 10px Light Yellow line</li> <li>text from the GeoJSON at the path <code>properties.name</code> in light grey</li> </ul> <p>Note that the <code>zIndex</code> property for each entry in the array defines the drawing order from bottom to top (ascending values)  - not the order in which the array was defined.</p> <p>To find out more about all the possible styling options, have a look at the documentation for the <code>TileLayer.Style</code></p> <pre><code>  // customize the styles that can be used\n  style:{\n    styleGroups: {\n      lineStyle: [\n        {zIndex:0, type:\"Line\", stroke:\"#E5B50B\", strokeWidth:18, \"strokeLinecap\": \"butt\"},\n        {zIndex:1, type:\"Line\", stroke:\"#1F1A00\", strokeWidth:18, \"strokeLinecap\": \"butt\", 'strokeDasharray': [12,10]},\n        {zIndex:2, type:\"Line\", stroke:\"#F7FABF\", strokeWidth:10},\n        {zIndex:3, type:\"Text\", textRef:\"properties.name\", fill:\"#3D272B\"}\n      ]\n    },\n    // decide per feature which style to use\n    assign: function(feature, zoomlevel){\n      return \"linkStyle\";\n  }\n</code></pre> <p>To be as dynamic as possible when it comes to styling there is the <code>assign(feature, zoomlevel)</code> function which you need to implement. This will decide which of the defined styles should be used for a given feature and zoom level.</p> <p>Keep in mind that this function will be called for each feature that will be rendered, so try to be mindful not to have too time-consuming logic there. It is expected to return a string that is the key to your <code>styleGroup</code> definition to use for the feature.</p>"},{"location":"ui/tapfeature/","title":"Interact with your data","text":"<p>It's very easy to interact with data that get shown by adding an event listener to the <code>display</code>. Here we're going to change the style of the feature that the user clicks on so that it highlights in a different color.</p> <ol> <li> <p>Define the style to use for the highlight</p> <pre><code>var clickedFeature;\n// Define new line style\nvar selectedStyle = [{\n    zIndex: 0,\n    type: \"Line\",\n    opacity: 0.7,\n    strokeWidth: 16,\n    stroke: \"#FFFFFF\"\n}];\n</code></pre> </li> <li> <p>Then remember which feature is (or was clicked) so that it can revert to the normal style when another is selected</p> <pre><code>var clickedFeature;\n</code></pre> </li> <li> <p>Finally, add an event listener function to the <code>display</code> to fire when the mouse button is released revert the previous selection back to normal. If a feature was actually selected <code>ev.target</code> will contain it, and this can be used set it to the highlight style.</p> <pre><code>// add event listener to pointerup\ndisplay.addEventListener('pointerup', function(ev){\n// Restore default feature style\n  if(clickedFeature)\n      linkLayer.setStyleGroup(clickedFeature);\n\n// If a feature is clicked\n  if(ev.target){\n    clickedFeature = ev.target;\n\n    // Set new feature style if mouse clicks on a feature\n    linkLayer.setStyleGroup(clickedFeature, selectedStyle);\n  }\n});\n</code></pre> </li> </ol>"},{"location":"ui/yourxyzspace/","title":"Display your XYZ Maps Space content","text":"<p>Adding a <code>SpaceProvider</code> as an additional <code>Layer</code> to the <code>display</code> enables you to quickly show your content on top of a map, without having to impement any additional functionality to fetch data from the space every time the user interacts with the map, like panning the map or zooming in and out. This will be handled completely by the provider/layer combination and the only thing you need to configure is where the data is you want to show, and at which zoom levels you want it to be visible.</p> <ol> <li> <p>Create and configure a <code>SpaceProvider</code> acting as a datasource to your XYZ Maps Space content</p> <pre><code>// Define provider for this layer\nvar mySpaceProvider = new here.xyz.maps.providers.SpaceProvider ({\n  // Name of the provider\n  name:  'SpaceProvider',\n\n  // Zoom level at which tiles are cached\n  level: 14,\n\n  // Space ID\n  space: 'playground-link',\n\n  // User credential of the provider\n  credentials: {\n    access_token: YOUR_ACCESS_TOKEN\n  }\n});\n</code></pre> </li> <li> <p>Create a Layer for displaying your data provided by your GeoSpaceProvider</p> <pre><code>// Create data layer with Space provider\nvar myLayer = new here.xyz.maps.layers.TileLayer({\n  // Name of the layer\n  name: 'mySpaceLayer',\n\n  // Minimum zoom level\n  min: 14,\n\n  // Maximum zoom level\n  max: 20,\n\n  // Define provider for this layer\n  provider: mySpaceProvider\n})\n</code></pre> </li> <li> <p>And now add the Layer to your display</p> <pre><code>display.addLayer( myLayer )\n</code></pre> </li> </ol>"}]}